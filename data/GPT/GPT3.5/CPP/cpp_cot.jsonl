{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n\nbool has_close_elements(vector<float> numbers, float threshold){\n    bool result = false;\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                result = true;\n                break;\n            }\n        }\n        if (result) {\n            break;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/1", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> groups;\n    int start = -1, end = -1;\n\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            start = i;\n        } else if (paren_string[i] == ')') {\n            end = i;\n            groups.push_back(paren_string.substr(start, end - start + 1));\n        }\n    }\n\n    return groups;\n}\n"}
{"task_id": "CPP/2", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    int integerPart = (int)number;\n    float decimalPart = number - integerPart;\n    return decimalPart;\n}\n"}
{"task_id": "CPP/3", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float mean = 0;\n    for (float num : numbers) {\n        mean += num;\n    }\n    mean /= numbers.size();\n    \n    float sum_abs_diff = 0;\n    for (float num : numbers) {\n        sum_abs_diff += abs(num - mean);\n    }\n    \n    return sum_abs_diff / numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        if (i != numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string) {\n    int maxNestingLevel = 0;\n    int currentNestingLevel = 0;\n    vector<int> result;\n\n    for (char c : paren_string) {\n        if (c == '(') {\n            currentNestingLevel++;\n        } else if (c == ')') {\n            currentNestingLevel--;\n        }\n\n        maxNestingLevel = max(maxNestingLevel, currentNestingLevel);\n\n        if (c == ' ') {\n            result.push_back(maxNestingLevel);\n            maxNestingLevel = 0;\n            currentNestingLevel = 0;\n        }\n    }\n\n    result.push_back(maxNestingLevel); // Add the last maxNestingLevel\n    return result;\n}\n"}
{"task_id": "CPP/7", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filteredStrings;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            filteredStrings.push_back(str);\n        }\n    }\n    return filteredStrings;\n}\n"}
{"task_id": "CPP/8", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> rollingMax;\n    for (int i = 0; i < numbers.size(); i++) {\n        int currentMax = numbers[0];\n        for (int j = 0; j <= i; j++) {\n            currentMax = max(currentMax, numbers[j]);\n        }\n        rollingMax.push_back(currentMax);\n    }\n    return rollingMax;\n}\n"}
{"task_id": "CPP/10", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\n\nstring make_palindrome(string str){\n    string palindrome = \"\";\n    for (int i = str.length() - 1; i >= 0; i--) {\n        if (is_palindrome(str.substr(i))) {\n            palindrome = str + string(str.rbegin(), str.rbegin() + str.length() - i);\n            break;\n        }\n    }\n    return palindrome;\n}\n"}
{"task_id": "CPP/11", "generation": "#include <string>\nstd::string string_xor(std::string a, std::string b) {\n    if (a.length() != b.length()) {\n        return \"Error: Input strings must be of the same length\";\n    }\n    \n    std::string result = \"\";\n    for (int i = 0; i < a.length(); i++) {\n        if (a[i] == b[i]) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring longest(vector<string> strings){\n    if (strings.empty()) {\n        return \"None\";\n    }\n    \n    string longestString = \"\";\n    for (const string& str : strings) {\n        if (str.length() > longestString.length()) {\n            longestString = str;\n        }\n    }\n    \n    return longestString;\n}\n"}
{"task_id": "CPP/13", "generation": "#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}\n"}
{"task_id": "CPP/14", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> prefixes;\n    for (int i = 0; i < str.length(); i++) {\n        prefixes.push_back(str.substr(0, i + 1));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string result = \"\";\n    for (int i = 0; i <= n; i++) {\n        result += to_string(i) + \" \";\n    }\n    result.pop_back(); // Remove the extra space at the end\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\n#include<set>\nusing namespace std;\n\nint count_distinct_characters(string str){\n    set<char> distinctChars;\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    for (char c : str) {\n        distinctChars.insert(c);\n    }\n    \n    return distinctChars.size();\n}\n"}
{"task_id": "CPP/17", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <unordered_map>\n\nstd::vector<int> parse_music(std::string music_string) {\n    std::unordered_map<std::string, int> note_duration = {{\"o\", 4}, {\"o|\", 2}, {\".|\", 1}};\n    std::vector<int> beats;\n    \n    size_t pos = 0;\n    std::string delimiter = \" \";\n    while ((pos = music_string.find(delimiter)) != std::string::npos) {\n        std::string note = music_string.substr(0, pos);\n        music_string.erase(0, pos + delimiter.length());\n        \n        beats.push_back(note_duration[note]);\n    }\n    \n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nint how_many_times(string str, string substring) {\n    int count = 0;\n    for (int i = 0; i <= str.size() - substring.size(); i++) {\n        bool match = true;\n        for (int j = 0; j < substring.size(); j++) {\n            if (str[i + j] != substring[j]) {\n                match = false;\n                break;\n            }\n        }\n        if (match) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "#include <stdio.h>\n#include <string>\n#include <map>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nstring sort_numbers(string numbers) {\n    // Step 1: Split the input string into individual number words\n    vector<string> numberWords;\n    string currentWord = \"\";\n    for (char c : numbers) {\n        if (c == ' ') {\n            numberWords.push_back(currentWord);\n            currentWord = \"\";\n        } else {\n            currentWord += c;\n        }\n    }\n    numberWords.push_back(currentWord);\n\n    // Step 2: Create a map to store the mapping of number words to numerical values\n    map<string, int> wordToNumber = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3},\n        {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\", 7},\n        {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    // Step 3: Convert the number words to numerical values\n    vector<int> numericValues;\n    for (string word : numberWords) {\n        numericValues.push_back(wordToNumber[word]);\n    }\n\n    // Step 4: Sort the numerical values in ascending order\n    sort(numericValues.begin(), numericValues.end());\n\n    // Step 5: Convert the sorted numerical values back to number words\n    vector<string> sortedWords;\n    for (int num : numericValues) {\n        for (auto it : wordToNumber) {\n            if (it.second == num) {\n                sortedWords.push_back(it.first);\n                break;\n            }\n        }\n    }\n\n    // Step 6: Join the sorted number words into a single string\n    string sortedString = \"\";\n    for (string word : sortedWords) {\n        sortedString += word + \" \";\n    }\n    sortedString.pop_back(); // Remove the extra space at the end\n\n    // Step 7: Return the sorted string\n    return sortedString;\n}\n"}
{"task_id": "CPP/20", "generation": "## Chain of thought:\n1. Initialize an empty vector `out` to store the closest elements.\n2. Iterate over the numbers vector using two nested loops to compare each pair of numbers.\n3. If the `out` vector is empty or the absolute difference between the current pair is less than the absolute difference between the elements in the `out` vector, update the `out` vector with the current pair.\n4. If the first element in the `out` vector is greater than the second element, swap them to maintain the order.\n5. Return the `out` vector containing the closest elements."}
{"task_id": "CPP/21", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){\n    float minVal = numbers[0];\n    float maxVal = numbers[0];\n    \n    for (float num : numbers) {\n        if (num < minVal) {\n            minVal = num;\n        }\n        if (num > maxVal) {\n            maxVal = num;\n        }\n    }\n    \n    float range = maxVal - minVal;\n    vector<float> rescaledValues;\n    \n    for (float num : numbers) {\n        float rescaled = (num - minVal) / range;\n        rescaledValues.push_back(rescaled);\n    }\n    \n    return rescaledValues;\n}\n"}
{"task_id": "CPP/22", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\n#include<algorithm>\n#include<vector>\n#include<typeinfo>\n\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n\nvector<int> filter_integers(list_any values){\n    vector<int> filteredIntegers;\n    for (const auto& val : values) {\n        if (val.type() == typeid(int)) {\n            filteredIntegers.push_back(boost::any_cast<int>(val));\n        }\n    }\n    return filteredIntegers;\n}\n"}
{"task_id": "CPP/23", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nint strlen(string str){\n    int length = 0;\n    for(int i = 0; str[i] != '\\0'; i++){\n        length++;\n    }\n    return length;\n}\n"}
{"task_id": "CPP/24", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    for (int i = n-1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return -1; // If no divisor is found\n}\n"}
{"task_id": "CPP/25", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nvector<int> factorize(int n){\n    vector<int> factors;\n    for (int i = 2; i <= sqrt(n); i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\n#include<set>\nusing namespace std;\n\nvector<int> remove_duplicates(vector<int> numbers){\n    set<int> uniqueElements;\n    vector<int> output;\n    \n    for (int num : numbers) {\n        if (uniqueElements.find(num) == uniqueElements.end()) {\n            uniqueElements.insert(num);\n            output.push_back(num);\n        }\n    }\n    \n    return output;\n}\n"}
{"task_id": "CPP/27", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    string result = \"\";\n    for (char ch : str) {\n        if (islower(ch)) {\n            result += toupper(ch);\n        } else if (isupper(ch)) {\n            result += tolower(ch);\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/28", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for (const string& s : strings) {\n        result += s;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> filteredStrings;\n    for (const string& str : strings) {\n        if (str.find(prefix) == 0) {\n            filteredStrings.push_back(str);\n        }\n    }\n    return filteredStrings;\n}\n"}
{"task_id": "CPP/30", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> positiveNumbers;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            positiveNumbers.push_back(l[i]);\n        }\n    }\n    return positiveNumbers;\n}\n"}
{"task_id": "CPP/31", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n < 2) {\n        return false;\n    }\n    for (long long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "double find_zero(vector<double> xs){\n    double zero = 0;\n    for (int x = -1000; x <= 1000; x++) {\n        double value = poly(xs, x);\n        if (abs(value) < 1e-6) {\n            zero = x;\n            break;\n        }\n    }\n    return zero;\n}\n"}
{"task_id": "CPP/33", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            vector<int> temp = {l[i]};\n            sort(temp.begin(), temp.end());\n            result.insert(result.end(), temp.begin(), temp.end());\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/34", "generation": "#include <stdio.h>\n#include <vector>\n#include <algorithm>\n#include <set>\nusing namespace std;\n\nvector<int> unique(vector<int> l) {\n    set<int> uniqueSet;\n    for (int num : l) {\n        uniqueSet.insert(num);\n    }\n    \n    vector<int> uniqueVec(uniqueSet.begin(), uniqueSet.end());\n    sort(uniqueVec.begin(), uniqueVec.end());\n    \n    return uniqueVec;\n}\n"}
{"task_id": "CPP/35", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\nfloat max_element(vector<float> l){\n    float max_num = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max_num) {\n            max_num = l[i];\n        }\n    }\n    return max_num;\n}\n"}
{"task_id": "CPP/36", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nint fizz_buzz(int n){\n    int count = 0;\n    for (int i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            string numStr = to_string(i);\n            if (numStr.find('7') != string::npos) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> result;\n    vector<float> even;\n    vector<float> odd;\n    \n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            even.push_back(l[i]);\n        } else {\n            odd.push_back(l[i]);\n        }\n    }\n    \n    sort(even.begin(), even.end());\n    \n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            result.push_back(even[i / 2]);\n        } else {\n            result.push_back(odd[i / 2]);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/38", "generation": "#include <string>\nusing namespace std;\n\nstring decode_cyclic(string s) {\n    string output;\n    for (int i = 0; i < s.length(); i += 3) {\n        string x = s.substr(i, 3);\n        if (x.length() == 3) {\n            x = x[2] + x.substr(0, 2);\n        }\n        output += x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/39", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n\nbool prime_check(int num) {\n    if (num < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint fibonacci(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint prime_fib(int n) {\n    int count = 0;\n    int i = 0;\n    while (count < n) {\n        int fib = fibonacci(i);\n        if (prime_check(fib)) {\n            count++;\n        }\n        i++;\n    }\n    return fibonacci(i - 1);\n}\n"}
{"task_id": "CPP/40", "generation": "#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool triples_sum_to_zero(vector<int> l) {\n    sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int left = i + 1;\n        int right = l.size() - 1;\n        while (left < right) {\n            int sum = l[i] + l[left] + l[right];\n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "#include <stdio.h>\nusing namespace std;\n\nint car_race_collision(int n) {\n    int collisions = 0;\n    for (int i = 1; i <= n; i++) {\n        collisions += i;\n    }\n    return collisions;\n}\n"}
{"task_id": "CPP/42", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> result;\n    for (int num : l) {\n        result.push_back(num + 1);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/43", "generation": "#include<stdio.h>\n#include<set>\n#include<vector>\nusing namespace std;\n\nbool pairs_sum_to_zero(vector<int> l){\n    set<int> seen;\n    for (int x : l) {\n        if (seen.find(-x) != seen.end()) {\n            return true;\n        }\n        seen.insert(x);\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x, int base){\n    string result = \"\";\n    while (x > 0){\n        int remainder = x % base;\n        result += to_string(remainder);\n        x = x / base;\n    }\n    reverse(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float h){\n    float area = 0.5 * a * h;\n    return area;\n}\n"}
{"task_id": "CPP/46", "generation": "#include <stdio.h>\nusing namespace std;\n\nint fib4(int n) {\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    int fib4Arr[4] = {0, 0, 2, 0};\n\n    for (int i = 4; i <= n; i++) {\n        int next = fib4Arr[0] + fib4Arr[1] + fib4Arr[2] + fib4Arr[3];\n        fib4Arr[0] = fib4Arr[1];\n        fib4Arr[1] = fib4Arr[2];\n        fib4Arr[2] = fib4Arr[3];\n        fib4Arr[3] = next;\n    }\n\n    return fib4Arr[3];\n}\n"}
{"task_id": "CPP/47", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 1) {\n        return l[n / 2];\n    } else {\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int leftPointer = 0;\n    int rightPointer = text.length() - 1;\n    \n    while (leftPointer < rightPointer) {\n        if (text[leftPointer] != text[rightPointer]) {\n            return false;\n        }\n        leftPointer++;\n        rightPointer--;\n    }\n    \n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "#include<stdio.h>\nusing namespace std;\nint modp(int n, int p){\n    if (n == 0) {\n        return 1;\n    }\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        result = (result * 2) % p;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/50", "generation": "#include <string>\nusing namespace std;\n\nstring decode_shift(string s) {\n    string out;\n    for (int i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out += (char)w;\n    }\n    return out;\n}\n"}
{"task_id": "CPP/51", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string result = \"\";\n    for (char c : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/52", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int> l, int t){\n    bool belowThreshold = true;\n    for (int num : l) {\n        if (num >= t) {\n            belowThreshold = false;\n            break;\n        }\n    }\n    return belowThreshold;\n}\n"}
{"task_id": "CPP/53", "generation": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x, int y){\n    return x + y;\n}\n"}
{"task_id": "CPP/54", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nbool same_chars(string s0, string s1){\n    int count0[26] = {0};\n    int count1[26] = {0};\n\n    for(char c : s0){\n        count0[c - 'a']++;\n    }\n\n    for(char c : s1){\n        count1[c - 'a']++;\n    }\n\n    sort(count0, count0 + 26);\n    sort(count1, count1 + 26);\n\n    for(int i = 0; i < 26; i++){\n        if(count0[i] != count1[i]){\n            return false;\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/55", "generation": "#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    int a = 0, b = 1, fib = 0;\n    for (int i = 2; i <= n; i++) {\n        fib = a + b;\n        a = b;\n        b = fib;\n    }\n    return fib;\n}\n"}
{"task_id": "CPP/56", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    int balance = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            balance++;\n        } else if (bracket == '>') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    bool increasing = true, decreasing = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\n"}
{"task_id": "CPP/58", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\n#include<set>\nusing namespace std;\n\nvector<int> common(vector<int> l1, vector<int> l2){\n    set<int> set1(l1.begin(), l1.end());\n    set<int> set2(l2.begin(), l2.end());\n    \n    set<int> result;\n    for (int num : set1) {\n        if (set2.count(num) > 0) {\n            result.insert(num);\n        }\n    }\n    \n    vector<int> resultVec(result.begin(), result.end());\n    sort(resultVec.begin(), resultVec.end());\n    \n    return resultVec;\n}\n"}
{"task_id": "CPP/59", "generation": "#include <stdio.h>\n#include <math.h>\n\nbool isPrime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint largest_prime_factor(int n) {\n    int largestPrime = 0;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            if (isPrime(i) && i > largestPrime) {\n                largestPrime = i;\n            }\n        }\n    }\n    return largestPrime;\n}\n"}
{"task_id": "CPP/60", "generation": "#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int counter = 0;\n    \n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            counter++;\n        } else if (bracket == ')') {\n            counter--;\n            if (counter < 0) {\n                return false;\n            }\n        }\n    }\n    \n    return counter == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result = {};\n    for (int i = 1; i < xs.size(); i++) {\n        float derivative = xs[i] * i;\n        result.push_back(derivative);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "#include<stdio.h>\nusing namespace std;\nint fibfibHelper(int n, int memo[]) {\n    if (memo[n] != -1) {\n        return memo[n];\n    }\n    memo[n] = fibfibHelper(n-1, memo) + fibfibHelper(n-2, memo) + fibfibHelper(n-3, memo);\n    return memo[n];\n}\n\nint fibfib(int n) {\n    if (n == 0 || n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 1;\n    }\n    int memo[n+1];\n    for (int i = 0; i <= n; i++) {\n        memo[i] = -1;\n    }\n    memo[0] = 0;\n    memo[1] = 0;\n    memo[2] = 1;\n    return fibfibHelper(n, memo);\n}\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        char c = tolower(s[i]);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i == s.size() - 1)) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring circular_shift(int x, int shift) {\n    string numStr = to_string(x);\n    int numDigits = numStr.length();\n    \n    if (shift > numDigits) {\n        reverse(numStr.begin(), numStr.end());\n        return numStr;\n    }\n    \n    string result = numStr;\n    for (int i = 0; i < numDigits; i++) {\n        int newIndex = (i + shift) % numDigits;\n        result[newIndex] = numStr[i];\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/66", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nint digitSum(string s){\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += c;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    int apples, oranges;\n    sscanf(s.c_str(), \"%d apples and %d oranges\", &apples, &oranges);\n    return n - apples - oranges;\n}\n"}
{"task_id": "CPP/68", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    int smallest_even_value = -1;\n    int smallest_even_index = -1;\n    \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && (smallest_even_value == -1 || arr[i] < smallest_even_value)) {\n            smallest_even_value = arr[i];\n            smallest_even_index = i;\n        } else if (arr[i] % 2 == 0 && arr[i] == smallest_even_value && i < smallest_even_index) {\n            smallest_even_index = i;\n        }\n    }\n    \n    if (smallest_even_value == -1) {\n        return {};\n    } else {\n        return {smallest_even_value, smallest_even_index};\n    }\n}\n"}
{"task_id": "CPP/69", "generation": "#include<stdio.h>\n#include<vector>\n#include<map>\nusing namespace std;\n\nint search(vector<int> lst){\n    map<int, int> frequencyMap;\n    for (int num : lst) {\n        frequencyMap[num]++;\n    }\n    \n    int maxInteger = -1;\n    for (const auto& pair : frequencyMap) {\n        int integer = pair.first;\n        int frequency = pair.second;\n        if (integer == frequency && integer > maxInteger) {\n            maxInteger = integer;\n        }\n    }\n    \n    return maxInteger;\n}\n"}
{"task_id": "CPP/70", "generation": "#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> strange_sort_list(vector<int> lst) {\n    sort(lst.begin(), lst.end());\n    vector<int> result;\n    int start = 0, end = lst.size() - 1;\n    \n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n            result.push_back(lst[start]);\n            start++;\n        } else {\n            result.push_back(lst[end]);\n            end--;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float b, float c){\n    if (a + b > c && a + c > b && b + c > a) {\n        float s = (a + b + c) / 2;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100; // Round to 2 decimal points\n    } else {\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nbool will_it_fly(vector<int> q, int w){\n    bool isPalindrome = true;\n    int sum = 0;\n    \n    for (int i = 0; i < q.size()/2; i++) {\n        if (q[i] != q[q.size()-1-i]) {\n            isPalindrome = false;\n            break;\n        }\n    }\n    \n    for (int num : q) {\n        sum += num;\n    }\n    \n    return isPalindrome && sum <= w;\n}\n"}
{"task_id": "CPP/73", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    if (arr.size() <= 1) {\n        return 0;\n    }\n    int changes = 0;\n    int start = 0;\n    int end = arr.size() - 1;\n    while (start < end) {\n        if (arr[start] != arr[end]) {\n            changes++;\n            if (arr[start] < arr[end]) {\n                arr[start] = arr[end];\n            } else {\n                arr[end] = arr[start];\n            }\n        }\n        start++;\n        end--;\n    }\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int totalChars1 = 0, totalChars2 = 0;\n    \n    for (const string& str : lst1) {\n        totalChars1 += str.size();\n    }\n    \n    for (const string& str : lst2) {\n        totalChars2 += str.size();\n    }\n    \n    if (totalChars1 < totalChars2) {\n        return lst1;\n    } else if (totalChars2 < totalChars1) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n    if (a < 6)\n        return false;\n    if (a % 2 == 0 || a % 3 == 0)\n        return false;\n    for (int i = 2; i < 100; i++) {\n        bool is_i_prime = true;\n        for (int j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                is_i_prime = false;\n                break;\n            }\n        }\n        if (is_i_prime) {\n            for (int j = i + 1; j < 100; j++) {\n                bool is_j_prime = true;\n                for (int k = 2; k * k <= j; k++) {\n                    if (j % k == 0) {\n                        is_j_prime = false;\n                        break;\n                    }\n                }\n                if (is_j_prime) {\n                    for (int k = j + 1; k < 100; k++) {\n                        bool is_k_prime = true;\n                        for (int l = 2; l * l <= k; l++) {\n                            if (k % l == 0) {\n                                is_k_prime = false;\n                                break;\n                            }\n                        }\n                        if (is_k_prime && i * j * k == a)\n                            return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x, int n) {\n    if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return false;\n    }\n    \n    int power = 0;\n    while (true) {\n        int result = pow(n, power);\n        if (result == x) {\n            return true;\n        }\n        if (result > x) {\n            return false;\n        }\n        power++;\n    }\n}\n"}
{"task_id": "CPP/77", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    if (a == 0) {\n        return true;\n    }\n    int abs_a = abs(a);\n    int cube_root = round(cbrt(abs_a));\n    return (cube_root * cube_root * cube_root == abs_a);\n}\n"}
{"task_id": "CPP/78", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<unordered_set>\nusing namespace std;\n\nint hex_key(string num) {\n    int count = 0;\n    unordered_set<char> prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'};\n    \n    for (char c : num) {\n        if (prime_hex_digits.find(c) != prime_hex_digits.end()) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring decimal_to_binary(int decimal){\n    string binaryString = \"db\";\n    while (decimal > 0) {\n        binaryString = to_string(decimal % 2) + binaryString;\n        decimal /= 2;\n    }\n    return binaryString + \"db\";\n}\n"}
{"task_id": "CPP/80", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i++) {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letter_grades;\n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "#include<stdio.h>\n#include<string>\n#include<cmath>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool prime_length(string str){\n    int length = str.length();\n    return isPrime(length);\n}\n"}
{"task_id": "CPP/83", "generation": "## Chain of thought:\n1. **Counting n-digit numbers starting with 1**:\n    - For an n-digit number starting with 1, the first digit is fixed as 1, and the remaining n-1 digits can be any digit from 0 to 9.\n    - So, the total count of n-digit numbers starting with 1 is 9 * 10^(n-1) (as the first digit can't be 0).\n2. **Counting n-digit numbers ending with 1**:\n    - For an n-digit number ending with 1, the last digit is fixed as 1, and the remaining n-1 digits can be any digit from 0 to 9.\n    - So, the total count of n-digit numbers ending with 1 is 10^(n-1) (as the last digit can be 1-9).\n3. **Total count**:\n    - To get the total count of n-digit numbers that start or end with 1, we sum the counts obtained from steps 1 and 2.\n4. **Pseudocode**:\n    - Initialize a variable `count` to 0.\n    - Calculate the count of n-digit numbers starting with 1: `9 * pow(10, n-1)`.\n    - Calculate the count of n-digit numbers ending with 1: `pow(10, n-1)`.\n    - Add the counts obtained above to `count`.\n    - Return `count`.\n\n## Pseudocode:\n"}
{"task_id": "CPP/84", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring solve(int N) {\n    int sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    \n    string binarySum = \"\";\n    while (sum > 0) {\n        binarySum = to_string(sum % 2) + binarySum;\n        sum /= 2;\n    }\n    \n    if (binarySum == \"\") {\n        return \"0\";\n    }\n    return binarySum;\n}\n"}
{"task_id": "CPP/85", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    string result = \"\";\n    string word = \"\";\n    for (char c : s) {\n        if (c == ' ') {\n            sort(word.begin(), word.end());\n            result += word + \" \";\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    sort(word.begin(), word.end());\n    result += word;\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    sort(result.begin(), result.end());\n    for (vector<int>& v : result) {\n        sort(v.begin(), v.end(), greater<int>());\n    }\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> sort_array(vector<int> array){\n    if (array.empty()) {\n        return {};\n    }\n    \n    int sum = array.front() + array.back();\n    if (sum % 2 != 0) {\n        sort(array.begin(), array.end());\n    } else {\n        sort(array.rbegin(), array.rend());\n    }\n    \n    return array;\n}\n"}
{"task_id": "CPP/89", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    for (char c : s) {\n        if (islower(c)) {\n            int index = (alphabet.find(c) + 2 * 2) % 26;\n            char encrypted_char = alphabet[index];\n            result += encrypted_char;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/90", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint next_smallest(vector<int> lst){\n    if (lst.empty()) {\n        return -1; // Return -1 for None\n    }\n\n    sort(lst.begin(), lst.end());\n    int count = 0;\n    int second_smallest = -1;\n\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n            count++;\n        }\n        if (count == 2) {\n            second_smallest = lst[i];\n            break;\n        }\n    }\n\n    if (count < 2) {\n        return -1; // Return -1 for None\n    }\n\n    return second_smallest;\n}\n"}
{"task_id": "CPP/91", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int boredomCount = 0;\n    string delimiter = \".?!\";\n    size_t pos = 0;\n    string token;\n    while ((pos = S.find_first_of(delimiter)) != string::npos) {\n        token = S.substr(0, pos);\n        if (token.substr(0, 2) == \"I \") {\n            boredomCount++;\n        }\n        S.erase(0, pos + 1);\n    }\n    if (S.substr(0, 2) == \"I \") {\n        boredomCount++;\n    }\n    return boredomCount;\n}\n"}
{"task_id": "CPP/92", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a, float b, float c){\n    if (a != int(a) || b != int(b) || c != int(c)) {\n        return false;\n    }\n    if (a == b + c || b == a + c || c == a + b) {\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring encode(string message){\n    string encoded_message = \"\";\n    for (char& c : message) {\n        if (isalpha(c)) {\n            c = toupper(c);\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                c = c + 2;\n            }\n            if (c > 'Z') {\n                c = c - 26;\n            }\n        }\n        encoded_message += c;\n    }\n    return encoded_message;\n}\n"}
{"task_id": "CPP/94", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<cmath>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nint skjkasdkd(vector<int> lst) {\n    int largestPrime = -1;\n    for (int num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    return sumOfDigits(largestPrime);\n}\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\n\nbool check_dict_case(map<string,string> dict){\n    if (dict.empty()) {\n        return false;\n    }\n    for (auto const& [key, value] : dict) {\n        for (char c : key) {\n            if (!isalpha(c)) {\n                return false;\n            }\n        }\n        bool allLower = true;\n        bool allUpper = true;\n        for (char c : key) {\n            if (!islower(c)) {\n                allLower = false;\n            }\n            if (!isupper(c)) {\n                allUpper = false;\n            }\n        }\n        if (!allLower && !allUpper) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nbool isPrime(int num) {\n    if (num < 2) return false;\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nvector<int> count_up_to(int n) {\n    vector<int> result;\n    if (n <= 1) return result;\n    for (int i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a, int b) {\n    int unitA = a % 10;\n    int unitB = b % 10;\n    int result = unitA * unitB;\n    return result;\n}\n"}
{"task_id": "CPP/98", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "#include <stdio.h>\n#include <math.h>\n#include <string>\nusing namespace std;\n\nint closest_integer(string value) {\n    double num = stod(value);\n    int floor_val = floor(num);\n    int ceil_val = ceil(num);\n\n    if (abs(num - floor_val) == abs(num - ceil_val)) {\n        if (num > 0) {\n            return ceil_val;\n        } else {\n            return floor_val;\n        }\n    } else {\n        return (abs(num - floor_val) < abs(num - ceil_val)) ? floor_val : ceil_val;\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> make_a_pile(int n){\n    vector<int> stones;\n    stones.push_back(n);\n    for (int i = 1; i < n; i++) {\n        if (stones[i - 1] % 2 == 0) {\n            stones.push_back(stones[i - 1] + 1);\n        } else {\n            stones.push_back(stones[i - 1] + 2);\n        }\n    }\n    return stones;\n}\n"}
{"task_id": "CPP/101", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n\n    for (char c : s) {\n        if (isalpha(c)) {\n            word += c;\n        } else if (c == ',' || c == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n    }\n\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "#include<stdio.h>\nusing namespace std;\nint choose_num(int x, int y){\n    if (x % 2 != 0) {\n        x++;\n    }\n    if (y % 2 != 0) {\n        y--;\n    }\n    if (x > y) {\n        return -1;\n    }\n    return y;\n}\n"}
{"task_id": "CPP/103", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n\nstring rounded_avg(int n, int m) {\n    if (n > m) {\n        return \"-1\";\n    }\n\n    int sum = 0;\n    int count = m - n + 1;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    int average = round((double)sum / count);\n    string binary = \"\";\n    while (average > 0) {\n        binary = to_string(average % 2) + binary;\n        average /= 2;\n    }\n\n    return binary;\n}\n"}
{"task_id": "CPP/104", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> unique_digits(vector<int> x){\n    vector<int> output;\n    for (int num : x) {\n        bool flag = true;\n        int temp = num;\n        while (temp > 0) {\n            int digit = temp % 10;\n            if (digit % 2 == 0) {\n                flag = false;\n                break;\n            }\n            temp /= 10;\n        }\n        if (flag) {\n            output.push_back(num);\n        }\n    }\n    sort(output.begin(), output.end());\n    return output;\n}\n"}
{"task_id": "CPP/105", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n\nvector<string> by_length(vector<int> arr){\n    map<int, string> intToString = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, \n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n    \n    vector<int> filteredIntegers;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filteredIntegers.push_back(num);\n        }\n    }\n\n    sort(filteredIntegers.begin(), filteredIntegers.end());\n\n    reverse(filteredIntegers.begin(), filteredIntegers.end());\n\n    vector<string> result;\n    for (int num : filteredIntegers) {\n        result.push_back(intToString[num]);\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> result;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            int fact = 1;\n            for (int j = 1; j <= i; j++) {\n                fact *= j;\n            }\n            result.push_back(fact);\n        } else {\n            int sum = 0;\n            for (int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nbool isPalindrome(int num) {\n    string numStr = to_string(num);\n    int start = 0, end = numStr.length() - 1;\n    while (start < end) {\n        if (numStr[start] != numStr[end]) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}\n\nvector<int> even_odd_palindrome(int n) {\n    int evenCount = 0, oddCount = 0;\n    for (int i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/108", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> numbers){\n    int count = 0;\n    for (int number : numbers) {\n        int sum_digits = 0;\n        int num = abs(number);\n        while (num > 0) {\n            int digit = num % 10;\n            sum_digits += digit;\n            num = num / 10;\n        }\n        if (number < 0) {\n            sum_digits *= -1;\n        }\n        if (sum_digits > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if (arr.empty()) {\n        return true;\n    }\n    int min_element = *min_element(arr.begin(), arr.end());\n    int min_index = distance(arr.begin(), find(arr.begin(), arr.end(), min_element));\n    if (is_sorted(arr.begin(), arr.end())) {\n        return true;\n    }\n    if (min_index == arr.size() - 1) {\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            bool replaced = false;\n            for (int i = 0; i < lst2.size(); i++) {\n                if (lst2[i] % 2 == 0) {\n                    lst1.push_back(lst2[i]);\n                    lst2.erase(lst2.begin() + i);\n                    replaced = true;\n                    break;\n                }\n            }\n            if (!replaced) {\n                return \"NO\";\n            }\n        }\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\n\nmap<char,int> histogram(string test){\n    map<char, int> frequencyMap;\n    int maxFreq = 0;\n\n    for (char c : test) {\n        frequencyMap[c]++;\n        maxFreq = max(maxFreq, frequencyMap[c]);\n    }\n\n    map<char, int> result;\n    for (const auto& entry : frequencyMap) {\n        if (entry.second == maxFreq) {\n            result[entry.first] = entry.second;\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> reverse_delete(string s, string c) {\n    string result = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    \n    string reversed = result;\n    reverse(reversed.begin(), reversed.end());\n    \n    return {result, (result == reversed) ? \"True\" : \"False\"};\n}\n"}
{"task_id": "CPP/113", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst){\n    vector<string> result;\n    for (string str : lst) {\n        int count = 0;\n        for (char c : str) {\n            int digit = c - '0';\n            if (digit % 2 != 0) {\n                count++;\n            }\n        }\n        string new_str = \"the number of odd elements \" + to_string(count) + \"n the str\" + to_string(count) + \"ng \" + str + \" of the \" + to_string(count) + \"nput.\";\n        result.push_back(new_str);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = LLONG_MAX;\n    long long currentSum = 0;\n    \n    for (long long num : nums) {\n        currentSum = max(num, currentSum + num);\n        minSum = min(minSum, currentSum);\n    }\n    \n    return minSum;\n}\n"}
{"task_id": "CPP/115", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int count = 0;\n    for (int j = 0; j < grid[0].size(); j++) {\n        int water_level = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            water_level += grid[i][j];\n        }\n        if (water_level > capacity) {\n            count += water_level / capacity;\n            if (water_level % capacity != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/116", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint countOnes(int num) {\n    int count = 0;\n    while (num > 0) {\n        count += num & 1;\n        num >>= 1;\n    }\n    return count;\n}\n\nbool customComparator(int a, int b) {\n    int onesA = countOnes(a);\n    int onesB = countOnes(b);\n\n    if (onesA == onesB) {\n        return a < b;\n    }\n    return onesA < onesB;\n}\n\nvector<int> sort_array(vector<int> arr){\n    sort(arr.begin(), arr.end(), customComparator);\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nbool isConsonant(char c) {\n    c = tolower(c);\n    return (c >= 'a' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u');\n}\n\nvector<string> select_words(string s, int n) {\n    vector<string> result;\n    string word = \"\";\n    for (char c : s) {\n        if (c == ' ') {\n            if (!word.empty()) {\n                int consonant_count = count_if(word.begin(), word.end(), isConsonant);\n                if (consonant_count == n) {\n                    result.push_back(word);\n                }\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        int consonant_count = count_if(word.begin(), word.end(), isConsonant);\n        if (consonant_count == n) {\n            result.push_back(word);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring get_closest_vowel(string word) {\n    string result = \"\";\n    for (int i = word.size() - 2; i > 0; i--) {\n        if (word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' &&\n            (word[i - 1] == 'a' || word[i - 1] == 'e' || word[i - 1] == 'i' || word[i - 1] == 'o' || word[i - 1] == 'u') &&\n            (word[i + 1] == 'a' || word[i + 1] == 'e' || word[i + 1] == 'i' || word[i + 1] == 'o' || word[i + 1] == 'u')) {\n            result = word[i];\n            break;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    int open_count_1 = 0;\n    int close_count_1 = 0;\n    int open_count_2 = 0;\n    int close_count_2 = 0;\n    \n    for (char character : lst[0]) {\n        if (character == '(') {\n            open_count_1++;\n        } else {\n            close_count_1++;\n        }\n    }\n    \n    for (char character : lst[1]) {\n        if (character == '(') {\n            open_count_2++;\n        } else {\n            close_count_2++;\n        }\n    }\n    \n    if (open_count_1 + open_count_2 == close_count_1 + close_count_2) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n"}
{"task_id": "CPP/120", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr, int k){\n    sort(arr.begin(), arr.end(), greater<int>());\n    return vector<int>(arr.begin(), arr.begin() + k);\n}\n"}
{"task_id": "CPP/121", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint add_elements(vector<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (abs(arr[i]) < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> get_odd_collatz(int n){\n    vector<int> oddNumbers;\n    oddNumbers.push_back(n);\n\n    while (n != 1) {\n        if (n % 2 != 0) {\n            oddNumbers.push_back(n);\n        }\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n\n    sort(oddNumbers.begin(), oddNumbers.end());\n    return oddNumbers;\n}\n"}
{"task_id": "CPP/124", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    if (date.empty()) {\n        return false;\n    }\n    int day, month, year;\n    if (sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year) != 3) {\n        return false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month == 2) {\n        if (day < 1 || day > 29) {\n            return false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> split_words(string txt){\n    vector<string> result;\n    size_t found = txt.find(\" \");\n    if (found != string::npos) {\n        string delimiter = \" \";\n        size_t pos = 0;\n        while ((pos = txt.find(delimiter)) != string::npos) {\n            string token = txt.substr(0, pos);\n            result.push_back(token);\n            txt.erase(0, pos + delimiter.length());\n        }\n        result.push_back(txt);\n    } else {\n        found = txt.find(\",\");\n        if (found != string::npos) {\n            string delimiter = \",\";\n            size_t pos = 0;\n            while ((pos = txt.find(delimiter)) != string::npos) {\n                string token = txt.substr(0, pos);\n                result.push_back(token);\n                txt.erase(0, pos + delimiter.length());\n            }\n            result.push_back(txt);\n        } else {\n            int count = 0;\n            for (char c : txt) {\n                if (islower(c) && (c - 'a') % 2 == 1) {\n                    count++;\n                }\n            }\n            result.push_back(to_string(count));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/126", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\n#include<map>\nusing namespace std;\n\nbool is_sorted(vector<int> lst){\n    map<int, int> freq;\n    if (lst.size() <= 1) {\n        return true;\n    }\n    \n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n        freq[lst[i]]++;\n        if (freq[lst[i]] > 2) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n\n    if (start > end) {\n        return \"NO\";\n    }\n\n    int length = end - start;\n    if (isPrime(length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/128", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if (arr.empty()) {\n        return -32768;\n    }\n    int sum_magnitudes = 0;\n    int product_signs = 1;\n    for (int num : arr) {\n        sum_magnitudes += abs(num);\n        if (num > 0) {\n            product_signs *= 1;\n        } else if (num < 0) {\n            product_signs *= -1;\n        } else {\n            product_signs *= 0;\n        }\n    }\n    return sum_magnitudes * product_signs;\n}\n"}
{"task_id": "CPP/129", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvoid backtrack(vector<vector<int>>& grid, int k, int x, int y, vector<int>& path, vector<int>& minPath) {\n    if (path.size() == k) {\n        if (minPath.empty() || path < minPath) {\n            minPath = path;\n        }\n        return;\n    }\n    \n    int n = grid.size();\n    path.push_back(grid[x][y]);\n    \n    vector<pair<int, int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    for (const auto& dir : directions) {\n        int nx = x + dir.first;\n        int ny = y + dir.second;\n        if (nx >= 0 && nx < n && ny >= 0 && ny < n) {\n            backtrack(grid, k, nx, ny, path, minPath);\n        }\n    }\n    \n    path.pop_back();\n}\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    vector<int> minPath;\n    int n = grid.size();\n    \n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            vector<int> path;\n            backtrack(grid, k, i, j, path, minPath);\n        }\n    }\n    \n    return minPath;\n}\n"}
{"task_id": "CPP/130", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> tribonacci = {};\n    if (n == 0) {\n        tribonacci.push_back(0);\n        return tribonacci;\n    } else if (n == 1) {\n        tribonacci = {0, 1};\n        return tribonacci;\n    } else if (n == 2) {\n        tribonacci = {0, 1, 1};\n        return tribonacci;\n    } else {\n        tribonacci = {0, 1, 1};\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacci.push_back(1 + i / 2);\n            } else {\n                tribonacci.push_back(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1]);\n            }\n        }\n        return tribonacci;\n    }\n}\n"}
{"task_id": "CPP/131", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int product = 1;\n    string numStr = to_string(n);\n    for (char c : numStr) {\n        int digit = c - '0';\n        if (digit % 2 != 0) {\n            product *= digit;\n        }\n    }\n    if (product == 1) {\n        return 0;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "#include<stdio.h>\n#include<string>\n#include<stack>\nusing namespace std;\n\nbool is_nested(string str){\n    stack<char> st;\n    for (char c : str) {\n        if (c == '[') {\n            st.push(c);\n        } else if (c == ']') {\n            if (st.empty()) {\n                return false;\n            }\n            st.pop();\n        }\n    }\n    return !st.empty();\n}\n"}
{"task_id": "CPP/133", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for (float num : lst) {\n        int rounded = ceil(num);\n        sum += rounded * rounded;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.empty()) {\n        return false;\n    }\n    char lastChar = txt.back();\n    if (isalpha(lastChar) && (txt.size() == 1 || txt[txt.size() - 2] == ' ')) {\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int resultIndex = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            resultIndex = i;\n        }\n    }\n    return resultIndex;\n}\n"}
{"task_id": "CPP/136", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    int largest_negative = 0;\n    int smallest_positive = 0;\n    \n    for (int element : lst) {\n        if (element < 0 && element < largest_negative) {\n            largest_negative = element;\n        } else if (element > 0 && (element < smallest_positive || smallest_positive == 0)) {\n            smallest_positive = element;\n        }\n    }\n    \n    return {largest_negative, smallest_positive};\n}\n"}
{"task_id": "CPP/137", "generation": "#include <boost/any.hpp>\n#include <string>\n#include <algorithm>\n\nboost::any compare_one(boost::any a, boost::any b) {\n    if (a.type() == b.type()) {\n        if (a.type() == typeid(int)) {\n            return boost::any_cast<int>(a) > boost::any_cast<int>(b) ? a : b;\n        } else if (a.type() == typeid(float)) {\n            return boost::any_cast<float>(a) > boost::any_cast<float>(b) ? a : b;\n        } else if (a.type() == typeid(std::string)) {\n            return boost::any_cast<std::string>(a) > boost::any_cast<std::string>(b) ? a : b;\n        }\n    } else {\n        if (a.type() == typeid(int) && b.type() == typeid(float)) {\n            return boost::any_cast<int>(a) > boost::any_cast<float>(b) ? a : b;\n        } else if (a.type() == typeid(float) && b.type() == typeid(int)) {\n            return boost::any_cast<float>(a) > boost::any_cast<int>(b) ? a : b;\n        } else if (a.type() == typeid(std::string) && b.type() == typeid(int)) {\n            return std::stof(boost::any_cast<std::string>(a)) > boost::any_cast<int>(b) ? a : b;\n        } else if (a.type() == typeid(int) && b.type() == typeid(std::string)) {\n            return boost::any_cast<int>(a) > std::stof(boost::any_cast<std::string>(b)) ? a : b;\n        } else if (a.type() == typeid(std::string) && b.type() == typeid(float)) {\n            return std::stof(boost::any_cast<std::string>(a)) > boost::any_cast<float>(b) ? a : b;\n        } else if (a.type() == typeid(float) && b.type() == typeid(std::string)) {\n            return boost::any_cast<float>(a) > std::stof(boost::any_cast<std::string>(b)) ? a : b;\n        }\n    }\n    return \"None\";\n}\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if (n < 8) {\n        return false;\n    }\n    for (int i = 2; i <= n - 7; i++) {\n        for (int j = i; j <= n - 5; j++) {\n            for (int k = j; k <= n - 3; k++) {\n                for (int l = k; l <= n - 1; l++) {\n                    if (i + j + k + l == n) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/139", "generation": "#include <stdio.h>\n\nlong long special_factorial(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return n * special_factorial(n - 1);\n}\n"}
{"task_id": "CPP/140", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring fix_spaces(string text){\n    string result = \"\";\n    int consecutive_spaces = 0;\n    \n    for (char c : text) {\n        if (c == ' ') {\n            consecutive_spaces++;\n            if (text.find_first_not_of(' ', text.find(c) + 1) != string::npos) {\n                if (consecutive_spaces > 2) {\n                    result += \"-\";\n                } else {\n                    result += \"_\";\n                }\n                consecutive_spaces = 0;\n            }\n        } else {\n            result += c;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring file_name_check(string file_name){\n    int digitCount = 0;\n    bool dotFlag = false;\n    string beforeDot = \"\";\n    string afterDot = \"\";\n\n    for (char c : file_name) {\n        if (isdigit(c)) {\n            digitCount++;\n        } else if (c == '.') {\n            dotFlag = true;\n        } else if (dotFlag) {\n            afterDot += c;\n        } else {\n            beforeDot += c;\n        }\n    }\n\n    if (digitCount <= 3 && dotFlag && isalpha(beforeDot[0]) && (afterDot == \"txt\" || afterDot == \"exe\" || afterDot == \"dll\")) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n"}
{"task_id": "CPP/142", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "#include<stdio.h>\n#include<string>\n#include<cmath>\n#include<vector>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    string result = \"\";\n    vector<string> words;\n    string word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            words.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    words.push_back(word);\n\n    for (string w : words) {\n        if (isPrime(w.length())) {\n            result += w + \" \";\n        }\n    }\n\n    if (!result.empty()) {\n        result.pop_back(); // Remove the extra space at the end\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x, string n){\n    int num1 = stoi(x.substr(0, x.find('/')));\n    int den1 = stoi(x.substr(x.find('/') + 1));\n    int num2 = stoi(n.substr(0, n.find('/')));\n    int den2 = stoi(n.substr(n.find('/') + 1));\n\n    double result = (double(num1) / den1) * (double(num2) / den2);\n\n    return result == int(result);\n}\n"}
{"task_id": "CPP/145", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num != 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nbool compareIntegers(int a, int b) {\n    int sumA = sumOfDigits(abs(a)) * (a < 0 ? -1 : 1);\n    int sumB = sumOfDigits(abs(b)) * (b < 0 ? -1 : 1);\n    \n    if (sumA == sumB) {\n        return find(nums.begin(), nums.end(), a) < find(nums.begin(), nums.end(), b);\n    }\n    \n    return sumA < sumB;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    sort(nums.begin(), nums.end(), compareIntegers);\n    return nums;\n}\n"}
{"task_id": "CPP/146", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<cmath>\nusing namespace std;\n\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for (int num : nums) {\n        if (num > 10 && abs(num) % 10 % 2 != 0 && abs(num) / pow(10, int(log10(abs(num))) % 2 != 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint get_max_triples(int n){\n    int count = 0;\n    vector<int> a(n);\n\n    // Fill the vector a based on the formula\n    for (int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n\n    // Iterate over all triples (i, j, k) where i < j < k\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\n    std::map<std::string, int> planetOrder = {\n        {\"Mercury\", 1},\n        {\"Venus\", 2},\n        {\"Earth\", 3},\n        {\"Mars\", 4},\n        {\"Jupiter\", 5},\n        {\"Saturn\", 6},\n        {\"Uranus\", 7},\n        {\"Neptune\", 8}\n    };\n\n    if (planetOrder.find(planet1) == planetOrder.end() || planetOrder.find(planet2) == planetOrder.end()) {\n        return {};\n    }\n\n    int order1 = planetOrder[planet1];\n    int order2 = planetOrder[planet2];\n\n    std::vector<std::string> result;\n    for (const auto& planet : planetOrder) {\n        if (planet.second > order1 && planet.second < order2) {\n            result.push_back(planet.first);\n        }\n    }\n\n    std::sort(result.begin(), result.end(), [&](const std::string& a, const std::string& b) {\n        return planetOrder[a] < planetOrder[b];\n    });\n\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> result;\n    \n    for (const string& str : lst) {\n        if (str.length() % 2 == 0) {\n            result.push_back(str);\n        }\n    }\n    \n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    \n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "#include <stdio.h>\n#include <cmath>\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for (float num : lst) {\n        if (num > 0 && fmod(num, 1) == 0 && ((int)num) % 2 != 0) {\n            sum += (long long)pow(num, 2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> result;\n    for (int i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring Strongest_Extension(string class_name, vector<string> extensions){\n    string strongestExtension = \"\";\n    int maxStrength = INT_MIN;\n    int maxIndex = -1;\n\n    for (int i = 0; i < extensions.size(); i++) {\n        int CAP = 0, SM = 0;\n        for (char c : extensions[i]) {\n            if (isupper(c)) CAP++;\n            if (islower(c)) SM++;\n        }\n        int strength = CAP - SM;\n        if (strength > maxStrength || (strength == maxStrength && i < maxIndex)) {\n            maxStrength = strength;\n            maxIndex = i;\n        }\n    }\n\n    if (maxIndex != -1) {\n        strongestExtension = class_name + \".\" + extensions[maxIndex];\n    }\n\n    return strongestExtension;\n}\n"}
{"task_id": "CPP/154", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool isSubstring(string s, string sub) {\n    return s.find(sub) != string::npos;\n}\n\nbool cycpattern_check(string a, string b) {\n    int n = b.size();\n    for (int i = 0; i < n; i++) {\n        if (isSubstring(a, b)) {\n            return true;\n        }\n        b = b.substr(1) + b[0]; // Rotate the string\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    int evenCount = 0;\n    int oddCount = 0;\n    string numStr = to_string(abs(num));\n    \n    for (char c : numStr) {\n        int digit = c - '0';\n        if (digit % 2 == 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    \n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/156", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring int_to_mini_roman(int number){\n    vector<pair<int, string>> romanMap = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n\n    string result = \"\";\n    for (const auto& pair : romanMap) {\n        while (number >= pair.first) {\n            result += pair.second;\n            number -= pair.first;\n        }\n    }\n\n    // Convert the result string to lowercase\n    transform(result.begin(), result.end(), result.begin(), ::tolower);\n\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a, float b, float c){\n    float a_square = a * a;\n    float b_square = b * b;\n    float c_square = c * c;\n\n    float largest_side = max(a, max(b, c));\n    float sum_of_squares_of_smaller_sides = (a_square + b_square + c_square) - (largest_side * largest_side);\n\n    return (largest_side * largest_side == sum_of_squares_of_smaller_sides);\n}\n"}
{"task_id": "CPP/158", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nstring find_max(vector<string> words){\n    int maxUniqueChars = 0;\n    string maxWord = \"\";\n\n    for (const string& word : words) {\n        int uniqueChars = set<char>(word.begin(), word.end()).size();\n        if (uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word < maxWord)) {\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        }\n    }\n\n    return maxWord;\n}\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number, int need, int remaining) {\n    vector<int> result;\n    int totalEaten = number + need;\n    int carrotsLeft = remaining - totalEaten;\n    if (carrotsLeft < 0) {\n        carrotsLeft = 0;\n    }\n    result.push_back(totalEaten);\n    result.push_back(carrotsLeft);\n    return result;\n}\n"}
{"task_id": "CPP/160", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nint do_algebra(vector<string> operato, vector<int> operand){\n    int result = operand[0];\n    for (int i = 0; i < operato.size(); i++) {\n        if (operato[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (operato[i] == \"//\") {\n            result /= operand[i + 1];\n        } else if (operato[i] == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    string result = \"\";\n    bool hasLetters = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            c = islower(c) ? toupper(c) : tolower(c);\n            hasLetters = true;\n        }\n        result += c;\n    }\n    if (!hasLetters) {\n        reverse(result.begin(), result.end());\n    }\n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n\nstring string_to_md5(string text){\n    if (text.empty()) {\n        return \"None\";\n    }\n\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n\n    char mdString[33];\n    for(int i = 0; i < 16; i++) {\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    }\n\n    return string(mdString);\n}\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a, int b) {\n    vector<int> result;\n    for (int i = a; i <= b; i++) {\n        if (i % 2 == 0 && i < 10) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    for (int i=0;i<numbers.size();i++)\n        for (int j=i+1;j<numbers.size();j++)\n            if (abs(numbers[i]-numbers[j])<threshold)\n                return true;\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> result;\n    string current_group = \"\";\n    \n    for (char c : paren_string) {\n        if (c == '(' || c == ')') {\n            current_group += c;\n        } else if (c == ' ') {\n            continue;\n        } else {\n            current_group += c;\n        }\n        \n        if (c == ')') {\n            result.push_back(current_group);\n            current_group = \"\";\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    int intPart = (int)number;\n    float decimalPart = number - intPart;\n    return decimalPart;\n}\n"}
{"task_id": "CPP/3", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum = sum + numbers[i];\n    }\n    float mean = sum / numbers.size();\n    \n    float deviation_sum = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        deviation_sum = deviation_sum + abs(numbers[i] - mean);\n    }\n    \n    float mean_absolute_deviation = deviation_sum / numbers.size();\n    \n    return mean_absolute_deviation;\n}\n"}
{"task_id": "CPP/5", "generation": "#include <vector>\n\nstd::vector<int> intersperse(std::vector<int> numbers, int delimeter) {\n    std::vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        if (i != numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string) {\n    vector<int> result;\n    int maxDepth = 0;\n    int depth = 0;\n\n    for (char c : paren_string) {\n        if (c == '(') {\n            depth++;\n        } else if (c == ')') {\n            if (depth > maxDepth) {\n                maxDepth = depth;\n            }\n            depth = 0;\n        } else if (c == ' ') {\n            result.push_back(maxDepth);\n            maxDepth = 0;\n            depth = 0;\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/7", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filteredStrings;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            filteredStrings.push_back(str);\n        }\n    }\n    return filteredStrings;\n}\n"}
{"task_id": "CPP/8", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "#include <vector>\n\nstd::vector<int> rolling_max(std::vector<int> numbers) {\n    std::vector<int> rollingMax;\n    for (int i = 0; i < numbers.size(); i++) {\n        int currentMax = numbers[0];\n        for (int j = 1; j <= i; j++) {\n            currentMax = std::max(currentMax, numbers[j]);\n        }\n        rollingMax.push_back(currentMax);\n    }\n    return rollingMax;\n}\n"}
{"task_id": "CPP/10", "generation": "#include <stdio.h>\n#include <string>\nusing namespace std;\n\nbool is_palindrome(string str) {\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(string str) {\n    int n = str.size();\n    if (n == 0) {\n        return \"\";\n    }\n    for (int i = n - 1; i >= 0; i--) {\n        if (is_palindrome(str.substr(i))) {\n            string prefix = str.substr(0, i);\n            string suffix = str.substr(i);\n            string reverse_prefix(prefix.rbegin(), prefix.rend());\n            return str + reverse_prefix;\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/11", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring string_xor(string a, string b) {\n    if (a.length() != b.length()) {\n        return \"Error: Input strings are not of the same length\";\n    }\n\n    string result = \"\";\n    for (int i = 0; i < a.length(); i++) {\n        if (a[i] != b[i]) {\n            result += \"1\";\n        } else {\n            result += \"0\";\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if (strings.empty()) {\n        return \"None\";\n    }\n    string longestStr = strings[0];\n    for (const string& str : strings) {\n        if (str.length() > longestStr.length()) {\n            longestStr = str;\n        }\n    }\n    return longestStr;\n}\n"}
{"task_id": "CPP/13", "generation": "#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}\n"}
{"task_id": "CPP/14", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> prefixes;\n    for (int i = 1; i <= str.size(); i++) {\n        string prefix = str.substr(0, i);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring string_sequence(int n){\n    string result = \"\";\n    for (int i = 0; i <= n; i++) {\n        result += to_string(i) + \" \";\n    }\n    result.pop_back(); // Remove the extra space at the end\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\n#include<unordered_set>\nusing namespace std;\n\nint count_distinct_characters(string str){\n    unordered_set<char> distinctChars;\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    for (char c : str) {\n        distinctChars.insert(c);\n    }\n    \n    return distinctChars.size();\n}\n"}
{"task_id": "CPP/17", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <unordered_map>\n\nstd::vector<int> parse_music(std::string music_string) {\n    std::unordered_map<std::string, int> noteDuration = {\n        {\"o\", 4},\n        {\"o|\", 2},\n        {\".|\", 1}\n    };\n\n    std::vector<int> result;\n    size_t pos = 0;\n    std::string delimiter = \" \";\n    while ((pos = music_string.find(delimiter)) != std::string::npos) {\n        std::string note = music_string.substr(0, pos);\n        music_string.erase(0, pos + delimiter.length());\n        result.push_back(noteDuration[note]);\n    }\n    result.push_back(noteDuration[music_string]); // Last note\n\n    return result;\n}\n"}
{"task_id": "CPP/18", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str, string substring){\n    int count = 0;\n    for (int i = 0; i <= str.length() - substring.length(); i++) {\n        if (str.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\n#include<algorithm>\n#include<vector>\n#include<sstream>\n\nstd::string sort_numbers(std::string numbers) {\n    std::map<std::string, int> wordToNum = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3},\n        {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\", 7},\n        {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string word;\n    while (ss >> word) {\n        nums.push_back(wordToNum[word]);\n    }\n\n    std::sort(nums.begin(), nums.end());\n\n    std::map<int, std::string> numToWord;\n    for (const auto& pair : wordToNum) {\n        numToWord[pair.second] = pair.first;\n    }\n\n    std::string sortedNumbers;\n    for (int num : nums) {\n        sortedNumbers += numToWord[num] + \" \";\n    }\n\n    return sortedNumbers;\n}\n"}
{"task_id": "CPP/20", "generation": "## Chain of thought:\n1. Initialize an empty vector `out` to store the closest elements.\n2. Iterate over the numbers vector using two nested loops to compare each pair of numbers.\n3. Check if the `out` vector is empty or the absolute difference between the current pair is less than the absolute difference between the elements in the `out` vector.\n4. If the condition is met, update the `out` vector with the current pair.\n5. After finding the closest pair, check if the first element is greater than the second element in the `out` vector and swap them if necessary.\n6. Return the `out` vector containing the closest elements in order."}
{"task_id": "CPP/21", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){\n    float min_val = numbers[0];\n    float max_val = numbers[0];\n    \n    // Find the minimum and maximum values\n    for (float num : numbers) {\n        min_val = min(min_val, num);\n        max_val = max(max_val, num);\n    }\n    \n    float range = max_val - min_val;\n    vector<float> rescaled_values;\n    \n    // Apply linear transformation to each element\n    for (float num : numbers) {\n        float rescaled = (num - min_val) / range;\n        rescaled_values.push_back(rescaled);\n    }\n    \n    return rescaled_values;\n}\n"}
{"task_id": "CPP/22", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\n#include<algorithm>\n#include<vector>\n#include<iostream>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n\nvector<int> filter_integers(list_any values) {\n    vector<int> filteredIntegers;\n    for (const auto& val : values) {\n        if (val.type() == typeid(int)) {\n            filteredIntegers.push_back(boost::any_cast<int>(val));\n        }\n    }\n    return filteredIntegers;\n}\n"}
{"task_id": "CPP/23", "generation": "#include <string>\nusing namespace std;\n\nint strlen(string str) {\n    int length = 0;\n    for (int i = 0; str[i] != '\\0'; i++) {\n        length++;\n    }\n    return length;\n}\n"}
{"task_id": "CPP/24", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int largest = 1;\n    for (int i = 1; i <= n/2; i++) {\n        if (n % i == 0 && i > largest) {\n            largest = i;\n        }\n    }\n    return largest;\n}\n"}
{"task_id": "CPP/25", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nvector<int> factorize(int n){\n    vector<int> factors;\n    for (int i = 2; i <= sqrt(n); i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\n#include<set>\nusing namespace std;\n\nvector<int> remove_duplicates(vector<int> numbers){\n    set<int> uniqueElements;\n    vector<int> output;\n    \n    for (int num : numbers) {\n        if (uniqueElements.find(num) == uniqueElements.end()) {\n            uniqueElements.insert(num);\n            output.push_back(num);\n        }\n    }\n    \n    return output;\n}\n"}
{"task_id": "CPP/27", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    string result = \"\";\n    for (char ch : str) {\n        if (islower(ch)) {\n            result += toupper(ch);\n        } else if (isupper(ch)) {\n            result += tolower(ch);\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/28", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for (const string& s : strings) {\n        result += s;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> filtered_strings;\n    \n    for (const string& str : strings) {\n        if (str.substr(0, prefix.size()) == prefix) {\n            filtered_strings.push_back(str);\n        }\n    }\n    \n    return filtered_strings;\n}\n"}
{"task_id": "CPP/30", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> positiveNumbers;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            positiveNumbers.push_back(l[i]);\n        }\n    }\n    return positiveNumbers;\n}\n"}
{"task_id": "CPP/31", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n < 2) {\n        return false;\n    }\n    if (n % 2 == 0 && n != 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\ndouble poly(vector<double> xs, double x){\n    double sum = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\ndouble poly_derivative(vector<double> xs, double x){\n    double derivative_sum = 0;\n    for (int i = 1; i < xs.size(); i++) {\n        derivative_sum += i * xs[i] * pow(x, i - 1);\n    }\n    return derivative_sum;\n}\n\ndouble find_zero(vector<double> xs){\n    if (xs.size() % 2 != 0 || xs.empty()) {\n        return 0.0;  // Invalid input\n    }\n    \n    double x = 0.0;  // Initial guess for the zero point\n    while (true) {\n        double x_next = x - poly(xs, x) / poly_derivative(xs, x);  // Newton's method\n        if (abs(x_next - x) < 1e-6) {  // Convergence criteria\n            return x_next;\n        }\n        x = x_next;\n    }\n}\n"}
{"task_id": "CPP/33", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> result;\n    vector<int> temp;\n    for (int i = 0; i < l.size(); i++) {\n        if ((i + 1) % 3 == 0) {\n            temp.push_back(l[i]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    sort(temp.begin(), temp.end());\n    int tempIndex = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if ((i + 1) % 3 == 0) {\n            result.push_back(temp[tempIndex]);\n            tempIndex++;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/34", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\n#include<set>\nusing namespace std;\n\nvector<int> unique(vector<int> l){\n    set<int> uniqueSet;\n    for (int num : l) {\n        uniqueSet.insert(num);\n    }\n    vector<int> result(uniqueSet.begin(), uniqueSet.end());\n    return result;\n}\n"}
{"task_id": "CPP/35", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\nfloat max_element(vector<float> l){\n    float max_element = l[0]; // Initialize with the first element\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max_element) {\n            max_element = l[i]; // Update if a larger element is found\n        }\n    }\n    return max_element;\n}\n"}
{"task_id": "CPP/36", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nint fizz_buzz(int n){\n    int count = 0;\n    for (int i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            string numStr = to_string(i);\n            if (numStr.find('7') != string::npos) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> result;\n    vector<float> evenIndices;\n    vector<float> oddIndices;\n    \n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            evenIndices.push_back(l[i]);\n        } else {\n            oddIndices.push_back(l[i]);\n        }\n    }\n    \n    sort(evenIndices.begin(), evenIndices.end());\n    \n    for (int i = 0, j = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            result.push_back(evenIndices[j]);\n            j++;\n        } else {\n            result.push_back(oddIndices[i / 2]);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/38", "generation": "#include <string>\n\nstd::string decode_cyclic(std::string s) {\n    std::string output;\n    int num = (s.length() + 2) / 3;\n    for (int i = 0; i < num; i++) {\n        std::string x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x.substr(2) + x.substr(0, 2);\n        }\n        output += x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/39", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n\nbool is_prime(int num) {\n    if (num < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint prime_fib(int n) {\n    int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n\n    int count = 0;\n    int i = 2;\n    while (count < n) {\n        if (is_prime(fib(i))) {\n            count++;\n        }\n        i++;\n    }\n\n    return fib(i - 1);\n}\n"}
{"task_id": "CPP/40", "generation": "#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool triples_sum_to_zero(vector<int> l){\n    sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        int a = l[i];\n        int b = i + 1;\n        int c = l.size() - 1;\n        while (b < c) {\n            int sum = a + l[b] + l[c];\n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                b++;\n            } else {\n                c--;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "#include <stdio.h>\n\nint car_race_collision(int n) {\n    int collisions = 0;\n    for (int i = 1; i <= n; i++) {\n        collisions += i - 1; // Number of collisions for the i-th car\n    }\n    return collisions;\n}\n"}
{"task_id": "CPP/42", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(l[i] + 1);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/43", "generation": "#include<stdio.h>\n#include<vector>\n#include<unordered_set>\nusing namespace std;\n\nbool pairs_sum_to_zero(vector<int> l){\n    unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x, int base){\n    if (x == 0) {\n        return \"0\";\n    }\n    \n    string result = \"\";\n    while (x > 0) {\n        int remainder = x % base;\n        result += char(remainder + '0');\n        x = x / base;\n    }\n    \n    reverse(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float h){\n    float area = 0.5 * a * h;\n    return area;\n}\n"}
{"task_id": "CPP/46", "generation": "#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    \n    int fib4Arr[4] = {0, 0, 2, 0};\n    for (int i = 4; i <= n; i++) {\n        int next = fib4Arr[0] + fib4Arr[1] + fib4Arr[2] + fib4Arr[3];\n        fib4Arr[0] = fib4Arr[1];\n        fib4Arr[1] = fib4Arr[2];\n        fib4Arr[2] = fib4Arr[3];\n        fib4Arr[3] = next;\n    }\n    return fib4Arr[3];\n}\n"}
{"task_id": "CPP/47", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 != 0) {\n        return l[n / 2];\n    } else {\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool is_palindrome(string text){\n    int start = 0;\n    int end = text.size() - 1;\n    \n    while (start < end) {\n        if (text[start] != text[end]) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    \n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "#include<stdio.h>\nusing namespace std;\nint modp(int n, int p){\n    if (n == 0) {\n        return 1;\n    }\n    int result = 1;\n    for (int i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/50", "generation": "string decode_shift(string s){\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a');\n        if (w < (int)'a') {\n            w += 26;\n        }\n        out = out + (char)w;\n    }\n    return out;\n}\n"}
{"task_id": "CPP/51", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring remove_vowels(string text){\n    string result = \"\";\n    string vowels = \"aeiouAEIOU\";\n    for (char c : text) {\n        if (vowels.find(c) == string::npos) {\n            result += c;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/52", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int> l, int t){\n    bool belowThresh = true;\n    for (int num : l) {\n        if (num >= t) {\n            belowThresh = false;\n            break;\n        }\n    }\n    return belowThresh;\n}\n"}
{"task_id": "CPP/53", "generation": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x, int y) {\n    return x + y;\n}\n"}
{"task_id": "CPP/54", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<unordered_map>\nusing namespace std;\n\nbool same_chars(string s0, string s1) {\n    unordered_map<char, int> freqMap0, freqMap1;\n\n    for (char c : s0) {\n        freqMap0[c]++;\n    }\n\n    for (char c : s1) {\n        freqMap1[c]++;\n    }\n\n    if (freqMap0.size() != freqMap1.size()) {\n        return false;\n    }\n\n    for (auto& pair : freqMap0) {\n        if (freqMap1.find(pair.first) == freqMap1.end() || freqMap1[pair.first] != pair.second) {\n            return false;\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/55", "generation": "#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n"}
{"task_id": "CPP/56", "generation": "#include <stack>\n#include <string>\n\nbool correct_bracketing(std::string brackets) {\n    std::stack<char> stack;\n    \n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            stack.push(bracket);\n        } else if (bracket == '>') {\n            if (stack.empty()) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    \n    return stack.empty();\n}\n"}
{"task_id": "CPP/57", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    bool increasing = true;\n    bool decreasing = true;\n    \n    for (int i = 0; i < l.size()-1; i++) {\n        if (l[i] > l[i+1]) {\n            increasing = false;\n        }\n        if (l[i] < l[i+1]) {\n            decreasing = false;\n        }\n        \n        if (!increasing && !decreasing) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n"}
{"task_id": "CPP/58", "generation": "#include <stdio.h>\n#include <vector>\n#include <algorithm>\n#include <set>\nusing namespace std;\n\nvector<int> common(vector<int> l1, vector<int> l2) {\n    set<int> s1(l1.begin(), l1.end());\n    set<int> s2(l2.begin(), l2.end());\n    \n    vector<int> commonElements;\n    \n    for (int num : s1) {\n        if (s2.count(num) > 0) {\n            commonElements.push_back(num);\n        }\n    }\n    \n    sort(commonElements.begin(), commonElements.end());\n    \n    return commonElements;\n}\n"}
{"task_id": "CPP/59", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n\nint largest_prime_factor(int n){\n    while (n % 2 == 0) {\n        n = n / 2;\n    }\n    for (int i = 3; i <= sqrt(n); i = i + 2) {\n        while (n % i == 0) {\n            n = n / i;\n        }\n    }\n    return n;\n}\n"}
{"task_id": "CPP/60", "generation": "#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    return n * (n + 1) / 2;\n}\n"}
{"task_id": "CPP/61", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool correct_bracketing(string brackets){\n    int counter = 0;\n    \n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            counter++;\n        } else if (bracket == ')') {\n            counter--;\n            if (counter < 0) {\n                return false;\n            }\n        }\n    }\n    \n    return counter == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result = {};\n    for (int i = 1; i < xs.size(); i++) {\n        float derivative = xs[i] * i;\n        result.push_back(derivative);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint fibfibHelper(int n, vector<int>& memo) {\n    if (memo[n] != -1) {\n        return memo[n];\n    }\n    memo[n] = fibfibHelper(n-1, memo) + fibfibHelper(n-2, memo) + fibfibHelper(n-3, memo);\n    return memo[n];\n}\n\nint fibfib(int n) {\n    if (n == 0 || n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 1;\n    }\n    vector<int> memo(n+1, -1);\n    memo[0] = 0;\n    memo[1] = 0;\n    memo[2] = 1;\n    return fibfibHelper(n, memo);\n}\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = tolower(s[i]);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i == s.length() - 1)) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x, int shift){\n    string num_str = to_string(x);\n    int num_digits = num_str.size();\n    \n    if (shift > num_digits) {\n        reverse(num_str.begin(), num_str.end());\n        return num_str;\n    }\n    \n    shift = shift % num_digits;\n    string result = num_str.substr(num_digits - shift) + num_str.substr(0, num_digits - shift);\n    \n    return result;\n}\n"}
{"task_id": "CPP/66", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += c;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    int apples, oranges;\n    sscanf(s.c_str(), \"%d apples and %d oranges\", &apples, &oranges);\n    return n - apples - oranges;\n}\n"}
{"task_id": "CPP/68", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    int smallestValue = INT_MAX;\n    int smallestIndex = -1;\n    \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < smallestValue) {\n            smallestValue = arr[i];\n            smallestIndex = i;\n        } else if (arr[i] % 2 == 0 && arr[i] == smallestValue && i < smallestIndex) {\n            smallestIndex = i;\n        }\n    }\n    \n    if (smallestIndex == -1) {\n        return {};\n    } else {\n        return {smallestValue, smallestIndex};\n    }\n}\n"}
{"task_id": "CPP/69", "generation": "#include<stdio.h>\n#include<vector>\n#include<map>\nusing namespace std;\n\nint search(vector<int> lst){\n    map<int, int> frequencyMap;\n    for (int num : lst) {\n        frequencyMap[num]++;\n    }\n    \n    int maxNum = -1;\n    for (auto& pair : frequencyMap) {\n        int num = pair.first;\n        int freq = pair.second;\n        if (num >= freq && num > maxNum) {\n            maxNum = num;\n        }\n    }\n    \n    return maxNum;\n}\n"}
{"task_id": "CPP/70", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    sort(lst.begin(), lst.end());\n    vector<int> out;\n    int start = 0, end = lst.size() - 1;\n    while (start <= end) {\n        out.push_back(lst[start]);\n        start++;\n        if (start > end) break;\n        out.push_back(lst[end]);\n        end--;\n    }\n    return out;\n}\n"}
{"task_id": "CPP/71", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n\nfloat triangle_area(float a, float b, float c) {\n    if (a + b > c && b + c > a && a + c > b) {\n        float s = (a + b + c) / 2;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return roundf(area * 100) / 100; // Round to 2 decimal points\n    } else {\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q, int w){\n    bool isBalanced = true;\n    for (int i = 0; i < q.size(); i++) {\n        if (q[i] != q[q.size() - 1 - i]) {\n            isBalanced = false;\n            break;\n        }\n    }\n    int sum = 0;\n    for (int i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    return isBalanced && sum <= w;\n}\n"}
{"task_id": "CPP/73", "generation": "#include <stdio.h>\n#include <vector>\nusing namespace std;\n\nint smallest_change(vector<int> arr) {\n    int start = 0;\n    int end = arr.size() - 1;\n    int changes = 0;\n\n    while (start < end) {\n        if (arr[start] != arr[end]) {\n            changes++;\n        }\n        start++;\n        end--;\n    }\n\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int totalChars1 = 0, totalChars2 = 0;\n\n    for (const string& str : lst1) {\n        totalChars1 += str.size();\n    }\n\n    for (const string& str : lst2) {\n        totalChars2 += str.size();\n    }\n\n    if (totalChars1 < totalChars2) {\n        return lst1;\n    } else if (totalChars2 < totalChars1) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n    if (a < 6)\n        return false;\n    if (a % 2 == 0 || a % 3 == 0)\n        return false;\n    for (int i = 5; i <= 97; i++) {\n        if (a % i == 0) {\n            int b = a / i;\n            for (int j = i; j <= 97; j++) {\n                if (b % j == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x, int n) {\n    if (x <= 0 || n <= 1) {\n        return false;\n    }\n    if (x == 1) {\n        return true;\n    }\n    int power = 1;\n    while (power < x) {\n        power = power * n;\n        if (power == x) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/77", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    if (a == 0) {\n        return true;\n    }\n    a = abs(a);\n    for (int i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/78", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<unordered_set>\nusing namespace std;\n\nint hex_key(string num) {\n    unordered_set<char> prime_digits = {'2', '3', '5', '7', 'B', 'D'};\n    int count = 0;\n    \n    for (char c : num) {\n        if (prime_digits.find(c) != prime_digits.end()) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring decimal_to_binary(int decimal){\n    string binaryString = \"db\";\n    while(decimal > 0){\n        binaryString = to_string(decimal % 2) + binaryString;\n        decimal /= 2;\n    }\n    binaryString += \"db\";\n    return binaryString;\n}\n"}
{"task_id": "CPP/80", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if (s.length() < 3) {\n        return false;\n    }\n    for (int i = 0; i <= s.length() - 3; i++) {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letter_grades;\n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "#include<stdio.h>\n#include<string>\n#include<cmath>\nusing namespace std;\n\nbool prime_length(string str){\n    int length = str.length();\n    if (length <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(length); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    int count = 0;\n    for (int i = pow(10, n - 1); i < pow(10, n); i++) {\n        if (i % 10 == 1 || i / pow(10, n - 1) == 1) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/84", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring solve(int N){\n    int sum = 0;\n    int num = N;\n    \n    // Calculate the sum of digits\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    \n    // Convert sum to binary\n    string binary = \"\";\n    while (sum > 0) {\n        binary = to_string(sum % 2) + binary;\n        sum /= 2;\n    }\n    \n    return binary;\n}\n"}
{"task_id": "CPP/85", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint add(vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "#include <stdio.h>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    stringstream ss(s);\n    string word, result;\n    \n    while (ss >> word) {\n        sort(word.begin(), word.end());\n        result += word + \" \";\n    }\n    \n    // Remove the extra space at the end\n    if (!result.empty()) {\n        result.pop_back();\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> sort_array(vector<int> array){\n    if (array.empty()) {\n        return array;\n    }\n\n    int sum = array[0] + array[array.size() - 1];\n    \n    if (sum % 2 == 1) {\n        sort(array.begin(), array.end());\n    } else {\n        sort(array.begin(), array.end(), greater<int>());\n    }\n    \n    return array;\n}\n"}
{"task_id": "CPP/89", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring encrypt(string s){\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    \n    for (char c : s) {\n        if (islower(c)) {\n            int index = alphabet.find(c);\n            char new_char = alphabet[(index + 2 * 2) % 26];\n            encrypted += new_char;\n        } else {\n            encrypted += c;\n        }\n    }\n    \n    return encrypted;\n}\n"}
{"task_id": "CPP/90", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint next_smallest(vector<int> lst){\n    if (lst.size() < 2) {\n        return -1;\n    }\n    \n    sort(lst.begin(), lst.end());\n    \n    int uniqueCount = 1;\n    int secondSmallest = -1;\n    \n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n            uniqueCount++;\n        }\n        if (uniqueCount == 2) {\n            secondSmallest = lst[i];\n            break;\n        }\n    }\n    \n    if (uniqueCount < 2) {\n        return -1;\n    } else {\n        return secondSmallest;\n    }\n}\n"}
{"task_id": "CPP/91", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int boredomCount = 0;\n    string currentSentence = \"\";\n    \n    for (char c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n            if (!currentSentence.empty()) {\n                if (currentSentence.substr(0, 2) == \"I \") {\n                    boredomCount++;\n                }\n                currentSentence = \"\";\n            }\n        } else {\n            currentSentence += c;\n        }\n    }\n    \n    if (!currentSentence.empty() && currentSentence.substr(0, 2) == \"I \") {\n        boredomCount++;\n    }\n    \n    return boredomCount;\n}\n"}
{"task_id": "CPP/92", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a, float b, float c){\n    if (a == int(a) && b == int(b) && c == int(c)) {\n        if (a == b + c || b == a + c || c == a + b) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring encode(string message){\n    string encodedMessage = \"\";\n    for (char c : message) {\n        if (isalpha(c)) {\n            if (tolower(c) == 'a' || tolower(c) == 'e' || tolower(c) == 'i' || tolower(c) == 'o' || tolower(c) == 'u') {\n                char newChar = isupper(c) ? toupper(c + 2) : tolower(c + 2);\n                encodedMessage += newChar;\n            } else {\n                char newChar = isupper(c) ? tolower(c) : toupper(c);\n                encodedMessage += newChar;\n            }\n        } else {\n            encodedMessage += c;\n        }\n    }\n    return encodedMessage;\n}\n"}
{"task_id": "CPP/94", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<cmath>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nint skjkasdkd(vector<int> lst) {\n    int largestPrime = 0;\n    for (int num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    return sumOfDigits(largestPrime);\n}\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\n\nbool check_dict_case(map<string,string> dict){\n    if (dict.empty()) {\n        return false;\n    }\n    for (const auto& entry : dict) {\n        string key = entry.first;\n        bool isLowerCase = true;\n        bool isUpperCase = true;\n        for (char c : key) {\n            if (!isalpha(c)) {\n                return false;\n            }\n            if (!islower(c)) {\n                isLowerCase = false;\n            }\n            if (!isupper(c)) {\n                isUpperCase = false;\n            }\n        }\n        if (!isLowerCase && !isUpperCase) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> count_up_to(int n){\n    vector<int> prime_numbers;\n    \n    if (n <= 1) {\n        return prime_numbers;\n    }\n    \n    for (int i = 2; i < n; i++) {\n        bool is_prime = true;\n        for (int j = 2; j < i; j++) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        \n        if (is_prime) {\n            prime_numbers.push_back(i);\n        }\n    }\n    \n    return prime_numbers;\n}\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a, int b){\n    int unitA = abs(a) % 10;\n    int unitB = abs(b) % 10;\n    return unitA * unitB;\n}\n"}
{"task_id": "CPP/98", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n\nint closest_integer(string value){\n    double num = stod(value); // Convert string to double\n    int floor_num = floor(num); // Floor of the number\n    int ceil_num = ceil(num); // Ceiling of the number\n\n    double diff_floor = abs(num - floor_num); // Absolute difference from floor\n    double diff_ceil = abs(num - ceil_num); // Absolute difference from ceiling\n\n    if (diff_floor == diff_ceil) {\n        if (num > 0) {\n            return ceil_num;\n        } else {\n            return floor_num;\n        }\n    } else {\n        return (diff_floor < diff_ceil) ? floor_num : ceil_num;\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> make_a_pile(int n){\n    vector<int> stones;\n    int stonesCount = n;\n    \n    for (int i = 0; i < n; i++) {\n        stones.push_back(stonesCount);\n        if (stonesCount % 2 == 0) {\n            stonesCount += 1; // Next odd number\n        } else {\n            stonesCount += 2; // Next even number\n        }\n    }\n    \n    return stones;\n}\n"}
{"task_id": "CPP/101", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> words_string(string s){\n    vector<string> words;\n    string currentWord = \"\";\n\n    for (char c : s) {\n        if (c != ' ' && c != ',') {\n            currentWord += c;\n        } else {\n            if (!currentWord.empty()) {\n                words.push_back(currentWord);\n                currentWord = \"\";\n            }\n        }\n    }\n\n    if (!currentWord.empty()) {\n        words.push_back(currentWord);\n    }\n\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "#include<stdio.h>\nusing namespace std;\nint choose_num(int x, int y) {\n    if (x % 2 != 0) {\n        x++;\n    }\n    if (y % 2 != 0) {\n        y--;\n    }\n    if (x > y) {\n        return -1;\n    }\n    return y;\n}\n"}
{"task_id": "CPP/103", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n\nstring rounded_avg(int n, int m) {\n    if (n > m) {\n        return \"-1\";\n    }\n\n    int sum = 0;\n    int count = m - n + 1;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    int average = round((double)sum / count);\n    string binary = \"\";\n    while (average > 0) {\n        binary = to_string(average % 2) + binary;\n        average /= 2;\n    }\n\n    return binary;\n}\n"}
{"task_id": "CPP/104", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> unique_digits(vector<int> x){\n    vector<int> output;\n    for (int num : x) {\n        bool hasEvenDigit = false;\n        string strNum = to_string(num);\n        for (char c : strNum) {\n            if ((c - '0') % 2 == 0) {\n                hasEvenDigit = true;\n                break;\n            }\n        }\n        if (!hasEvenDigit) {\n            output.push_back(num);\n        }\n    }\n    sort(output.begin(), output.end());\n    return output;\n}\n"}
{"task_id": "CPP/105", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n\nvector<string> by_length(vector<int> arr){\n    map<int, string> numToString = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n\n    vector<int> filtered;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered.push_back(num);\n        }\n    }\n\n    sort(filtered.begin(), filtered.end());\n\n    reverse(filtered.begin(), filtered.end());\n\n    vector<string> result;\n    for (int num : filtered) {\n        result.push_back(numToString[num]);\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "#include <vector>\n\nvector<int> f(int n) {\n    vector<int> result(n);\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            int factorial = 1;\n            for (int j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result[i - 1] = factorial;\n        } else {\n            int sum = 0;\n            for (int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result[i - 1] = sum;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nbool isPalindrome(int num) {\n    string str = to_string(num);\n    int left = 0, right = str.size() - 1;\n    while (left < right) {\n        if (str[left] != str[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\nvector<int> even_odd_palindrome(int n) {\n    int evenCount = 0, oddCount = 0;\n    for (int i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/108", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for (int num : n) {\n        int sum = 0;\n        int temp = abs(num);\n        while (temp > 0) {\n            sum += temp % 10;\n            temp = temp / 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if (arr.empty()) {\n        return true;\n    }\n    int min_index = min_element(arr.begin(), arr.end()) - arr.begin();\n    if (min_index == 0) {\n        return true;\n    }\n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        int expected = (arr[(i + n - min_index) % n] + arr[min_index]) % n;\n        if (arr[i] != expected) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    bool oddPresent = false;\n    \n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddPresent = true;\n            break;\n        }\n    }\n    \n    if (!oddPresent) {\n        return \"YES\";\n    }\n    \n    for (int i = 0; i < lst2.size(); i++) {\n        if (lst2[i] % 2 == 0) {\n            for (int j = 0; j < lst1.size(); j++) {\n                if (lst1[j] % 2 != 0) {\n                    lst1[j] = lst2[i];\n                    break;\n                }\n            }\n        }\n    }\n    \n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            return \"NO\";\n        }\n    }\n    \n    return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char, int> charCount;\n    for (char ch : test) {\n        if (ch != ' ') {\n            charCount[ch]++;\n        }\n    }\n\n    int maxCount = 0;\n    for (const auto& pair : charCount) {\n        maxCount = max(maxCount, pair.second);\n    }\n\n    map<char, int> result;\n    for (const auto& pair : charCount) {\n        if (pair.second == maxCount) {\n            result[pair.first] = pair.second;\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s, string c){\n    vector<string> result;\n    string resStr = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            resStr += ch;\n        }\n    }\n    bool isPalindrome = true;\n    int start = 0, end = resStr.size() - 1;\n    while (start < end) {\n        if (resStr[start] != resStr[end]) {\n            isPalindrome = false;\n            break;\n        }\n        start++;\n        end--;\n    }\n    result.push_back(resStr);\n    result.push_back(isPalindrome ? \"True\" : \"False\");\n    return result;\n}\n"}
{"task_id": "CPP/113", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst){\n    vector<string> result;\n    for (string s : lst) {\n        int count = 0;\n        for (char c : s) {\n            if (isdigit(c) && (c - '0') % 2 != 0) {\n                count++;\n            }\n        }\n        string output = \"the number of odd elements \" + to_string(count) + \"n the str\" + to_string(count) + \"ng \" + s + \" of the \" + to_string(count) + \"nput.\";\n        result.push_back(output);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = LLONG_MAX;\n    long long currentSum = 0;\n    \n    for (int i = 0; i < nums.size(); i++) {\n        currentSum += nums[i];\n        if (currentSum < minSum) {\n            minSum = currentSum;\n        }\n        if (currentSum < 0) {\n            currentSum = 0;\n        }\n    }\n    \n    return minSum;\n}\n"}
{"task_id": "CPP/115", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int total_lowering = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j] == 1) {\n                int water_to_extract = grid[i][j] - capacity;\n                total_lowering += water_to_extract;\n            }\n        }\n    }\n    return total_lowering;\n}\n"}
{"task_id": "CPP/116", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint countOnes(int num) {\n    int count = 0;\n    while (num > 0) {\n        count += num & 1;\n        num >>= 1;\n    }\n    return count;\n}\n\nbool customComparator(int a, int b) {\n    int onesA = countOnes(a);\n    int onesB = countOnes(b);\n    if (onesA == onesB) {\n        return a < b;\n    }\n    return onesA < onesB;\n}\n\nvector<int> sort_array(vector<int> arr) {\n    sort(arr.begin(), arr.end(), customComparator);\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nbool isConsonant(char c) {\n    return !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' || c == ' ');\n}\n\nint countConsonants(string word) {\n    int count = 0;\n    for (char c : word) {\n        if (isConsonant(c)) {\n            count++;\n        }\n    }\n    return count;\n}\n\nvector<string> select_words(string s, int n) {\n    vector<string> result;\n    string word = \"\";\n    for (char c : s) {\n        if (c == ' ') {\n            if (!word.empty() && countConsonants(word) == n) {\n                result.push_back(word);\n            }\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty() && countConsonants(word) == n) {\n        result.push_back(word);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring get_closest_vowel(string word){\n    string vowels = \"aeiouAEIOU\";\n    for (int i = word.size() - 2; i > 0; i--) {\n        if (vowels.find(word[i]) != string::npos && vowels.find(word[i + 1]) == string::npos) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    int open_count_1 = 0, close_count_1 = 0, open_count_2 = 0, close_count_2 = 0;\n    \n    for (char c : lst[0]) {\n        if (c == '(') open_count_1++;\n        else close_count_1++;\n    }\n    \n    for (char c : lst[1]) {\n        if (c == '(') open_count_2++;\n        else close_count_2++;\n    }\n    \n    if (close_count_1 > open_count_1 || close_count_2 > open_count_2) {\n        return \"No\";\n    }\n    \n    if (open_count_1 + open_count_2 == close_count_1 + close_count_2) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n"}
{"task_id": "CPP/120", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> maximum(vector<int> arr, int k) {\n    sort(arr.begin(), arr.end(), greater<int>()); // Sort in descending order\n    vector<int> result(arr.begin(), arr.begin() + k); // Take the first k elements\n    sort(result.begin(), result.end()); // Sort the k elements in ascending order\n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> get_odd_collatz(int n) {\n    vector<int> result;\n    \n    while (n != 1) {\n        result.push_back(n);\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    result.push_back(1); // Add 1 to the sequence\n    \n    vector<int> odd_numbers;\n    for (int num : result) {\n        if (num % 2 != 0) {\n            odd_numbers.push_back(num);\n        }\n    }\n    \n    sort(odd_numbers.begin(), odd_numbers.end()); // Sort the odd numbers\n    \n    return odd_numbers;\n}\n"}
{"task_id": "CPP/124", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool valid_date(string date){\n    if (date.empty()) {\n        return false;\n    }\n\n    int day, month, year;\n    sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year);\n\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)) {\n        return false;\n    } else if ((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)) {\n        return false;\n    } else if (month == 2) {\n        if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        } else {\n            if (day < 1 || day > 28) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> split_words(string txt){\n    vector<string> result;\n    bool hasWhitespace = (txt.find(' ') != string::npos);\n    if (hasWhitespace) {\n        size_t pos = 0;\n        string token;\n        while ((pos = txt.find(' ')) != string::npos) {\n            token = txt.substr(0, pos);\n            result.push_back(token);\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    } else {\n        bool hasComma = (txt.find(',') != string::npos);\n        if (hasComma) {\n            size_t pos = 0;\n            string token;\n            while ((pos = txt.find(',')) != string::npos) {\n                token = txt.substr(0, pos);\n                result.push_back(token);\n                txt.erase(0, pos + 1);\n            }\n            result.push_back(txt);\n        } else {\n            int oddCount = 0;\n            for (char c : txt) {\n                if (islower(c) && (c - 'a') % 2 == 1) {\n                    oddCount++;\n                }\n            }\n            result.push_back(to_string(oddCount));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/126", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\nusing namespace std;\n\nbool is_sorted(vector<int> lst){\n    if (lst.size() <= 1) {\n        return true;\n    }\n\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n\n    unordered_map<int, int> freq;\n    for (int num : lst) {\n        freq[num]++;\n        if (freq[num] > 2) {\n            return false;\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <cmath>\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    \n    if (start > end) {\n        return \"NO\";\n    }\n    \n    int length = end - start + 1;\n    \n    if (isPrime(length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/128", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if (arr.empty())\n        return -32768;\n    \n    int product_of_signs = 1;\n    int sum_of_magnitudes = 0;\n    \n    for (int element : arr) {\n        product_of_signs *= (element == 0) ? 0 : (element > 0) ? 1 : -1;\n        sum_of_magnitudes += abs(element);\n    }\n    \n    return product_of_signs * sum_of_magnitudes;\n}\n"}
{"task_id": "CPP/129", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvoid backtrack(vector<vector<int>>& grid, int k, vector<int>& path, vector<int>& minPath) {\n    if (path.size() == k) {\n        if (minPath.empty() || path < minPath) {\n            minPath = path;\n        }\n        return;\n    }\n\n    int n = grid.size();\n    int m = grid[0].size();\n\n    int x = path.empty() ? 0 : path.back() / m;\n    int y = path.empty() ? 0 : path.back() % m;\n\n    for (int dx = -1; dx <= 1; dx++) {\n        for (int dy = -1; dy <= 1; dy++) {\n            if (dx == 0 && dy == 0) continue;\n            int nx = x + dx;\n            int ny = y + dy;\n            if (nx >= 0 && nx < n && ny >= 0 && ny < m) {\n                int nextCell = nx * m + ny;\n                if (find(path.begin(), path.end(), nextCell) == path.end()) {\n                    path.push_back(nextCell);\n                    backtrack(grid, k, path, minPath);\n                    path.pop_back();\n                }\n            }\n        }\n    }\n}\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    vector<int> path, minPath;\n    backtrack(grid, k, path, minPath);\n    return minPath;\n}\n"}
{"task_id": "CPP/130", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> tri(int n){\n    vector<int> tribonacci = {};\n    if (n == 0) {\n        tribonacci.push_back(0);\n        return tribonacci;\n    } else if (n == 1) {\n        tribonacci = {0, 1};\n        return tribonacci;\n    } else if (n == 2) {\n        tribonacci = {0, 1, 1};\n        return tribonacci;\n    } else if (n == 3) {\n        tribonacci = {0, 1, 1, 2};\n        return tribonacci;\n    } else {\n        tribonacci = {0, 1, 1, 2};\n        for (int i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacci.push_back(1 + i / 2);\n            } else {\n                tribonacci.push_back(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n            }\n        }\n        return tribonacci;\n    }\n}\n"}
{"task_id": "CPP/131", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int product = 1;\n    string numStr = to_string(n);\n    for (char c : numStr) {\n        int digit = c - '0';\n        if (digit % 2 != 0) {\n            product *= digit;\n        }\n    }\n    return (product == 1) ? 0 : product;\n}\n"}
{"task_id": "CPP/132", "generation": "#include <stack>\n#include <string>\n\nbool is_nested(std::string str) {\n    std::stack<char> brackets;\n    \n    for (char c : str) {\n        if (c == '[') {\n            brackets.push(c);\n        } else if (c == ']') {\n            if (brackets.empty()) {\n                return false;\n            }\n            brackets.pop();\n        }\n    }\n    \n    return !brackets.empty();\n}\n"}
{"task_id": "CPP/133", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for (float num : lst) {\n        int rounded_num = ceil(num);\n        sum += rounded_num * rounded_num;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.empty()) {\n        return false;\n    }\n    char last_char = txt.back();\n    if (isalpha(last_char) && (txt.size() == 1 || txt[txt.size() - 2] == ' ')) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int resultIndex = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            resultIndex = i;\n        }\n    }\n    return resultIndex;\n}\n"}
{"task_id": "CPP/136", "generation": "#include<stdio.h>\n#include<vector>\n#include<climits>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    int largest_negative = INT_MIN;\n    int smallest_positive = INT_MAX;\n    \n    for (int element : lst) {\n        if (element < 0 && element > largest_negative) {\n            largest_negative = element;\n        }\n        if (element > 0 && element < smallest_positive) {\n            smallest_positive = element;\n        }\n    }\n    \n    return {largest_negative == INT_MIN ? 0 : largest_negative, smallest_positive == INT_MAX ? 0 : smallest_positive};\n}\n"}
{"task_id": "CPP/137", "generation": "#include <boost/any.hpp>\n#include <string>\n#include <algorithm>\n\nboost::any compare_one(boost::any a, boost::any b) {\n    if (a.type() == b.type()) {\n        if (a.type() == typeid(int)) {\n            return boost::any_cast<int>(a) > boost::any_cast<int>(b) ? a : b;\n        } else if (a.type() == typeid(float)) {\n            return boost::any_cast<float>(a) > boost::any_cast<float>(b) ? a : b;\n        } else if (a.type() == typeid(std::string)) {\n            return boost::any_cast<std::string>(a) > boost::any_cast<std::string>(b) ? a : b;\n        }\n    } else {\n        if (a.type() == typeid(int) && b.type() == typeid(std::string)) {\n            int int_a = boost::any_cast<int>(a);\n            int int_b = std::stoi(boost::any_cast<std::string>(b));\n            return int_a > int_b ? a : b;\n        } else if (a.type() == typeid(std::string) && b.type() == typeid(int)) {\n            int int_b = boost::any_cast<int>(b);\n            int int_a = std::stoi(boost::any_cast<std::string>(a));\n            return int_a > int_b ? a : b;\n        } else if (a.type() == typeid(float) && b.type() == typeid(std::string)) {\n            float float_a = boost::any_cast<float>(a);\n            float float_b = std::stof(boost::any_cast<std::string>(b));\n            return float_a > float_b ? a : b;\n        } else if (a.type() == typeid(std::string) && b.type() == typeid(float)) {\n            float float_b = boost::any_cast<float>(b);\n            float float_a = std::stof(boost::any_cast<std::string>(a));\n            return float_a > float_b ? a : b;\n        }\n    }\n    return \"None\";\n}\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if (n < 8)\n        return false;\n    if (n % 4 == 0)\n        return true;\n    return false;\n}\n"}
{"task_id": "CPP/139", "generation": "#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long result = 1;\n    for (int i = n; i > 0; i--) {\n        long long factorial = 1;\n        for (int j = i; j > 0; j--) {\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string result = \"\";\n    int consecutiveSpaces = 0;\n    for (char c : text) {\n        if (c == ' ') {\n            consecutiveSpaces++;\n            if (consecutiveSpaces > 2) {\n                result += \"-\";\n            } else {\n                result += \"_\";\n            }\n        } else {\n            result += c;\n            consecutiveSpaces = 0;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring file_name_check(string file_name){\n    int digit_count = 0;\n    int dot_position = -1;\n    int start_position = -1;\n\n    for (int i = 0; i < file_name.size(); i++) {\n        if (isdigit(file_name[i])) {\n            digit_count++;\n        }\n        else if (file_name[i] == '.') {\n            if (dot_position != -1) {\n                return \"No\"; // More than one dot\n            }\n            dot_position = i;\n        }\n        else if (isalpha(file_name[i])) {\n            start_position = i;\n            break;\n        }\n    }\n\n    if (digit_count > 3 || dot_position == -1 || start_position == -1) {\n        return \"No\";\n    }\n\n    string extension = file_name.substr(dot_position + 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\") {\n        return \"No\";\n    }\n\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/142", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "#include <stdio.h>\n#include <string>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nvector<string> splitSentence(string sentence) {\n    vector<string> words;\n    string word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            words.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    words.push_back(word);\n    return words;\n}\n\nstring words_in_sentence(string sentence) {\n    string result = \"\";\n    vector<string> words = splitSentence(sentence);\n    for (string word : words) {\n        if (isPrime(word.length())) {\n            result += word + \" \";\n        }\n    }\n    if (!result.empty()) {\n        result.pop_back(); // Remove the extra space at the end\n    }\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool simplify(string x, string n){\n    int numerator_x = stoi(x.substr(0, x.find('/')));\n    int denominator_x = stoi(x.substr(x.find('/') + 1));\n    int numerator_n = stoi(n.substr(0, n.find('/')));\n    int denominator_n = stoi(n.substr(n.find('/') + 1));\n\n    double decimal_x = (double)numerator_x / denominator_x;\n    double decimal_n = (double)numerator_n / denominator_n;\n\n    double result = decimal_x * decimal_n;\n\n    return result == (int)result;\n}\n"}
{"task_id": "CPP/145", "generation": "#include <stdio.h>\n#include <vector>\n#include <algorithm>\n#include <string>\nusing namespace std;\n\nint sumOfDigits(int num) {\n    int sum = 0;\n    string numStr = to_string(abs(num));\n    for (char digit : numStr) {\n        sum += (num < 0) ? -(digit - '0') : (digit - '0');\n    }\n    return sum;\n}\n\nbool customComparator(int a, int b) {\n    int sumA = sumOfDigits(a);\n    int sumB = sumOfDigits(b);\n    if (sumA == sumB) {\n        return find(nums.begin(), nums.end(), a) < find(nums.begin(), nums.end(), b);\n    }\n    return sumA < sumB;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    sort(nums.begin(), nums.end(), customComparator);\n    return nums;\n}\n"}
{"task_id": "CPP/146", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for (int num : nums) {\n        if (num > 10) {\n            string numStr = to_string(abs(num));\n            if ((numStr[0] - '0') % 2 != 0 && (numStr[numStr.size() - 1] - '0') % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint get_max_triples(int n) {\n    int count = 0;\n    vector<int> a(n);\n    \n    for (int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\n    std::map<std::string, int> planetOrder = {\n        {\"Mercury\", 1},\n        {\"Venus\", 2},\n        {\"Earth\", 3},\n        {\"Mars\", 4},\n        {\"Jupiter\", 5},\n        {\"Saturn\", 6},\n        {\"Uranus\", 7},\n        {\"Neptune\", 8}\n    };\n\n    if (planetOrder.find(planet1) == planetOrder.end() || planetOrder.find(planet2) == planetOrder.end()) {\n        return {};\n    }\n\n    int minOrder = std::min(planetOrder[planet1], planetOrder[planet2]);\n    int maxOrder = std::max(planetOrder[planet1], planetOrder[planet2]);\n\n    std::vector<std::string> result;\n    for (const auto& planet : planetOrder) {\n        if (planet.second > minOrder && planet.second < maxOrder) {\n            result.push_back(planet.first);\n        }\n    }\n\n    std::sort(result.begin(), result.end(), [&](const std::string& a, const std::string& b) {\n        return planetOrder[a] < planetOrder[b];\n    });\n\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> result;\n    for (const string& str : lst) {\n        if (str.length() % 2 == 0) {\n            result.push_back(str);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "#include <stdio.h>\n#include <math.h>\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nlong long double_the_difference(vector<float> lst) {\n    long long sum = 0;\n    for (float num : lst) {\n        if (num > 0 && fmod(num, 1) == 0 && ((int)num) % 2 != 0) {\n            sum += (long long)pow(num, 2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> result;\n    for (int i = 0; i < game.size(); i++) {\n        int diff = abs(game[i] - guess[i]);\n        result.push_back(diff);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name, vector<string> extensions){\n    string strongest_extension = \"\";\n    int max_strength = INT_MIN;\n    \n    for (string extension : extensions) {\n        int CAP = 0, SM = 0;\n        for (char c : extension) {\n            if (isupper(c)) CAP++;\n            if (islower(c)) SM++;\n        }\n        int strength = CAP - SM;\n        \n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a, string b){\n    string concat_b = b + b;\n    return concat_b.find(a) != string::npos;\n}\n"}
{"task_id": "CPP/155", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    int evenCount = 0, oddCount = 0;\n    string strNum = to_string(abs(num));\n    vector<int> result;\n\n    for (char c : strNum) {\n        int digit = c - '0';\n        if (digit % 2 == 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n\n    result.push_back(evenCount);\n    result.push_back(oddCount);\n\n    return result;\n}\n"}
{"task_id": "CPP/156", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring int_to_mini_roman(int number){\n    vector<pair<int, string>> romanMap = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n\n    string result = \"\";\n    for (const auto& pair : romanMap) {\n        while (number >= pair.first) {\n            number -= pair.first;\n            result += pair.second;\n        }\n    }\n\n    // Convert the result string to lowercase\n    transform(result.begin(), result.end(), result.begin(), ::tolower);\n\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a, float b, float c){\n    // Check if the given sides can form a triangle\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return false;\n    }\n    \n    // Calculate the square of each side\n    float a_square = a * a;\n    float b_square = b * b;\n    float c_square = c * c;\n    \n    // Sort the squares of the sides in ascending order\n    float sides[3] = {a_square, b_square, c_square};\n    sort(sides, sides + 3);\n    \n    // Check if it's a right-angled triangle using the Pythagorean theorem\n    if (sides[0] + sides[1] == sides[2]) {\n        return true;\n    }\n    \n    return false;\n}\n"}
{"task_id": "CPP/158", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <unordered_set>\n\nusing namespace std;\n\nstring find_max(vector<string> words) {\n    int maxUniqueChars = 0;\n    string maxWord = \"\";\n\n    for (const string& word : words) {\n        unordered_set<char> uniqueChars;\n        for (char c : word) {\n            uniqueChars.insert(c);\n        }\n\n        if (uniqueChars.size() > maxUniqueChars) {\n            maxUniqueChars = uniqueChars.size();\n            maxWord = word;\n        } else if (uniqueChars.size() == maxUniqueChars) {\n            maxWord = min(maxWord, word);\n        }\n    }\n\n    return maxWord;\n}\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number, int need, int remaining) {\n    vector<int> result;\n    int totalEaten = number + need;\n    int carrotsLeft = remaining - totalEaten;\n    if (carrotsLeft < 0) {\n        carrotsLeft = 0;\n    }\n    result.push_back(totalEaten);\n    result.push_back(carrotsLeft);\n    return result;\n}\n"}
{"task_id": "CPP/160", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nint do_algebra(vector<string> operato, vector<int> operand){\n    int result = operand[0];\n    for (int i = 0; i < operato.size(); i++) {\n        if (operato[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (operato[i] == \"//\") {\n            result /= operand[i + 1];\n        } else if (operato[i] == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring solve(string s){\n    string result = \"\";\n    bool hasLetters = false;\n\n    for (char c : s) {\n        if (isalpha(c)) {\n            c = islower(c) ? toupper(c) : tolower(c);\n            hasLetters = true;\n        }\n        result += c;\n    }\n\n    if (!hasLetters) {\n        reverse(result.begin(), result.end());\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "#include <stdio.h>\n#include <string>\n#include <openssl/md5.h>\nusing namespace std;\n\nstring string_to_md5(string text) {\n    if (text.empty()) {\n        return \"None\";\n    }\n\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((const unsigned char*)text.c_str(), text.length(), digest);\n\n    char mdString[33];\n    for(int i = 0; i < 16; i++) {\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    }\n\n    return string(mdString);\n}\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a, int b) {\n    vector<int> result;\n    for (int i = a; i <= b; i++) {\n        if (i % 2 == 0 && i < 10) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n\nbool has_close_elements(vector<float> numbers, float threshold){\n    bool result = false;\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                result = true;\n                break;\n            }\n        }\n        if (result) {\n            break;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/1", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string) {\n    vector<string> result;\n    int openCount = 0, closeCount = 0;\n    int start = 0;\n\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            openCount++;\n        } else if (paren_string[i] == ')') {\n            closeCount++;\n        }\n\n        if (openCount == closeCount) {\n            result.push_back(paren_string.substr(start, i - start + 1));\n            start = i + 1;\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    int intPart = (int)number;\n    float decimalPart = number - intPart;\n    return decimalPart;\n}\n"}
{"task_id": "CPP/3", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0;\n    float mean = 0;\n    \n    for (float num : numbers) {\n        sum = sum + num;\n    }\n    mean = sum / numbers.size();\n    \n    sum = 0;\n    for (float num : numbers) {\n        sum = sum + abs(num - mean);\n    }\n    \n    float mad = sum / numbers.size();\n    \n    return mad;\n}\n"}
{"task_id": "CPP/5", "generation": "#include <vector>\n\nvector<int> intersperse(vector<int> numbers, int delimeter) {\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        if (i != numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string) {\n    vector<int> result;\n    int maxLevel = 0;\n    int level = 0;\n\n    for (char c : paren_string) {\n        if (c == '(') {\n            level++;\n        } else if (c == ')') {\n            level--;\n        } else if (c == ' ') {\n            maxLevel = max(maxLevel, level);\n            result.push_back(maxLevel);\n            maxLevel = 0;\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/7", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filtered_strings;\n    \n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            filtered_strings.push_back(str);\n        }\n    }\n    \n    return filtered_strings;\n}\n"}
{"task_id": "CPP/8", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "#include<stdio.h>\n#include<vector>\n#include<climits>\nusing namespace std;\n\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> rollingMax;\n    int maxSoFar = INT_MIN;\n    \n    for (int i = 0; i < numbers.size(); i++) {\n        maxSoFar = max(maxSoFar, numbers[i]);\n        rollingMax.push_back(maxSoFar);\n    }\n    \n    return rollingMax;\n}\n"}
{"task_id": "CPP/10", "generation": "#include <stdio.h>\n#include <string>\nusing namespace std;\n\nbool is_palindrome(string str) {\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(string str) {\n    if (str.empty()) {\n        return \"\";\n    }\n\n    int n = str.size();\n    int end = n - 1;\n    while (end >= 0 && !is_palindrome(str.substr(end))) {\n        end--;\n    }\n\n    string prefix = str.substr(0, end);\n    string suffix = str.substr(end);\n    string reverse_prefix(prefix.rbegin(), prefix.rend());\n\n    return str + reverse_prefix;\n}\n"}
{"task_id": "CPP/11", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring string_xor(string a, string b){\n    if (a.length() != b.length()){\n        return \"Error: Input strings are not of the same length\";\n    }\n    \n    string result = \"\";\n    for (int i = 0; i < a.length(); i++){\n        if (a[i] == b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if (strings.empty())\n        return \"None\";\n    \n    string longestString = \"\";\n    for (const string& str : strings) {\n        if (str.length() > longestString.length()) {\n            longestString = str;\n        }\n    }\n    \n    return longestString;\n}\n"}
{"task_id": "CPP/13", "generation": "#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}\n"}
{"task_id": "CPP/14", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> prefixes;\n    for (int i = 0; i < str.length(); i++) {\n        prefixes.push_back(str.substr(0, i + 1));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "#include <string>\nstd::string string_sequence(int n) {\n    std::string sequence = \"\";\n    for (int i = 0; i <= n; i++) {\n        sequence += std::to_string(i) + \" \";\n    }\n    sequence.pop_back(); // Remove the extra space at the end\n    return sequence;\n}\n"}
{"task_id": "CPP/16", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\n#include<unordered_set>\nusing namespace std;\n\nint count_distinct_characters(string str){\n    unordered_set<char> distinctChars;\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    for (char c : str) {\n        distinctChars.insert(c);\n    }\n    \n    return distinctChars.size();\n}\n"}
{"task_id": "CPP/17", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<int> parse_music(string music_string) {\n    vector<int> beats;\n    for (char note : music_string) {\n        if (note == 'o') {\n            beats.push_back(4);\n        } else if (note == 'o|') {\n            beats.push_back(2);\n        } else if (note == '.|') {\n            beats.push_back(1);\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str, string substring) {\n    int count = 0;\n    for (int i = 0; i <= str.length() - substring.length(); i++) {\n        if (str.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\n#include<vector>\n#include<algorithm>\n#include<sstream>\n\nusing namespace std;\n\nstring sort_numbers(string numbers){\n    map<string, int> numMap = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3},\n        {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\", 7},\n        {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    stringstream ss(numbers);\n    string word;\n    vector<int> numValues;\n\n    while (ss >> word) {\n        numValues.push_back(numMap[word]);\n    }\n\n    sort(numValues.begin(), numValues.end());\n\n    string sortedNumbers;\n    for (int num : numValues) {\n        for (auto it = numMap.begin(); it != numMap.end(); ++it) {\n            if (it->second == num) {\n                sortedNumbers += it->first + \" \";\n                break;\n            }\n        }\n    }\n\n    sortedNumbers.pop_back(); // Remove the extra space at the end\n    return sortedNumbers;\n}\n"}
{"task_id": "CPP/20", "generation": "## Chain of thought:\n1. Initialize an empty vector `out` to store the two closest elements.\n2. Iterate over the numbers vector using two nested loops to compare each pair of numbers.\n3. Check if the `out` vector is empty or if the absolute difference between the current pair of numbers is less than the absolute difference between the numbers in the `out` vector.\n4. If the condition is met, update the `out` vector with the current pair of numbers.\n5. After finding the closest pair, check if the first element in the `out` vector is greater than the second element. If so, swap the elements.\n6. Return the `out` vector containing the two closest elements in order."}
{"task_id": "CPP/21", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){\n    float min_val = numbers[0];\n    float max_val = numbers[0];\n    \n    for (float num : numbers) {\n        if (num < min_val) {\n            min_val = num;\n        }\n        if (num > max_val) {\n            max_val = num;\n        }\n    }\n    \n    float range = max_val - min_val;\n    vector<float> rescaled;\n    \n    for (float num : numbers) {\n        float transformed = (num - min_val) / range;\n        rescaled.push_back(transformed);\n    }\n    \n    return rescaled;\n}\n"}
{"task_id": "CPP/22", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\n#include<algorithm>\n#include<vector>\n#include<iostream>\n#include<typeinfo>\n\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n\nvector<int> filter_integers(list_any values) {\n    vector<int> filteredIntegers;\n    for (const auto& val : values) {\n        if (val.type() == typeid(int)) {\n            filteredIntegers.push_back(boost::any_cast<int>(val));\n        }\n    }\n    return filteredIntegers;\n}\n"}
{"task_id": "CPP/23", "generation": "#include <string>\nint strlen(std::string str) {\n    int length = 0;\n    for (int i = 0; str[i] != '\\0'; i++) {\n        length++;\n    }\n    return length;\n}\n"}
{"task_id": "CPP/24", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    for (int i = n-1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return -1; // Return -1 if no divisor is found\n}\n"}
{"task_id": "CPP/25", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nvector<int> factorize(int n){\n    vector<int> factors;\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n /= 2;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\n#include<set>\nusing namespace std;\n\nvector<int> remove_duplicates(vector<int> numbers){\n    set<int> uniqueElements;\n    vector<int> output;\n    \n    for (int num : numbers) {\n        if (uniqueElements.find(num) == uniqueElements.end()) {\n            uniqueElements.insert(num);\n            output.push_back(num);\n        }\n    }\n    \n    return output;\n}\n"}
{"task_id": "CPP/27", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring flip_case(string str){\n    string result = \"\";\n    for (char ch : str) {\n        if (islower(ch)) {\n            result += toupper(ch);\n        } else if (isupper(ch)) {\n            result += tolower(ch);\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/28", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for (const string& s : strings) {\n        result += s;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> filteredStrings;\n    for (const string& str : strings) {\n        if (str.find(prefix) == 0) {\n            filteredStrings.push_back(str);\n        }\n    }\n    return filteredStrings;\n}\n"}
{"task_id": "CPP/30", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> positiveNumbers;\n    for (float num : l) {\n        if (num > 0) {\n            positiveNumbers.push_back(num);\n        }\n    }\n    return positiveNumbers;\n}\n"}
{"task_id": "CPP/31", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n < 2) {\n        return false;\n    }\n    for (long long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "double find_zero(vector<double> xs){\n    if (xs.size() % 2 != 0 || xs.back() == 0) {\n        return 0;\n    }\n    \n    // Find the derivative of the polynomial\n    vector<double> derivative;\n    for (int i = 1; i < xs.size(); i++) {\n        derivative.push_back(xs[i] * i);\n    }\n    \n    // Use Newton's method to find the root\n    double x = 1.0; // Initial guess\n    while (true) {\n        double fx = poly(xs, x);\n        double f_prime_x = poly(derivative, x);\n        double new_x = x - fx / f_prime_x;\n        if (abs(new_x - x) < 0.0001) {\n            break;\n        }\n        x = new_x;\n    }\n    \n    return x;\n}\n"}
{"task_id": "CPP/33", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> l_prime;\n    vector<int> temp;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            temp.push_back(l[i]);\n        }\n    }\n    sort(temp.begin(), temp.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_prime.push_back(temp[j]);\n            j++;\n        } else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    return l_prime;\n}\n"}
{"task_id": "CPP/34", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\n#include<set>\nusing namespace std;\n\nvector<int> unique(vector<int> l){\n    set<int> uniqueSet;\n    for (int num : l) {\n        uniqueSet.insert(num);\n    }\n    vector<int> result(uniqueSet.begin(), uniqueSet.end());\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/35", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\nfloat max_element(vector<float> l){\n    float max_element = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max_element) {\n            max_element = l[i];\n        }\n    }\n    return max_element;\n}\n"}
{"task_id": "CPP/36", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nint fizz_buzz(int n){\n    int count = 0;\n    for (int i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            string str = to_string(i);\n            if (str.find('7') != string::npos) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> result;\n    vector<float> temp;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            temp.push_back(l[i]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    sort(temp.begin(), temp.end());\n    int tempIndex = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            result.push_back(temp[tempIndex]);\n            tempIndex++;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/38", "generation": "#include <string>\n\nstd::string decode_cyclic(std::string s) {\n    std::string output;\n    int l = s.length();\n    int num = (l + 2) / 3;\n    for (int i = 0; i < num; i++) {\n        std::string x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x.substr(2) + x.substr(0, 2);\n        }\n        output += x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/39", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n\nbool prime_check(int num) {\n    if (num < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint fibonacci(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint prime_fib(int n) {\n    int count = 0;\n    int i = 2;\n    while (count < n) {\n        int fib_num = fibonacci(i);\n        if (prime_check(fib_num)) {\n            count++;\n        }\n        i++;\n    }\n    return fib_num;\n}\n"}
{"task_id": "CPP/40", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nbool triples_sum_to_zero(vector<int> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    for (int i = 0; i < n - 2; i++) {\n        int left = i + 1;\n        int right = n - 1;\n        while (left < right) {\n            int sum = l[i] + l[left] + l[right];\n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    int collisions = 0;\n    for (int i = 1; i <= n; i++) {\n        collisions += min(i, n - i);\n    }\n    return collisions;\n}\n"}
{"task_id": "CPP/42", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(l[i] + 1);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/43", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x, int base){\n    string result = \"\";\n    while (x > 0){\n        int remainder = x % base;\n        result += to_string(remainder);\n        x = x / base;\n    }\n    reverse(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float h){\n    float area = 0.5 * a * h;\n    return area;\n}\n"}
{"task_id": "CPP/46", "generation": "#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    \n    int fib4Arr[4] = {0, 0, 2, 0};\n    for (int i = 4; i <= n; i++) {\n        int next = fib4Arr[0] + fib4Arr[1] + fib4Arr[2] + fib4Arr[3];\n        fib4Arr[i % 4] = next;\n    }\n    return fib4Arr[(n % 4)];\n}\n"}
{"task_id": "CPP/47", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 1) {\n        return l[n / 2];\n    } else {\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int start = 0;\n    int end = text.length() - 1;\n    while (start < end) {\n        if (text[start] != text[end]) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "#include<stdio.h>\nusing namespace std;\nint modp(int n, int p){\n    if (n == 0) {\n        return 1;\n    }\n    int result = 1;\n    for (int i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/50", "generation": "#include <string>\nusing namespace std;\n\nstring decode_shift(string s) {\n    string out;\n    for (int i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out += (char)w;\n    }\n    return out;\n}\n"}
{"task_id": "CPP/51", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring remove_vowels(string text){\n    string result = \"\";\n    string vowels = \"aeiouAEIOU\";\n    for (char c : text) {\n        if (vowels.find(c) == string::npos) {\n            result += c;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/52", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nbool below_threshold(vector<int> l, int t) {\n    bool belowThreshold = true;\n    for (int num : l) {\n        if (num >= t) {\n            belowThreshold = false;\n            break;\n        }\n    }\n    return belowThreshold;\n}\n"}
{"task_id": "CPP/53", "generation": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x, int y){\n    return x + y;\n}\n"}
{"task_id": "CPP/54", "generation": "#include <stdio.h>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nbool same_chars(string s0, string s1) {\n    unordered_map<char, int> freq0, freq1;\n\n    for (char c : s0) {\n        freq0[c]++;\n    }\n\n    for (char c : s1) {\n        freq1[c]++;\n    }\n\n    return freq0 == freq1;\n}\n"}
{"task_id": "CPP/55", "generation": "#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return fib(n-1) + fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int balance = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            balance++;\n        } else if (bracket == '>') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n    }\n    if (!increasing || !decreasing) {\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/58", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\n#include<set>\nusing namespace std;\n\nvector<int> common(vector<int> l1, vector<int> l2) {\n    set<int> uniqueCommon;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n\n    for (int num : l1) {\n        if (binary_search(l2.begin(), l2.end(), num)) {\n            uniqueCommon.insert(num);\n        }\n    }\n\n    return vector<int>(uniqueCommon.begin(), uniqueCommon.end());\n}\n"}
{"task_id": "CPP/59", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    while (n % 2 == 0) {\n        n = n / 2;\n    }\n    for (int i = 3; i <= sqrt(n); i = i + 2) {\n        while (n % i == 0) {\n            n = n / i;\n        }\n    }\n    return n;\n}\n"}
{"task_id": "CPP/60", "generation": "#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int counter = 0;\n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            counter++;\n        } else if (bracket == ')') {\n            counter--;\n        }\n        if (counter < 0) {\n            return false;\n        }\n    }\n    return counter == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result = {};\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    \n    int memo[n+1];\n    memo[0] = 0;\n    memo[1] = 0;\n    memo[2] = 1;\n    \n    for (int i = 3; i <= n; i++) {\n        memo[i] = memo[i-1] + memo[i-2] + memo[i-3];\n    }\n    \n    return memo[n];\n}\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint vowels_count(string s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || (s[i] == 'y' && i == s.length() - 1)) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x, int shift){\n    string numStr = to_string(x);\n    int numDigits = numStr.size();\n    \n    if (shift > numDigits) {\n        reverse(numStr.begin(), numStr.end());\n        return numStr;\n    }\n    \n    string result = \"\";\n    for (int i = 0; i < numDigits; i++) {\n        int newPos = (i + shift) % numDigits;\n        result += numStr[newPos];\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/66", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nint digitSum(string s){\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += int(c);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    int apples, oranges;\n    sscanf(s.c_str(), \"%d apples and %d oranges\", &apples, &oranges);\n    return n - apples - oranges;\n}\n"}
{"task_id": "CPP/68", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    int smallestValue = -1;\n    int smallestIndex = -1;\n    \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && (smallestValue == -1 || arr[i] < smallestValue)) {\n            smallestValue = arr[i];\n            smallestIndex = i;\n        }\n    }\n    \n    if (smallestValue != -1) {\n        return {smallestValue, smallestIndex};\n    } else {\n        return {};\n    }\n}\n"}
{"task_id": "CPP/69", "generation": "#include<stdio.h>\n#include<vector>\n#include<map>\nusing namespace std;\n\nint search(vector<int> lst){\n    map<int, int> frequencyMap;\n    for (int num : lst) {\n        frequencyMap[num]++;\n    }\n    \n    int maxInteger = -1;\n    for (auto& pair : frequencyMap) {\n        int integer = pair.first;\n        int frequency = pair.second;\n        if (integer >= frequency && integer > maxInteger) {\n            maxInteger = integer;\n        }\n    }\n    \n    return maxInteger;\n}\n"}
{"task_id": "CPP/70", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> strange_sort_list(vector<int> lst){\n    sort(lst.begin(), lst.end());\n    vector<int> output;\n    while (!lst.empty()) {\n        if (!lst.empty()) {\n            output.push_back(lst.front());\n            lst.erase(lst.begin());\n        }\n        if (!lst.empty()) {\n            output.push_back(lst.back());\n            lst.pop_back();\n        }\n    }\n    return output;\n}\n"}
{"task_id": "CPP/71", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float b, float c) {\n    if ((a + b > c) && (a + c > b) && (b + c > a)) {\n        float s = (a + b + c) / 2;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100;\n    } else {\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q, int w){\n    bool isBalanced = true;\n    for (int i = 0; i < q.size(); i++) {\n        if (q[i] != q[q.size() - 1 - i]) {\n            isBalanced = false;\n            break;\n        }\n    }\n    int sum = 0;\n    for (int i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    return isBalanced && sum <= w;\n}\n"}
{"task_id": "CPP/73", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint smallest_change(vector<int> arr){\n    int start = 0;\n    int end = arr.size() - 1;\n    int changes = 0;\n\n    while (start < end) {\n        if (arr[start] != arr[end]) {\n            changes++;\n        }\n        start++;\n        end--;\n    }\n\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int totalChars1 = 0, totalChars2 = 0;\n\n    for (string str : lst1) {\n        totalChars1 += str.length();\n    }\n\n    for (string str : lst2) {\n        totalChars2 += str.length();\n    }\n\n    if (totalChars1 < totalChars2) {\n        return lst1;\n    } else if (totalChars2 < totalChars1) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "#include<stdio.h>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nbool is_multiply_prime(int a) {\n    if (a < 6) return false;\n    if (a % 2 == 0 || a % 3 == 0) return false;\n    for (int i = 2; i < 100; i++) {\n        if (is_prime(i)) {\n            for (int j = i + 1; j < 100; j++) {\n                if (is_prime(j)) {\n                    for (int k = j + 1; k < 100; k++) {\n                        if (is_prime(k) && i * j * k == a) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x, int n){\n    if (x <= 0 || n <= 1) {\n        return false;\n    }\n    if (x == 1) {\n        return true;\n    }\n    \n    int power = 1;\n    while (power <= x) {\n        if (pow(n, power) == x) {\n            return true;\n        }\n        power++;\n    }\n    \n    return false;\n}\n"}
{"task_id": "CPP/77", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    if (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = abs(a);\n    }\n    int cube_root = round(cbrt(a));\n    return (cube_root * cube_root * cube_root == a);\n}\n"}
{"task_id": "CPP/78", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<unordered_set>\nusing namespace std;\n\nint hex_key(string num){\n    int count = 0;\n    unordered_set<char> prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'};\n    \n    for (char c : num) {\n        if (prime_hex_digits.find(c) != prime_hex_digits.end()) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring decimal_to_binary(int decimal) {\n    string binaryString = \"db\";\n    while (decimal > 0) {\n        char bit = (decimal % 2) + '0';\n        binaryString = bit + binaryString;\n        decimal /= 2;\n    }\n    binaryString += \"db\";\n    return binaryString;\n}\n"}
{"task_id": "CPP/80", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool is_happy(string s){\n    if (s.length() < 3) {\n        return false;\n    }\n    \n    for (int i = 0; i <= s.length() - 3; i++) {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letter_grades;\n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool prime_length(string str) {\n    int length = str.length();\n    return isPrime(length);\n}\n"}
{"task_id": "CPP/83", "generation": "#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    int count_start_with_one = 9 * pow(10, n-1);\n    int count_end_with_one = pow(10, n-1);\n    int total_count = count_start_with_one + count_end_with_one;\n    return total_count;\n}\n"}
{"task_id": "CPP/84", "generation": "#include <string>\n\nstd::string solve(int N) {\n    int sum = 0;\n    \n    // Calculate the sum of digits\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    \n    // Convert sum to binary\n    std::string binarySum = \"\";\n    while (sum > 0) {\n        binarySum = std::to_string(sum % 2) + binarySum;\n        sum /= 2;\n    }\n    \n    return binarySum;\n}\n"}
{"task_id": "CPP/85", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "#include <stdio.h>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    stringstream ss(s);\n    string word, result, space = \"\";\n    \n    while (ss >> word) {\n        sort(word.begin(), word.end());\n        result += space + word;\n        space = \" \";\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        vector<int> row_result;\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                row_result.push_back(i);\n                row_result.push_back(j);\n            }\n        }\n        if (!row_result.empty()) {\n            result.push_back(row_result);\n        }\n    }\n    sort(result.begin(), result.end());\n    for (auto& row : result) {\n        sort(row.begin(), row.end(), greater<int>());\n    }\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> sort_array(vector<int> array){\n    if(array.size() == 0) {\n        return array;\n    }\n    \n    int sum = array[0] + array[array.size() - 1];\n    \n    vector<int> sorted_array = array;\n    \n    if(sum % 2 == 1) {\n        sort(sorted_array.begin(), sorted_array.end());\n    } else {\n        sort(sorted_array.begin(), sorted_array.end(), greater<int>());\n    }\n    \n    return sorted_array;\n}\n"}
{"task_id": "CPP/89", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string result = \"\";\n    for (char c : s) {\n        if (isalpha(c)) {\n            char new_char = c + 2 * 2;\n            if (islower(c)) {\n                if (new_char > 'z') {\n                    new_char = 'a' + (new_char - 'z' - 1);\n                }\n            } else {\n                if (new_char > 'Z') {\n                    new_char = 'A' + (new_char - 'Z' - 1);\n                }\n            }\n            result += new_char;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/90", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint next_smallest(vector<int> lst){\n    if (lst.size() < 2) {\n        return -1;\n    }\n    sort(lst.begin(), lst.end());\n    int count = 0;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n            count++;\n        }\n        if (count == 1) {\n            return lst[i];\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/91", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int boredomCount = 0;\n    string sentence = \"\";\n    for (char c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n            if (sentence.substr(0, 2) == \"I \") {\n                boredomCount++;\n            }\n            sentence = \"\";\n        } else {\n            sentence += c;\n        }\n    }\n    return boredomCount;\n}\n"}
{"task_id": "CPP/92", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a, float b, float c){\n    if (a != int(a) || b != int(b) || c != int(c)) {\n        return false;\n    }\n    if (a == b + c || b == a + c || c == a + b) {\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring encode(string message){\n    string encodedMessage = \"\";\n    for (char c : message) {\n        if (isalpha(c)) {\n            if (tolower(c) == 'a' || tolower(c) == 'e' || tolower(c) == 'i' || tolower(c) == 'o' || tolower(c) == 'u') {\n                encodedMessage += char(isupper(c) ? toupper((c - 'A' + 2) % 26 + 'A') : tolower((c - 'a' + 2) % 26 + 'a'));\n            } else {\n                encodedMessage += isupper(c) ? tolower(c) : toupper(c);\n            }\n        } else {\n            encodedMessage += c;\n        }\n    }\n    return encodedMessage;\n}\n"}
{"task_id": "CPP/94", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nbool isPrime(int num) {\n    if (num < 2) return false;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num != 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nint findLargestPrimeSum(vector<int> lst) {\n    int largestPrime = 0;\n    for (int num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    if (largestPrime == 0) return 0;\n    return sumOfDigits(largestPrime);\n}\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    if (dict.empty()) {\n        return false;\n    }\n    for (const auto& entry : dict) {\n        string key = entry.first;\n        for (char c : key) {\n            if (!islower(c) && !isupper(c)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> result = {};\n    if (n <= 1) {\n        return result;\n    }\n    \n    for (int i = 2; i < n; i++) {\n        bool is_prime = true;\n        for (int j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        \n        if (is_prime) {\n            result.push_back(i);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a, int b){\n    int unitA = abs(a) % 10;\n    int unitB = abs(b) % 10;\n    return unitA * unitB;\n}\n"}
{"task_id": "CPP/98", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint count_upper(string s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    double num = stod(value);\n    int floor_val = floor(num);\n    int ceil_val = ceil(num);\n    \n    double diff_floor = abs(num - floor_val);\n    double diff_ceil = abs(num - ceil_val);\n    \n    if (diff_floor < diff_ceil) {\n        return floor_val;\n    } else {\n        return ceil_val;\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> make_a_pile(int n){\n    vector<int> stones;\n    stones.push_back(n);\n    for (int i = 1; i < n; i++) {\n        if (i % 2 == 1) {\n            stones.push_back(n + i);\n        } else {\n            stones.push_back(n + i + 1);\n        }\n    }\n    return stones;\n}\n"}
{"task_id": "CPP/101", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> words_string(string s){\n    vector<string> words;\n    string current_word = \"\";\n\n    for (char c : s) {\n        if (c != ' ' && c != ',') {\n            current_word += c;\n        } else {\n            if (!current_word.empty()) {\n                words.push_back(current_word);\n                current_word = \"\";\n            }\n        }\n    }\n\n    if (!current_word.empty()) {\n        words.push_back(current_word);\n    }\n\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "#include<stdio.h>\nusing namespace std;\nint choose_num(int x, int y){\n    if (x % 2 != 0) {\n        x++;\n    }\n    if (y % 2 != 0) {\n        y--;\n    }\n    if (x > y) {\n        return -1;\n    }\n    return y;\n}\n"}
{"task_id": "CPP/103", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n\nstring rounded_avg(int n, int m) {\n    if (n > m) {\n        return \"-1\";\n    }\n\n    int sum = 0;\n    int count = m - n + 1;\n\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    int average = round((double)sum / count);\n    string binary = bitset<32>(average).to_string();\n\n    size_t pos = binary.find('1');\n    if (pos != string::npos) {\n        return binary.substr(pos);\n    }\n\n    return \"0\";\n}\n"}
{"task_id": "CPP/104", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for (int num : x) {\n        bool isEvenDigitPresent = false;\n        string strNum = to_string(num);\n        for (char c : strNum) {\n            if ((c - '0') % 2 == 0) {\n                isEvenDigitPresent = true;\n                break;\n            }\n        }\n        if (!isEvenDigitPresent) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n\nvector<string> by_length(vector<int> arr){\n    map<int, string> intToString = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n\n    vector<string> result;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            result.push_back(intToString[num]);\n        }\n    }\n\n    sort(result.begin(), result.end());\n    reverse(result.begin(), result.end());\n\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "#include <vector>\n\nvector<int> f(int n) {\n    vector<int> result;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            int factorial = 1;\n            for (int j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push_back(factorial);\n        } else {\n            int sum = 0;\n            for (int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nbool isPalindrome(int num) {\n    string str = to_string(num);\n    int left = 0, right = str.size() - 1;\n    while (left < right) {\n        if (str[left] != str[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\nvector<int> even_odd_palindrome(int n) {\n    int evenCount = 0, oddCount = 0;\n    for (int i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/108", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for (int number : n) {\n        int sum = 0;\n        int num = abs(number);\n        while (num != 0) {\n            sum = sum + (num % 10);\n            num = num / 10;\n        }\n        if (number < 0) {\n            sum = -sum;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if (arr.empty()) {\n        return true;\n    }\n    int min_element = *min_element(arr.begin(), arr.end());\n    int min_index = find(arr.begin(), arr.end(), min_element) - arr.begin();\n    for (int i = min_index; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    bool allEven = true;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            allEven = false;\n            break;\n        }\n    }\n\n    if (allEven) {\n        return \"YES\";\n    }\n\n    for (int num1 : lst1) {\n        if (num1 % 2 != 0) {\n            for (int num2 : lst2) {\n                if (num2 % 2 == 0) {\n                    return \"YES\";\n                }\n            }\n        }\n    }\n\n    return \"NO\";\n}\n"}
{"task_id": "CPP/111", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\n\nmap<char, int> histogram(string test){\n    map<char, int> charCount;\n    for (char c : test) {\n        if (c != ' ') {\n            charCount[c]++;\n        }\n    }\n\n    int maxCount = 0;\n    for (const auto& pair : charCount) {\n        maxCount = max(maxCount, pair.second);\n    }\n\n    map<char, int> result;\n    for (const auto& pair : charCount) {\n        if (pair.second == maxCount) {\n            result[pair.first] = pair.second;\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> reverse_delete(string s, string c) {\n    string result = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n\n    string original = result;\n    reverse(result.begin(), result.end());\n\n    return {original, original == result ? \"True\" : \"False\"};\n}\n"}
{"task_id": "CPP/113", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst){\n    vector<string> result;\n    for (string s : lst) {\n        int count = 0;\n        for (char c : s) {\n            if (isdigit(c) && (c - '0') % 2 != 0) {\n                count++;\n            }\n        }\n        string output = \"the number of odd elements \" + to_string(count) + \"n the str\" + to_string(count) + \"ng \" + s + \" of the \" + to_string(count) + \"nput.\";\n        result.push_back(output);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = LLONG_MAX;\n    long long currentSum = 0;\n    \n    for (int i = 0; i < nums.size(); i++) {\n        currentSum += nums[i];\n        minSum = min(minSum, currentSum);\n        if (currentSum < 0) {\n            currentSum = 0;\n        }\n    }\n    \n    return minSum;\n}\n"}
{"task_id": "CPP/115", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int total_count = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j] == 1) {\n                int count = ceil((double)grid[i][j] / capacity);\n                total_count += count;\n            }\n        }\n    }\n    return total_count;\n}\n"}
{"task_id": "CPP/116", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint countOnes(int num) {\n    int count = 0;\n    while (num > 0) {\n        count += num & 1;\n        num >>= 1;\n    }\n    return count;\n}\n\nbool customComparator(int a, int b) {\n    int onesA = countOnes(a);\n    int onesB = countOnes(b);\n    \n    if (onesA == onesB) {\n        return a < b;\n    }\n    \n    return onesA < onesB;\n}\n\nvector<int> sort_array(vector<int> arr) {\n    sort(arr.begin(), arr.end(), customComparator);\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint countConsonants(string word) {\n    int count = 0;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    for (char c : word) {\n        if (consonants.find(c) != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\n\nvector<string> select_words(string s, int n) {\n    vector<string> result;\n    if (s.empty()) {\n        return result;\n    }\n    \n    string word = \"\";\n    for (char c : s) {\n        if (c == ' ') {\n            if (countConsonants(word) == n) {\n                result.push_back(word);\n            }\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    \n    if (!word.empty() && countConsonants(word) == n) {\n        result.push_back(word);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring get_closest_vowel(string word) {\n    string result = \"\";\n    for (int i = word.size() - 2; i > 0; i--) {\n        if (word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' &&\n            word[i - 1] == 'a' || word[i - 1] == 'e' || word[i - 1] == 'i' || word[i - 1] == 'o' || word[i - 1] == 'u' &&\n            word[i + 1] == 'a' || word[i + 1] == 'e' || word[i + 1] == 'i' || word[i + 1] == 'o' || word[i + 1] == 'u') {\n            result = word[i];\n            break;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nbool isBalanced(string s) {\n    int count = 0;\n    for (char c : s) {\n        if (c == '(') {\n            count++;\n        } else if (c == ')') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\nstring match_parens(vector<string> lst) {\n    string concatenated = lst[0] + lst[1];\n    if (isBalanced(concatenated)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n"}
{"task_id": "CPP/120", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> maximum(vector<int> arr, int k) {\n    sort(arr.begin(), arr.end(), greater<int>());\n    vector<int> result(arr.begin(), arr.begin() + k);\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint add_elements(vector<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (abs(arr[i]) < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> get_odd_collatz(int n){\n    vector<int> result = {n};\n    while (n != 1) {\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        result.push_back(n);\n    }\n    \n    vector<int> oddNumbers;\n    for (int num : result) {\n        if (num % 2 != 0) {\n            oddNumbers.push_back(num);\n        }\n    }\n    \n    sort(oddNumbers.begin(), oddNumbers.end());\n    return oddNumbers;\n}\n"}
{"task_id": "CPP/124", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    if (date.empty())\n        return false;\n    \n    int day, month, year;\n    if (sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year) != 3)\n        return false;\n    \n    if (month < 1 || month > 12)\n        return false;\n    \n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31)\n            return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30)\n            return false;\n    } else if (month == 2) {\n        if (day < 1 || day > 29)\n            return false;\n    } else {\n        return false;\n    }\n    \n    if (date.size() != 10 || date[2] != '-' || date[5] != '-')\n        return false;\n    \n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> split_words(string txt){\n    vector<string> result;\n    int count = 0;\n\n    // Check for whitespace\n    if (txt.find(\" \") != string::npos) {\n        size_t pos = 0;\n        string token;\n        while ((pos = txt.find(\" \")) != string::npos) {\n            token = txt.substr(0, pos);\n            result.push_back(token);\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    }\n    // Check for commas\n    else if (txt.find(\",\") != string::npos) {\n        size_t pos = 0;\n        string token;\n        while ((pos = txt.find(\",\")) != string::npos) {\n            token = txt.substr(0, pos);\n            result.push_back(token);\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    }\n    // Count lowercase letters with odd order\n    else {\n        for (char c : txt) {\n            if (islower(c)) {\n                int order = c - 'a';\n                if (order % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        if (count > 0) {\n            result.push_back(to_string(count));\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/126", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\n#include<map>\nusing namespace std;\n\nbool is_sorted(vector<int> lst){\n    map<int, int> countMap;\n    if (lst.size() <= 1) {\n        return true;\n    }\n    \n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n        countMap[lst[i]]++;\n        if (countMap[lst[i]] > 2) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <cmath>\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n\n    if (start > end) return \"NO\";\n\n    int length = end - start + 1;\n\n    if (isPrime(length)) return \"YES\";\n    else return \"NO\";\n}\n"}
{"task_id": "CPP/128", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if (arr.empty())\n        return -32768;\n    \n    int sum_magnitudes = 0;\n    int product_signs = 1;\n    \n    for (int element : arr) {\n        sum_magnitudes += abs(element);\n        if (element > 0) {\n            product_signs *= 1;\n        } else if (element < 0) {\n            product_signs *= -1;\n        } else {\n            product_signs *= 0;\n        }\n    }\n    \n    return sum_magnitudes * product_signs;\n}\n"}
{"task_id": "CPP/129", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvoid backtrack(vector<vector<int>>& grid, vector<int>& path, vector<vector<bool>>& visited, vector<int>& minPath, int steps) {\n    if (steps == 0) {\n        if (minPath.empty() || path < minPath) {\n            minPath = path;\n        }\n        return;\n    }\n\n    int n = grid.size();\n    int x = path.back() / n;\n    int y = path.back() % n;\n\n    visited[x][y] = true;\n\n    vector<pair<int, int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    for (const auto& [dx, dy] : directions) {\n        int nx = x + dx;\n        int ny = y + dy;\n        if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny]) {\n            path.push_back(grid[nx][ny]);\n            backtrack(grid, path, visited, minPath, steps - 1);\n            path.pop_back();\n        }\n    }\n\n    visited[x][y] = false;\n}\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int n = grid.size();\n    vector<int> path;\n    vector<vector<bool>> visited(n, vector<bool>(n, false));\n    vector<int> minPath;\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            path.push_back(grid[i][j]);\n            backtrack(grid, path, visited, minPath, k - 1);\n            path.pop_back();\n        }\n    }\n\n    return minPath;\n}\n"}
{"task_id": "CPP/130", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> tribonacci = {};\n    if (n == 0) {\n        tribonacci.push_back(0);\n        return tribonacci;\n    }\n    if (n == 1) {\n        tribonacci.push_back(1);\n        return tribonacci;\n    }\n    if (n == 2) {\n        tribonacci.push_back(1);\n        tribonacci.push_back(1);\n        return tribonacci;\n    }\n    tribonacci.push_back(0);\n    tribonacci.push_back(1);\n    tribonacci.push_back(1);\n    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci.push_back(1 + i / 2);\n        } else {\n            tribonacci.push_back(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1]);\n        }\n    }\n    return tribonacci;\n}\n"}
{"task_id": "CPP/131", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    string numStr = to_string(n);\n    int product = 1;\n    for (char c : numStr) {\n        int digit = c - '0';\n        if (digit % 2 != 0) {\n            product *= digit;\n        }\n    }\n    if (product == 1) {\n        return 0;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "#include<stdio.h>\n#include<string>\n#include<stack>\nusing namespace std;\n\nbool is_nested(string str){\n    stack<char> brackets;\n    for (char c : str) {\n        if (c == '[') {\n            brackets.push(c);\n        } else if (c == ']') {\n            if (brackets.empty()) {\n                return false;\n            }\n            brackets.pop();\n        }\n    }\n    return !brackets.empty();\n}\n"}
{"task_id": "CPP/133", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for (float num : lst) {\n        int rounded = ceil(num);\n        sum += rounded * rounded;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.empty()) {\n        return false;\n    }\n    char last_char = txt.back();\n    if (isalpha(last_char) && (txt.size() == 1 || txt[txt.size() - 2] == ' ')) {\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int index = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            index = i;\n        }\n    }\n    return index;\n}\n"}
{"task_id": "CPP/136", "generation": "#include <vector>\n#include <algorithm>\n\nstd::vector<int> largest_smallest_integers(std::vector<int> lst) {\n    int largestNegative = 0, smallestPositive = 0;\n    \n    for (int num : lst) {\n        if (num < 0 && num < largestNegative) {\n            largestNegative = num;\n        } else if (num > 0 && (num < smallestPositive || smallestPositive == 0)) {\n            smallestPositive = num;\n        }\n    }\n    \n    return {largestNegative, smallestPositive};\n}\n"}
{"task_id": "CPP/137", "generation": "#include <boost/any.hpp>\n#include <string>\n#include <algorithm>\n\nboost::any compare_one(boost::any a, boost::any b) {\n    if (a.type() == b.type()) {\n        if (a.type() == typeid(int)) {\n            int int_a = boost::any_cast<int>(a);\n            int int_b = boost::any_cast<int>(b);\n            if (int_a > int_b) {\n                return a;\n            } else if (int_b > int_a) {\n                return b;\n            }\n        } else if (a.type() == typeid(float)) {\n            float float_a = boost::any_cast<float>(a);\n            float float_b = boost::any_cast<float>(b);\n            if (float_a > float_b) {\n                return a;\n            } else if (float_b > float_a) {\n                return b;\n            }\n        } else if (a.type() == typeid(std::string)) {\n            std::string str_a = boost::any_cast<std::string>(a);\n            std::string str_b = boost::any_cast<std::string>(b);\n            if (str_a > str_b) {\n                return a;\n            } else if (str_b > str_a) {\n                return b;\n            }\n        }\n    } else {\n        if (a.type() == typeid(int) && b.type() == typeid(float)) {\n            float float_a = static_cast<float>(boost::any_cast<int>(a));\n            float float_b = boost::any_cast<float>(b);\n            if (float_a > float_b) {\n                return a;\n            } else if (float_b > float_a) {\n                return b;\n            }\n        } else if (a.type() == typeid(float) && b.type() == typeid(int)) {\n            float float_a = boost::any_cast<float>(a);\n            float float_b = static_cast<float>(boost::any_cast<int>(b));\n            if (float_a > float_b) {\n                return a;\n            } else if (float_b > float_a) {\n                return b;\n            }\n        } else if (a.type() == typeid(std::string) && b.type() == typeid(int)) {\n            int int_a = std::stoi(boost::any_cast<std::string>(a));\n            int int_b = boost::any_cast<int>(b);\n            if (int_a > int_b) {\n                return a;\n            } else if (int_b > int_a) {\n                return b;\n            }\n        } else if (a.type() == typeid(int) && b.type() == typeid(std::string)) {\n            int int_a = boost::any_cast<int>(a);\n            int int_b = std::stoi(boost::any_cast<std::string>(b));\n            if (int_a > int_b) {\n                return a;\n            } else if (int_b > int_a) {\n                return b;\n            }\n        } else if (a.type() == typeid(std::string) && b.type() == typeid(float)) {\n            float float_a = std::stof(boost::any_cast<std::string>(a));\n            float float_b = boost::any_cast<float>(b);\n            if (float_a > float_b) {\n                return a;\n            } else if (float_b > float_a) {\n                return b;\n            }\n        } else if (a.type() == typeid(float) && b.type() == typeid(std::string)) {\n            float float_a = boost::any_cast<float>(a);\n            float float_b = std::stof(boost::any_cast<std::string>(b));\n            if (float_a > float_b) {\n                return a;\n            } else if (float_b > float_a) {\n                return b;\n            }\n        }\n    }\n    return \"None\";\n}\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if (n < 8)\n        return false;\n    if (n % 4 == 0)\n        return true;\n    return false;\n}\n"}
{"task_id": "CPP/139", "generation": "#include<stdio.h>\nusing namespace std;\n\nlong long factorial(int num) {\n    if (num == 0 || num == 1) {\n        return 1;\n    }\n    return num * factorial(num - 1);\n}\n\nlong long special_factorial(int n) {\n    long long result = 1;\n    for (int i = n; i > 0; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string result = \"\";\n    int consecutiveSpaces = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            consecutiveSpaces++;\n            if (consecutiveSpaces > 2) {\n                result += \"-\";\n                while (i < text.size() && text[i] == ' ') {\n                    i++;\n                }\n                i--;\n                consecutiveSpaces = 0;\n            } else {\n                result += \"_\";\n            }\n        } else {\n            result += text[i];\n            consecutiveSpaces = 0;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring file_name_check(string file_name){\n    int digitCount = 0;\n    bool dotFlag = false;\n    bool validStartChar = false;\n    bool validExtension = false;\n\n    for (char c : file_name) {\n        if (isdigit(c)) {\n            digitCount++;\n        } else if (c == '.') {\n            dotFlag = true;\n        } else if (!validStartChar && isalpha(c)) {\n            validStartChar = true;\n        } else if (dotFlag && (c == 't' || c == 'x' || c == 'e' || c == 'd' || c == 'l')) {\n            validExtension = true;\n        }\n    }\n\n    if (digitCount <= 3 && dotFlag && validStartChar && validExtension) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n"}
{"task_id": "CPP/142", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "#include<stdio.h>\n#include<string>\n#include<cmath>\n#include<vector>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    string result = \"\";\n    vector<string> words;\n    string word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            words.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    words.push_back(word);\n\n    for (string w : words) {\n        if (isPrime(w.length())) {\n            result += w + \" \";\n        }\n    }\n\n    if (!result.empty()) {\n        result.pop_back(); // Remove the extra space at the end\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool simplify(string x, string n) {\n    int num1 = stoi(x.substr(0, x.find('/')));\n    int den1 = stoi(x.substr(x.find('/') + 1));\n    int num2 = stoi(n.substr(0, n.find('/')));\n    int den2 = stoi(n.substr(n.find('/') + 1));\n\n    int product_num = num1 * num2;\n    int product_den = den1 * den2;\n\n    return product_num % product_den == 0;\n}\n"}
{"task_id": "CPP/145", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\n// Function to calculate the sum of digits of an integer\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num != 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\n// Custom comparator function to compare integers based on the sum of their digits\nbool compareBySumOfDigits(int a, int b) {\n    int sumA = sumOfDigits(a);\n    int sumB = sumOfDigits(b);\n    if (sumA == sumB) {\n        return a < b; // If sums are equal, order based on index\n    }\n    return sumA < sumB;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    sort(nums.begin(), nums.end(), compareBySumOfDigits);\n    return nums;\n}\n"}
{"task_id": "CPP/146", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for (int num : nums) {\n        if (num > 10) {\n            string numStr = to_string(num);\n            int firstDigit = numStr[0] - '0';\n            int lastDigit = numStr[numStr.size() - 1] - '0';\n            if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_max_triples(int n){\n    int count = 0;\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (int i = 0; i < n - 2; i++) {\n        for (int j = i + 1; j < n - 1; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\n    std::map<std::string, int> planetPositions = {\n        {\"Mercury\", 1}, {\"Venus\", 2}, {\"Earth\", 3}, {\"Mars\", 4},\n        {\"Jupiter\", 5}, {\"Saturn\", 6}, {\"Uranus\", 7}, {\"Neptune\", 8}\n    };\n\n    if (planetPositions.find(planet1) == planetPositions.end() || planetPositions.find(planet2) == planetPositions.end()) {\n        return {};\n    }\n\n    int pos1 = planetPositions[planet1];\n    int pos2 = planetPositions[planet2];\n\n    int start = std::min(pos1, pos2);\n    int end = std::max(pos1, pos2);\n\n    std::vector<std::string> result;\n    for (const auto& planet : planetPositions) {\n        if (planet.second > start && planet.second < end) {\n            result.push_back(planet.first);\n        }\n    }\n\n    std::sort(result.begin(), result.end(), [&](const std::string& a, const std::string& b) {\n        return planetPositions[a] < planetPositions[b];\n    });\n\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> result;\n    for (const string& str : lst) {\n        if (str.size() % 2 == 0) {\n            result.push_back(str);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        if (a.size() == b.size()) {\n            return a < b;\n        }\n        return a.size() < b.size();\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "#include <stdio.h>\n#include <cmath>\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for (float num : lst) {\n        if (num > 0 && fmod(num, 1) == 0 && ((int)num) % 2 != 0) {\n            sum += (long long)num * num;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game, vector<int> guess){\n    vector<int> diff;\n    for (int i = 0; i < game.size(); i++) {\n        diff.push_back(abs(game[i] - guess[i]));\n    }\n    return diff;\n}\n"}
{"task_id": "CPP/153", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest_extension = \"\";\n    int max_strength = INT_MIN;\n\n    for (int i = 0; i < extensions.size(); i++) {\n        int CAP = 0, SM = 0;\n        for (char c : extensions[i]) {\n            if (isupper(c)) CAP++;\n            if (islower(c)) SM++;\n        }\n        int strength = CAP - SM;\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n\n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "#include <stdio.h>\n#include <string>\nusing namespace std;\n\nbool isSubstring(string& str, string& sub) {\n    return str.find(sub) != string::npos;\n}\n\nbool cycpattern_check(string a, string b) {\n    int n = b.size();\n    string temp = b + b;\n    for (int i = 0; i < n; i++) {\n        if (isSubstring(a, temp.substr(i, n))) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    int evenCount = 0;\n    int oddCount = 0;\n    string numStr = to_string(abs(num));\n    \n    for (char c : numStr) {\n        int digit = c - '0';\n        if (digit % 2 == 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    \n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/156", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring int_to_mini_roman(int number) {\n    vector<pair<int, string>> romanMap = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n\n    string result = \"\";\n    for (const auto& pair : romanMap) {\n        while (number >= pair.first) {\n            result += pair.second;\n            number -= pair.first;\n        }\n    }\n\n    // Convert the result string to lowercase\n    transform(result.begin(), result.end(), result.begin(), ::tolower);\n\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a, float b, float c){\n    if ((a + b > c) && (a + c > b) && (b + c > a)) {\n        float a2 = a * a;\n        float b2 = b * b;\n        float c2 = c * c;\n        if (a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/158", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\n#include<set>\nusing namespace std;\n\nstring find_max(vector<string> words){\n    int max_unique_chars = 0;\n    string word_with_max_unique_chars = \"\";\n    \n    for (string word : words) {\n        set<char> unique_chars_set;\n        for (char c : word) {\n            unique_chars_set.insert(c);\n        }\n        \n        if (unique_chars_set.size() > max_unique_chars) {\n            max_unique_chars = unique_chars_set.size();\n            word_with_max_unique_chars = word;\n        } else if (unique_chars_set.size() == max_unique_chars) {\n            if (word < word_with_max_unique_chars) {\n                word_with_max_unique_chars = word;\n            }\n        }\n    }\n    \n    return word_with_max_unique_chars;\n}\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number, int need, int remaining){\n    int total_carrots_eaten = number + need;\n    int carrots_left = remaining - total_carrots_eaten;\n    if (carrots_left < 0) {\n        carrots_left = 0;\n    }\n    return {total_carrots_eaten, carrots_left};\n}\n"}
{"task_id": "CPP/160", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nint do_algebra(vector<string> operato, vector<int> operand) {\n    int result = operand[0];\n    for (int i = 0; i < operato.size(); i++) {\n        if (operato[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (operato[i] == \"//\") {\n            result /= operand[i + 1];\n        } else if (operato[i] == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    string result = \"\";\n    bool hasLetter = false;\n    \n    for (char c : s) {\n        if (isalpha(c)) {\n            c = islower(c) ? toupper(c) : tolower(c);\n            hasLetter = true;\n        }\n        result += c;\n    }\n    \n    if (!hasLetter) {\n        reverse(result.begin(), result.end());\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n\nstring string_to_md5(string text){\n    if (text.empty()) {\n        return \"None\";\n    }\n\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n    MD5_Final(digest, &ctx);\n\n    char mdString[33];\n    for(int i = 0; i < 16; i++) {\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    }\n\n    return string(mdString);\n}\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a, int b) {\n    vector<int> result;\n    for (int i = a; i <= b; i++) {\n        if (i % 2 == 0 && i < 10) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n\nbool has_close_elements(vector<float> numbers, float threshold){\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "## Chain of thought:\n1. Initialize an empty vector of strings to store the separated groups.\n2. Initialize two variables to keep track of the start and end indices of each group.\n3. Iterate through the input string character by character.\n4. When an opening parenthesis is encountered, mark the start index.\n5. When a closing parenthesis is encountered, mark the end index and extract the substring between the start and end indices.\n6. Add the extracted substring to the vector of strings.\n7. Continue this process until the end of the input string is reached.\n8. Return the vector of separated groups.\n\n## Pseudocode:\n"}
{"task_id": "CPP/2", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    int intPart = floor(number);\n    float decimalPart = number - intPart;\n    return decimalPart;\n}\n"}
{"task_id": "CPP/3", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0;\n    float deviation_sum = 0;\n    \n    for (float num : numbers) {\n        sum = sum + num;\n    }\n    \n    float mean = sum / numbers.size();\n    \n    for (float num : numbers) {\n        deviation_sum = deviation_sum + abs(num - mean);\n    }\n    \n    float mean_absolute_deviation = deviation_sum / numbers.size();\n    \n    return mean_absolute_deviation;\n}\n"}
{"task_id": "CPP/5", "generation": "#include <vector>\n#include <stdio.h>\nusing namespace std;\n\nvector<int> intersperse(vector<int> numbers, int delimeter){\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        if (i != numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string) {\n    vector<int> maxLevels;\n    size_t start = 0;\n    size_t end = paren_string.find(' ');\n\n    while (end != string::npos) {\n        string group = paren_string.substr(start, end - start);\n        int currentLevel = 0;\n        int maxLevel = 0;\n\n        for (char c : group) {\n            if (c == '(') {\n                currentLevel++;\n                maxLevel = max(maxLevel, currentLevel);\n            } else if (c == ')') {\n                currentLevel--;\n            }\n        }\n\n        maxLevels.push_back(maxLevel);\n        start = end + 1;\n        end = paren_string.find(' ', start);\n    }\n\n    // Process the last group\n    string lastGroup = paren_string.substr(start);\n    int currentLevel = 0;\n    int maxLevel = 0;\n\n    for (char c : lastGroup) {\n        if (c == '(') {\n            currentLevel++;\n            maxLevel = max(maxLevel, currentLevel);\n        } else if (c == ')') {\n            currentLevel--;\n        }\n    }\n\n    maxLevels.push_back(maxLevel);\n\n    return maxLevels;\n}\n"}
{"task_id": "CPP/7", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filteredStrings;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            filteredStrings.push_back(str);\n        }\n    }\n    return filteredStrings;\n}\n"}
{"task_id": "CPP/8", "generation": "#include <vector>\n\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    \n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    \n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> rollingMax;\n    for (int i = 0; i < numbers.size(); i++) {\n        int maxVal = numbers[i];\n        for (int j = i; j < numbers.size(); j++) {\n            maxVal = max(maxVal, numbers[j]);\n        }\n        rollingMax.push_back(maxVal);\n    }\n    return rollingMax;\n}\n"}
{"task_id": "CPP/10", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\n\nstring make_palindrome(string str){\n    string longest_suffix = \"\";\n    int i = str.length() - 1;\n    for (; i >= 0; i--) {\n        if (is_palindrome(str.substr(i))) {\n            longest_suffix = str.substr(i);\n            break;\n        }\n    }\n    string prefix = str.substr(0, i);\n    string palindrome = str + string(prefix.rbegin(), prefix.rend());\n    return palindrome;\n}\n"}
{"task_id": "CPP/11", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a, string b){\n    if (a.size() != b.size()) {\n        return \"Error: Input strings are not of the same length\";\n    }\n    \n    string result = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] != b[i]) {\n            result += \"1\";\n        } else {\n            result += \"0\";\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if (strings.empty()) {\n        return \"None\";\n    }\n    string longestString = \"\";\n    for (const string& str : strings) {\n        if (str.length() > longestString.length()) {\n            longestString = str;\n        }\n    }\n    return longestString;\n}\n"}
{"task_id": "CPP/13", "generation": "#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}\n"}
{"task_id": "CPP/14", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> all_prefixes(string str){\n    vector<string> prefixes;\n    for (int i = 0; i < str.size(); i++) {\n        prefixes.push_back(str.substr(0, i + 1));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string result = \"\";\n    for (int i = 0; i <= n; i++) {\n        result += to_string(i) + \" \";\n    }\n    result.pop_back(); // Remove the extra space at the end\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\n#include<set>\nusing namespace std;\n\nint count_distinct_characters(string str){\n    set<char> distinctChars;\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    for (char c : str) {\n        distinctChars.insert(c);\n    }\n    \n    return distinctChars.size();\n}\n"}
{"task_id": "CPP/17", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<int> parse_music(string music_string){\n    vector<int> beats;\n    for (int i = 0; i < music_string.size(); i++) {\n        if (music_string[i] == 'o') {\n            beats.push_back(4);\n        } else if (music_string[i] == 'o' && music_string[i + 1] == '|') {\n            beats.push_back(2);\n            i++;\n        } else if (music_string[i] == '.' && music_string[i + 1] == '|') {\n            beats.push_back(1);\n            i++;\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str, string substring){\n    int count = 0;\n    for (int i = 0; i <= str.length() - substring.length(); i++) {\n        if (str.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\n#include<algorithm>\n#include<sstream>\n\nusing namespace std;\n\nstring sort_numbers(string numbers){\n    map<string, int> numMap = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3},\n        {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\", 7},\n        {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    stringstream ss(numbers);\n    string token;\n    vector<int> nums;\n\n    while (ss >> token) {\n        nums.push_back(numMap[token]);\n    }\n\n    sort(nums.begin(), nums.end());\n\n    string result;\n    for (int num : nums) {\n        for (auto it = numMap.begin(); it != numMap.end(); ++it) {\n            if (it->second == num) {\n                result += it->first + \" \";\n                break;\n            }\n        }\n    }\n\n    result.pop_back(); // Remove the extra space at the end\n    return result;\n}\n"}
{"task_id": "CPP/20", "generation": "## Chain of thought:\n1. Initialize an empty vector `out` to store the closest elements.\n2. Iterate over the numbers vector to find the closest pair of elements.\n3. Compare the absolute difference between each pair of numbers.\n4. If `out` is empty or the absolute difference of the current pair is smaller than the previous closest pair, update `out` with the current pair.\n5. If the first number in the pair is greater than the second number, swap them to maintain order.\n6. Return the `out` vector containing the closest elements."}
{"task_id": "CPP/21", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){\n    float min_num = numbers[0];\n    float max_num = numbers[0];\n    \n    // Find the minimum and maximum numbers\n    for (float num : numbers) {\n        min_num = min(min_num, num);\n        max_num = max(max_num, num);\n    }\n    \n    float range = max_num - min_num;\n    vector<float> rescaled_numbers;\n    \n    // Apply linear transformation\n    for (float num : numbers) {\n        float rescaled_num = (num - min_num) / range;\n        rescaled_numbers.push_back(rescaled_num);\n    }\n    \n    return rescaled_numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "#include<vector>\n#include<boost/any.hpp>\n#include<list>\n#include<algorithm>\n\nstd::vector<int> filter_integers(std::list<boost::any> values) {\n    std::vector<int> filteredIntegers;\n    for (const boost::any& val : values) {\n        if (val.type() == typeid(int)) {\n            filteredIntegers.push_back(boost::any_cast<int>(val));\n        }\n    }\n    return filteredIntegers;\n}\n"}
{"task_id": "CPP/23", "generation": "#include <string>\n\nint strlen(std::string str) {\n    int length = 0;\n    for (int i = 0; str[i] != '\\0'; i++) {\n        length++;\n    }\n    return length;\n}\n"}
{"task_id": "CPP/24", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int divisor = n - 1;\n    while (divisor > 0) {\n        if (n % divisor == 0) {\n            return divisor;\n        }\n        divisor = divisor - 1;\n    }\n}\n"}
{"task_id": "CPP/25", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nvector<int> factorize(int n){\n    vector<int> factors;\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n = n / 2;\n    }\n    for (int i = 3; i <= sqrt(n); i = i + 2) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n = n / i;\n        }\n    }\n    if (n > 2) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\n#include<set>\nusing namespace std;\n\nvector<int> remove_duplicates(vector<int> numbers){\n    set<int> uniqueElements;\n    vector<int> output;\n    \n    for (int num : numbers) {\n        if (uniqueElements.find(num) == uniqueElements.end()) {\n            uniqueElements.insert(num);\n            output.push_back(num);\n        }\n    }\n    \n    return output;\n}\n"}
{"task_id": "CPP/27", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    string result = \"\";\n    for (char c : str) {\n        if (islower(c)) {\n            result += toupper(c);\n        } else if (isupper(c)) {\n            result += tolower(c);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/28", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for (const string& s : strings) {\n        result += s;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> filtered_strings;\n    \n    for (const string& str : strings) {\n        if (str.find(prefix) == 0) {\n            filtered_strings.push_back(str);\n        }\n    }\n    \n    return filtered_strings;\n}\n"}
{"task_id": "CPP/30", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> positiveNumbers;\n    for (float num : l) {\n        if (num > 0) {\n            positiveNumbers.push_back(num);\n        }\n    }\n    return positiveNumbers;\n}\n"}
{"task_id": "CPP/31", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n < 2)\n        return false;\n    if (n % 2 == 0 && n != 2)\n        return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\ndouble find_zero(vector<double> xs){\n    if (xs.size() % 2 != 0) {\n        return 0;  // Invalid input\n    }\n    \n    double max_coefficient = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        if (xs[i] != 0 && xs[i] > max_coefficient) {\n            max_coefficient = xs[i];\n        }\n    }\n    \n    double zero_point = -xs[0] / max_coefficient;\n    return zero_point;\n}\n"}
{"task_id": "CPP/33", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> sort_third(vector<int> l){\n    vector<int> result;\n    vector<int> temp;\n\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            temp.push_back(l[i]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n\n    sort(temp.begin(), temp.end());\n\n    int tempIndex = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            result.push_back(temp[tempIndex]);\n            tempIndex++;\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/34", "generation": "#include <stdio.h>\n#include <vector>\n#include <algorithm>\n#include <set>\nusing namespace std;\n\nvector<int> unique(vector<int> l){\n    set<int> uniqueSet;\n    for (int num : l) {\n        uniqueSet.insert(num);\n    }\n    vector<int> result(uniqueSet.begin(), uniqueSet.end());\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/35", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n    float max_element = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max_element) {\n            max_element = l[i];\n        }\n    }\n    return max_element;\n}\n"}
{"task_id": "CPP/36", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nint fizz_buzz(int n){\n    int count = 0;\n    for (int i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            string str = to_string(i);\n            if (str.find('7') != string::npos) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> result;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            vector<float> temp;\n            temp.push_back(l[i]);\n            sort(temp.begin(), temp.end());\n            result.push_back(temp[0]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/38", "generation": "#include <string>\n\nstd::string decode_cyclic(std::string s) {\n    std::string output;\n    for (int i = 0; i < s.length(); i += 3) {\n        std::string x = s.substr(i, 3);\n        if (x.length() == 3) {\n            x = x.substr(2) + x.substr(0, 2);\n        }\n        output += x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/39", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n\nbool is_prime(int num) {\n    if (num < 2) return false;\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nint prime_fib(int n) {\n    int count = 0;\n    int fib_num = 0;\n    int a = 0, b = 1;\n    while (count < n) {\n        int next_fib = a + b;\n        a = b;\n        b = next_fib;\n        if (is_prime(next_fib)) {\n            fib_num = next_fib;\n            count++;\n        }\n    }\n    return fib_num;\n}\n"}
{"task_id": "CPP/40", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    int collisions = n * (n - 1) / 2;\n    return collisions;\n}\n"}
{"task_id": "CPP/42", "generation": "#include <vector>\n\nstd::vector<int> incr_list(std::vector<int> l) {\n    std::vector<int> result;\n    for (int num : l) {\n        result.push_back(num + 1);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/43", "generation": "#include<stdio.h>\n#include<unordered_set>\n#include<vector>\nusing namespace std;\n\nbool pairs_sum_to_zero(vector<int> l){\n    unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x, int base){\n    string result = \"\";\n    while (x > 0) {\n        int remainder = x % base;\n        result += to_string(remainder);\n        x = x / base;\n    }\n    reverse(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float h){\n    return 0.5 * a * h;\n}\n"}
{"task_id": "CPP/46", "generation": "#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    int fib4Arr[4] = {0, 0, 2, 0};\n    if (n < 4) {\n        return fib4Arr[n];\n    }\n    for (int i = 4; i <= n; i++) {\n        fib4Arr[i % 4] = fib4Arr[(i - 1) % 4] + fib4Arr[(i - 2) % 4] + fib4Arr[(i - 3) % 4] + fib4Arr[(i - 4) % 4];\n    }\n    return fib4Arr[n % 4];\n}\n"}
{"task_id": "CPP/47", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 != 0) {\n        return l[n / 2];\n    } else {\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.length() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "#include<stdio.h>\nusing namespace std;\nint modp(int n, int p) {\n    if (n == 0) {\n        return 1;\n    }\n    int result = 1;\n    for (int i = 0; i < n; i++) {\n        result *= 2;\n        if (result >= p) {\n            result %= p;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/50", "generation": "#include <stdio.h>\n#include <string>\nusing namespace std;\n\nstring encode_shift(string s){\n    string out;\n    for (int i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] + 5 - (int)'a') % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}\n\nstring decode_shift(string s){\n    string out;\n    for (int i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}\n"}
{"task_id": "CPP/51", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring remove_vowels(string text){\n    string result = \"\";\n    string vowels = \"aeiouAEIOU\";\n    for (char c : text) {\n        if (vowels.find(c) == string::npos) {\n            result += c;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/52", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int> l, int t) {\n    bool belowThreshold = true;\n    for (int num : l) {\n        if (num >= t) {\n            belowThreshold = false;\n            break;\n        }\n    }\n    return belowThreshold;\n}\n"}
{"task_id": "CPP/53", "generation": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x, int y){\n    return x + y;\n}\n"}
{"task_id": "CPP/54", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<map>\nusing namespace std;\n\nbool same_chars(string s0, string s1){\n    map<char, int> freqMap0, freqMap1;\n    \n    for (char c : s0) {\n        freqMap0[c]++;\n    }\n    \n    for (char c : s1) {\n        freqMap1[c]++;\n    }\n    \n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    \n    return s0 == s1;\n}\n"}
{"task_id": "CPP/55", "generation": "#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n    int a = 0, b = 1, fib = 0;\n    for (int i = 2; i <= n; i++) {\n        a = b;\n        b = fib;\n        fib = a + b;\n    }\n    return fib;\n}\n"}
{"task_id": "CPP/56", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int balance = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            balance++;\n        } else if (bracket == '>') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    bool increasing = true;\n    bool decreasing = true;\n    \n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n    }\n    \n    return increasing || decreasing;\n}\n"}
{"task_id": "CPP/58", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\n#include<set>\nusing namespace std;\n\nvector<int> common(vector<int> l1, vector<int> l2){\n    set<int> set1(l1.begin(), l1.end());\n    set<int> set2(l2.begin(), l2.end());\n    \n    set<int> result;\n    for (int num : set1) {\n        if (set2.find(num) != set2.end()) {\n            result.insert(num);\n        }\n    }\n    \n    return vector<int>(result.begin(), result.end());\n}\n"}
{"task_id": "CPP/59", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    while (n % 2 == 0) {\n        n = n / 2;\n    }\n    for (int i = 3; i <= sqrt(n); i = i + 2) {\n        while (n % i == 0) {\n            n = n / i;\n        }\n    }\n    return n;\n}\n"}
{"task_id": "CPP/60", "generation": "#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool correct_bracketing(string brackets){\n    int counter = 0;\n    \n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            counter++;\n        } else if (bracket == ')') {\n            counter--;\n        }\n        \n        if (counter < 0) {\n            return false;\n        }\n    }\n    \n    return counter == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result = {};\n    for (int i = 1; i < xs.size(); i++) {\n        float derivative_coefficient = xs[i] * i;\n        result.push_back(derivative_coefficient);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "#include <stdio.h>\nusing namespace std;\nint fibfib(int n) {\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n    int fibfib[n+1];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n    }\n    return fibfib[n];\n}\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = tolower(s[i]);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i == s.length() - 1)) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "#include <stdio.h>\n#include <string>\nusing namespace std;\n\nstring circular_shift(int x, int shift) {\n    string str = to_string(x);\n    int n = str.size();\n    \n    if (shift > n) {\n        reverse(str.begin(), str.end());\n        return str;\n    }\n    \n    shift %= n;\n    string result = str.substr(n - shift) + str.substr(0, n - shift);\n    \n    return result;\n}\n"}
{"task_id": "CPP/66", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += c;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    int apples = 0, oranges = 0, mangoes = 0;\n    \n    // Parse the input string to extract the number of apples and oranges\n    sscanf(s.c_str(), \"%d apples and %d oranges\", &apples, &oranges);\n    \n    // Calculate the number of mango fruits\n    mangoes = n - apples - oranges;\n    \n    return mangoes;\n}\n"}
{"task_id": "CPP/68", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    int smallestValue = -1;\n    int smallestIndex = -1;\n    \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && (smallestValue == -1 || arr[i] < smallestValue)) {\n            smallestValue = arr[i];\n            smallestIndex = i;\n        }\n    }\n    \n    if (smallestValue != -1) {\n        return {smallestValue, smallestIndex};\n    } else {\n        return {};\n    }\n}\n"}
{"task_id": "CPP/69", "generation": "#include<stdio.h>\n#include<vector>\n#include<map>\nusing namespace std;\n\nint search(vector<int> lst){\n    map<int, int> frequencyMap;\n    for (int num : lst) {\n        frequencyMap[num]++;\n    }\n\n    int maxInteger = -1;\n    for (const auto& pair : frequencyMap) {\n        if (pair.second >= pair.first && pair.first > maxInteger) {\n            maxInteger = pair.first;\n        }\n    }\n\n    return maxInteger;\n}\n"}
{"task_id": "CPP/70", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> sorted_lst = lst;\n    sort(sorted_lst.begin(), sorted_lst.end());\n    \n    vector<int> output;\n    int begin_ptr = 0;\n    int end_ptr = sorted_lst.size() - 1;\n    \n    while (begin_ptr <= end_ptr) {\n        output.push_back(sorted_lst[begin_ptr]);\n        begin_ptr++;\n        \n        if (begin_ptr <= end_ptr) {\n            output.push_back(sorted_lst[end_ptr]);\n            end_ptr--;\n        }\n    }\n    \n    if (sorted_lst.size() % 2 == 1) {\n        output.push_back(sorted_lst[begin_ptr]);\n    }\n    \n    return output;\n}\n"}
{"task_id": "CPP/71", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float b, float c){\n    if (a + b > c && a + c > b && b + c > a) {\n        float s = (a + b + c) / 2;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100; // Round to 2 decimal points\n    } else {\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nbool will_it_fly(vector<int> q, int w) {\n    bool isPalindromic = true;\n    for (int i = 0; i < q.size() / 2; i++) {\n        if (q[i] != q[q.size() - i - 1]) {\n            isPalindromic = false;\n            break;\n        }\n    }\n    \n    int sum = 0;\n    for (int num : q) {\n        sum += num;\n    }\n    \n    return isPalindromic && sum <= w;\n}\n"}
{"task_id": "CPP/73", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint smallest_change(vector<int> arr){\n    int start = 0;\n    int end = arr.size() - 1;\n    int changes = 0;\n\n    while (start < end) {\n        if (arr[start] != arr[end]) {\n            changes++;\n        }\n        start++;\n        end--;\n    }\n\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int totalChars1 = 0, totalChars2 = 0;\n    \n    for (string str : lst1) {\n        totalChars1 += str.length();\n    }\n    \n    for (string str : lst2) {\n        totalChars2 += str.length();\n    }\n    \n    if (totalChars1 < totalChars2) {\n        return lst1;\n    } else if (totalChars2 < totalChars1) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n\nbool isPrime(int num) {\n    if (num < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool is_multiply_prime(int a) {\n    if (a < 6) {\n        return false;\n    }\n    if (a % 2 == 0) {\n        if (a == 6) {\n            return false;\n        } else {\n            return isPrime(a / 2);\n        }\n    }\n    for (int i = 2; i < 100; i++) {\n        if (isPrime(i)) {\n            for (int j = i + 1; j < 100; j++) {\n                if (isPrime(j)) {\n                    for (int k = j + 1; k < 100; k++) {\n                        if (isPrime(k) && i * j * k == a) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x, int n){\n    if (x <= 0 || n <= 1) {\n        return false;\n    }\n    int power = 1;\n    while (power < x) {\n        power = power * n;\n    }\n    if (power == x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"}
{"task_id": "CPP/77", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    if (a == 0) {\n        return true;\n    }\n    a = abs(a);\n    int cubeRoot = round(cbrt(a));\n    return (cubeRoot * cubeRoot * cubeRoot == a);\n}\n"}
{"task_id": "CPP/78", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<unordered_set>\nusing namespace std;\n\nint hex_key(string num){\n    int count = 0;\n    unordered_set<char> prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'};\n    \n    for (char c : num) {\n        if (prime_hex_digits.find(c) != prime_hex_digits.end()) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring decimal_to_binary(int decimal){\n    string binaryStr = \"db\";\n    while (decimal > 0) {\n        char bit = (decimal % 2) + '0';\n        binaryStr += bit;\n        decimal /= 2;\n    }\n    reverse(binaryStr.begin() + 2, binaryStr.end());\n    binaryStr += \"db\";\n    return binaryStr;\n}\n"}
{"task_id": "CPP/80", "generation": "#include<stdio.h>\n#include<string>\n#include<unordered_set>\nusing namespace std;\n\nbool is_happy(string s){\n    if(s.length() < 3) {\n        return false;\n    }\n\n    unordered_set<char> seen;\n    for(int i = 2; i < s.length(); i++) {\n        if(seen.find(s[i]) != seen.end() || seen.find(s[i-1]) != seen.end() || seen.find(s[i-2]) != seen.end()) {\n            return false;\n        }\n        seen.insert(s[i]);\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letter_grades;\n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "#include <stdio.h>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool prime_length(string str) {\n    int length = str.length();\n    return isPrime(length);\n}\n"}
{"task_id": "CPP/83", "generation": "#include<stdio.h>\nusing namespace std;\n\nint starts_one_ends(int n){\n    int start_with_one = 0, end_with_one = 0, total_count = 0, overlap = 0;\n    \n    if (n == 1) {\n        start_with_one = 1;\n        end_with_one = 1;\n        total_count = 1;\n        overlap = 1;\n    } else {\n        start_with_one = 9 * pow(10, n - 2);\n        end_with_one = pow(10, n - 1);\n        total_count = pow(10, n - 1);\n        overlap = 1;\n    }\n    \n    int result = start_with_one + end_with_one - overlap;\n    return result;\n}\n"}
{"task_id": "CPP/84", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring solve(int N){\n    int sum = 0;\n    int num = N;\n    \n    // Calculate the sum of digits\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    \n    // Convert sum to binary\n    string binary = \"\";\n    while (sum > 0) {\n        binary = to_string(sum % 2) + binary;\n        sum /= 2;\n    }\n    \n    return binary;\n}\n"}
{"task_id": "CPP/85", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "#include <stdio.h>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    stringstream ss(s);\n    string word, result;\n    \n    while (ss >> word) {\n        sort(word.begin(), word.end());\n        result += word + \" \";\n    }\n    \n    // Remove the extra space at the end\n    result.pop_back();\n    \n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0];\n    });\n    for (auto& v : result) {\n        sort(v.begin(), v.end(), greater<int>());\n    }\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    if (array.empty()) {\n        return {};\n    }\n    int sum = array[0] + array[array.size() - 1];\n    if (sum % 2 == 1) {\n        sort(array.begin(), array.end());\n    } else {\n        sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\n"}
{"task_id": "CPP/89", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring encrypt(string s){\n    string result = \"\";\n    for (char c : s) {\n        if (islower(c)) {\n            char shifted = c + 4;\n            if (shifted > 'z') {\n                shifted = 'a' + (shifted - 'z' - 1);\n            }\n            result += shifted;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/90", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint next_smallest(vector<int> lst){\n    if (lst.size() < 2) {\n        return -1; // None\n    }\n    \n    sort(lst.begin(), lst.end());\n    \n    int second_smallest = lst[1];\n    for (int i = 2; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n            second_smallest = lst[i];\n            break;\n        }\n    }\n    \n    return second_smallest;\n}\n"}
{"task_id": "CPP/91", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int count = 0;\n    string delimiter = \".?!\";\n    size_t pos = 0;\n    string token;\n    while ((pos = S.find_first_of(delimiter)) != string::npos) {\n        token = S.substr(0, pos);\n        if (token.find(\"I \") == 0) {\n            count++;\n        }\n        S.erase(0, pos + 1);\n    }\n    if (S.find(\"I \") == 0) {\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a, float b, float c){\n    if (a != (int)a || b != (int)b || c != (int)c) {\n        return false;\n    }\n    if (a == b + c || b == a + c || c == a + b) {\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring encode(string message){\n    string encodedMessage = \"\";\n    for (char c : message) {\n        if (isalpha(c)) {\n            if (tolower(c) == 'a' || tolower(c) == 'e' || tolower(c) == 'i' || tolower(c) == 'o' || tolower(c) == 'u') {\n                encodedMessage += char(isupper(c) ? toupper((c - 'A' + 2) % 26 + 'A') : tolower((c - 'a' + 2) % 26 + 'a'));\n            } else {\n                encodedMessage += isupper(c) ? tolower(c) : toupper(c);\n            }\n        } else {\n            encodedMessage += c;\n        }\n    }\n    return encodedMessage;\n}\n"}
{"task_id": "CPP/94", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nint skjkasdkd(vector<int> lst) {\n    int largestPrime = 0;\n    int sum = 0;\n    \n    for (int num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    \n    sum = sumOfDigits(largestPrime);\n    \n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\n\nbool check_dict_case(map<string,string> dict){\n    if (dict.empty()) {\n        return false;\n    }\n    for (const auto& entry : dict) {\n        string key = entry.first;\n        bool isLower = true;\n        bool isUpper = true;\n        for (char c : key) {\n            if (!islower(c)) {\n                isLower = false;\n            }\n            if (!isupper(c)) {\n                isUpper = false;\n            }\n        }\n        if (!isLower && !isUpper) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nbool isPrime(int num) {\n    if (num < 2) return false;\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nvector<int> count_up_to(int n) {\n    vector<int> primes;\n    if (n <= 1) return primes;\n    for (int i = 2; i < n; i++) {\n        if (isPrime(i)) primes.push_back(i);\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a, int b) {\n    int unitA = abs(a) % 10;\n    int unitB = abs(b) % 10;\n    return unitA * unitB;\n}\n"}
{"task_id": "CPP/98", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for (int i = 0; i < s.size(); i += 2) {\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n\nint closest_integer(string value){\n    float num = stof(value);\n    int floor_num = floor(num);\n    int ceil_num = ceil(num);\n    \n    float diff_floor = abs(num - floor_num);\n    float diff_ceil = abs(num - ceil_num);\n    \n    if (diff_floor < diff_ceil) {\n        return floor_num;\n    } else if (diff_ceil < diff_floor) {\n        return ceil_num;\n    } else {\n        if (num > 0) {\n            return ceil_num;\n        } else {\n            return floor_num;\n        }\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "#include <vector>\n\nstd::vector<int> make_a_pile(int n) {\n    std::vector<int> stones;\n    int stonesCount = n;\n    \n    for (int i = 0; i < n; i++) {\n        stones.push_back(stonesCount);\n        if (stonesCount % 2 == 0) {\n            stonesCount += 1; // Next odd number\n        } else {\n            stonesCount += 2; // Next even number\n        }\n    }\n    \n    return stones;\n}\n"}
{"task_id": "CPP/101", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n\n    for (char c : s) {\n        if (isalpha(c)) {\n            word += c;\n        } else if (c == ',' || c == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n    }\n\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "#include<stdio.h>\nusing namespace std;\nint choose_num(int x, int y){\n    if (x % 2 != 0) {\n        x++;\n    }\n    if (y % 2 != 0) {\n        y--;\n    }\n    if (x > y) {\n        return -1;\n    }\n    return y;\n}\n"}
{"task_id": "CPP/103", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n\nstring rounded_avg(int n, int m) {\n    if (n > m) {\n        return \"-1\";\n    }\n    \n    int sum = 0;\n    int count = m - n + 1;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    \n    int avg = round((double)sum / count);\n    string binary = bitset<32>(avg).to_string();\n    \n    size_t found = binary.find('1');\n    if (found != string::npos) {\n        return binary.substr(found);\n    }\n    \n    return \"0\";\n}\n"}
{"task_id": "CPP/104", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for (int num : x) {\n        bool hasEvenDigit = false;\n        string numStr = to_string(num);\n        for (char c : numStr) {\n            if ((c - '0') % 2 == 0) {\n                hasEvenDigit = true;\n                break;\n            }\n        }\n        if (!hasEvenDigit) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n\nvector<string> by_length(vector<int> arr){\n    map<int, string> numToString = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, \n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n\n    vector<int> filtered;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered.push_back(num);\n        }\n    }\n\n    sort(filtered.begin(), filtered.end());\n\n    reverse(filtered.begin(), filtered.end());\n\n    vector<string> result;\n    for (int num : filtered) {\n        result.push_back(numToString[num]);\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> result;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            int factorial = 1;\n            for (int j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push_back(factorial);\n        } else {\n            int sum = 0;\n            for (int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nbool isPalindrome(int num) {\n    string str = to_string(num);\n    int left = 0, right = str.size() - 1;\n    while (left < right) {\n        if (str[left] != str[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\nvector<int> even_odd_palindrome(int n) {\n    int evenCount = 0, oddCount = 0;\n    for (int i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/108", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for (int num : n) {\n        int sum_digits = 0;\n        int temp = abs(num);\n        if (num < 0) {\n            sum_digits -= temp % 10;\n            temp /= 10;\n        }\n        while (temp != 0) {\n            sum_digits += temp % 10;\n            temp /= 10;\n        }\n        if (sum_digits > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if (arr.empty()) {\n        return true;\n    }\n    int min_index = min_element(arr.begin(), arr.end()) - arr.begin();\n    if (min_index == 0) {\n        return true;\n    }\n    int n = arr.size();\n    for (int i = 0; i < min_index - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1, vector<int> lst2){\n    bool oddFound = false;\n    int oddCount = 0, evenCount = 0;\n    \n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddFound = true;\n            oddCount++;\n        }\n    }\n    \n    if (oddFound) {\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n    }\n    \n    if (evenCount >= oddCount) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/111", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char, int> result;\n    map<char, int> charCount;\n    \n    for (char c : test) {\n        if (c != ' ') {\n            charCount[c]++;\n        }\n    }\n    \n    int maxCount = 0;\n    for (const auto& pair : charCount) {\n        maxCount = max(maxCount, pair.second);\n    }\n    \n    for (const auto& pair : charCount) {\n        if (pair.second == maxCount) {\n            result[pair.first] = pair.second;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> reverse_delete(string s, string c) {\n    string result = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    string temp = result;\n    reverse(temp.begin(), temp.end());\n    if (result == temp) {\n        return {result, \"True\"};\n    } else {\n        return {result, \"False\"};\n    }\n}\n"}
{"task_id": "CPP/113", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst){\n    vector<string> result;\n    for (string s : lst) {\n        int count = 0;\n        for (char c : s) {\n            if (c == '1' || c == '3' || c == '5' || c == '7' || c == '9') {\n                count++;\n            }\n        }\n        string new_str = \"the number of odd elements \" + to_string(count) + \"n the str\" + to_string(count) + \"ng \" + s + \" of the \" + to_string(count) + \"nput.\";\n        result.push_back(new_str);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = LLONG_MAX;\n    long long currentSum = 0;\n    \n    for (int i = 0; i < nums.size(); i++) {\n        currentSum += nums[i];\n        minSum = min(minSum, currentSum);\n        if (currentSum < 0) {\n            currentSum = 0;\n        }\n    }\n    \n    return minSum;\n}\n"}
{"task_id": "CPP/115", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int totalLowering = 0;\n    for (const auto& well : grid) {\n        int wellWater = 0;\n        for (int waterUnit : well) {\n            if (waterUnit == 1) {\n                wellWater++;\n            }\n            if (wellWater > capacity) {\n                totalLowering += wellWater / capacity;\n                wellWater %= capacity;\n            }\n        }\n    }\n    return totalLowering;\n}\n"}
{"task_id": "CPP/116", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint countOnes(int num) {\n    int count = 0;\n    while (num > 0) {\n        count += num & 1;\n        num >>= 1;\n    }\n    return count;\n}\n\nbool customComparator(int a, int b) {\n    int onesA = countOnes(a);\n    int onesB = countOnes(b);\n    if (onesA == onesB) {\n        return a < b;\n    }\n    return onesA < onesB;\n}\n\nvector<int> sort_array(vector<int> arr) {\n    sort(arr.begin(), arr.end(), customComparator);\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nbool isConsonant(char c) {\n    c = tolower(c);\n    return !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') && isalpha(c);\n}\n\nint countConsonants(string word) {\n    int count = 0;\n    for (char c : word) {\n        if (isConsonant(c)) {\n            count++;\n        }\n    }\n    return count;\n}\n\nvector<string> select_words(string s, int n) {\n    vector<string> result;\n    string word = \"\";\n    for (char c : s) {\n        if (c == ' ') {\n            if (!word.empty() && countConsonants(word) == n) {\n                result.push_back(word);\n            }\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty() && countConsonants(word) == n) {\n        result.push_back(word);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring get_closest_vowel(string word){\n    string vowels = \"aeiouAEIOU\";\n    for (int i = word.size() - 2; i > 0; i--) {\n        if (vowels.find(word[i]) != string::npos && vowels.find(word[i + 1]) == string::npos) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    int open_count = 0;\n    int close_count = 0;\n    for (char c : lst[0]) {\n        if (c == '(')\n            open_count++;\n        else\n            close_count++;\n    }\n    for (char c : lst[1]) {\n        if (c == '(')\n            open_count++;\n        else\n            close_count++;\n    }\n    if ((open_count + close_count) % 2 != 0) {\n        return \"No\";\n    }\n    if (abs(open_count - close_count) <= 1) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n"}
{"task_id": "CPP/120", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> maximum(vector<int> arr, int k) {\n    sort(arr.begin(), arr.end(), greater<int>());\n    vector<int> result(arr.begin(), arr.begin() + k);\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (abs(arr[i]) < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> get_odd_collatz(int n){\n    vector<int> oddCollatz;\n    oddCollatz.push_back(n);\n    \n    while (n != 1) {\n        if (n % 2 != 0) {\n            n = 3 * n + 1;\n            oddCollatz.push_back(n);\n        } else {\n            n = n / 2;\n        }\n    }\n    \n    vector<int> result;\n    for (int num : oddCollatz) {\n        if (num % 2 != 0) {\n            result.push_back(num);\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/124", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    if (date.empty()) {\n        return false;\n    }\n    \n    int day, month, year;\n    sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year);\n    \n    if (month < 1 || month > 12) {\n        return false;\n    }\n    \n    if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)) {\n        return false;\n    }\n    \n    if ((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)) {\n        return false;\n    }\n    \n    if (month == 2) {\n        if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        } else {\n            if (day < 1 || day > 28) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> split_words(string txt){\n    vector<string> result;\n    int count = 0;\n    bool hasWhitespace = false;\n    bool hasComma = false;\n\n    for (char c : txt) {\n        if (c == ' ') {\n            hasWhitespace = true;\n        } else if (c == ',') {\n            hasComma = true;\n        } else if (islower(c)) {\n            int order = c - 'a';\n            if (order % 2 == 1) {\n                count++;\n            }\n        }\n    }\n\n    if (hasWhitespace) {\n        size_t pos = 0;\n        while ((pos = txt.find(' ')) != string::npos) {\n            result.push_back(txt.substr(0, pos));\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    } else if (hasComma) {\n        size_t pos = 0;\n        while ((pos = txt.find(',')) != string::npos) {\n            result.push_back(txt.substr(0, pos));\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    } else {\n        result.push_back(to_string(count));\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/126", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nbool is_sorted(vector<int> lst){\n    if (lst.size() <= 1) {\n        return true;\n    }\n    \n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i+1]) {\n            return false;\n        }\n        if (lst[i] == lst[i+1]) {\n            if (i+2 < lst.size() && lst[i+1] == lst[i+2]) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<cmath>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    \n    if (start > end) {\n        return \"NO\";\n    }\n    \n    int length = end - start;\n    if (isPrime(length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/128", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if (arr.empty()) {\n        return -32768;\n    }\n    int product_of_signs = 1;\n    int sum_of_magnitudes = 0;\n    for (int element : arr) {\n        product_of_signs *= (element == 0) ? 0 : (element > 0) ? 1 : -1;\n        sum_of_magnitudes += abs(element);\n    }\n    return product_of_signs * sum_of_magnitudes;\n}\n"}
{"task_id": "CPP/129", "generation": "#include <vector>\n#include <algorithm>\n\nvoid backtrack(vector<vector<int>>& grid, int k, int row, int col, vector<int>& path, vector<int>& minPath) {\n    if (path.size() == k) {\n        if (minPath.empty() || path < minPath) {\n            minPath = path;\n        }\n        return;\n    }\n\n    int n = grid.size();\n    path.push_back(grid[row][col]);\n\n    if (row > 0) backtrack(grid, k, row - 1, col, path, minPath);\n    if (row < n - 1) backtrack(grid, k, row + 1, col, path, minPath);\n    if (col > 0) backtrack(grid, k, row, col - 1, path, minPath);\n    if (col < n - 1) backtrack(grid, k, row, col + 1, path, minPath);\n\n    path.pop_back();\n}\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    vector<int> minPath;\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            vector<int> path;\n            backtrack(grid, k, i, j, path, minPath);\n        }\n    }\n    return minPath;\n}\n"}
{"task_id": "CPP/130", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> tribonacci = {0, 1, 1, 2};\n    if (n == 0) {\n        return {0};\n    } else if (n == 1) {\n        return {0, 1};\n    } else if (n == 2) {\n        return {0, 1, 1};\n    } else if (n == 3) {\n        return {0, 1, 1, 2};\n    } else {\n        for (int i = 4; i <= n; i++) {\n            int new_tribonacci;\n            if (i % 2 == 0) {\n                new_tribonacci = 1 + i / 2;\n            } else {\n                new_tribonacci = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3];\n            }\n            tribonacci.push_back(new_tribonacci);\n        }\n        return tribonacci;\n    }\n}\n"}
{"task_id": "CPP/131", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int product = 1;\n    string numStr = to_string(n);\n    for (char c : numStr) {\n        int digit = c - '0';\n        if (digit % 2 != 0) {\n            product *= digit;\n        }\n    }\n    if (product == 1) {\n        return 0;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "#include <stack>\n#include <string>\nbool is_nested(std::string str) {\n    std::stack<char> brackets;\n    for (char c : str) {\n        if (c == '[') {\n            brackets.push(c);\n        } else if (c == ']') {\n            if (brackets.empty()) {\n                return false;\n            }\n            brackets.pop();\n        }\n    }\n    return !brackets.empty();\n}\n"}
{"task_id": "CPP/133", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for (float num : lst) {\n        int roundedNum = ceil(num);\n        sum += roundedNum * roundedNum;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.empty()) {\n        return false;\n    }\n    char last_char = txt.back();\n    if (isalpha(last_char) && last_char != ' ') {\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int resultIndex = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            resultIndex = i;\n        }\n    }\n    return resultIndex;\n}\n"}
{"task_id": "CPP/136", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    int largest_negative = 0;\n    int smallest_positive = 0;\n    \n    for (int element : lst) {\n        if (element < 0 && element < largest_negative) {\n            largest_negative = element;\n        } else if (element > 0 && (element < smallest_positive || smallest_positive == 0)) {\n            smallest_positive = element;\n        }\n    }\n    \n    return {largest_negative, smallest_positive};\n}\n"}
{"task_id": "CPP/137", "generation": "#include <boost/any.hpp>\n#include <string>\n#include <algorithm>\n\nboost::any compare_one(boost::any a, boost::any b) {\n    if (a.type() == b.type()) {\n        if (a.type() == typeid(int)) {\n            int int_a = boost::any_cast<int>(a);\n            int int_b = boost::any_cast<int>(b);\n            if (int_a > int_b) {\n                return a;\n            } else if (int_b > int_a) {\n                return b;\n            }\n        } else if (a.type() == typeid(float)) {\n            float float_a = boost::any_cast<float>(a);\n            float float_b = boost::any_cast<float>(b);\n            if (float_a > float_b) {\n                return a;\n            } else if (float_b > float_a) {\n                return b;\n            }\n        } else if (a.type() == typeid(std::string)) {\n            std::string str_a = boost::any_cast<std::string>(a);\n            std::string str_b = boost::any_cast<std::string>(b);\n            if (str_a > str_b) {\n                return a;\n            } else if (str_b > str_a) {\n                return b;\n            }\n        }\n    } else {\n        if (a.type() == typeid(int) && b.type() == typeid(float)) {\n            float float_a = static_cast<float>(boost::any_cast<int>(a));\n            float float_b = boost::any_cast<float>(b);\n            if (float_a > float_b) {\n                return a;\n            } else if (float_b > float_a) {\n                return b;\n            }\n        } else if (a.type() == typeid(float) && b.type() == typeid(int)) {\n            float float_a = boost::any_cast<float>(a);\n            float float_b = static_cast<float>(boost::any_cast<int>(b));\n            if (float_a > float_b) {\n                return a;\n            } else if (float_b > float_a) {\n                return b;\n            }\n        } else if (a.type() == typeid(std::string)) {\n            std::string str_a = boost::any_cast<std::string>(a);\n            float float_b = std::stof(boost::any_cast<std::string>(b));\n            if (str_a > std::to_string(float_b)) {\n                return a;\n            } else if (std::to_string(float_b) > str_a) {\n                return b;\n            }\n        } else if (b.type() == typeid(std::string)) {\n            float float_a = std::stof(boost::any_cast<std::string>(a));\n            std::string str_b = boost::any_cast<std::string>(b);\n            if (std::to_string(float_a) > str_b) {\n                return a;\n            } else if (str_b > std::to_string(float_a)) {\n                return b;\n            }\n        }\n    }\n    return \"None\";\n}\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if (n < 8)\n        return false;\n    if (n % 4 == 0)\n        return true;\n    return false;\n}\n"}
{"task_id": "CPP/139", "generation": "#include<stdio.h>\nusing namespace std;\n\nlong long special_factorial(int n){\n    long long result = 1;\n    for (int i = n; i > 0; i--) {\n        long long factorial = 1;\n        for (int j = i; j > 0; j--) {\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string result = \"\";\n    int consecutive_spaces = 0;\n    \n    for (char c : text) {\n        if (c == ' ') {\n            if (text.find_first_not_of(' ', text.find(c)) == string::npos) {\n                consecutive_spaces++;\n                if (consecutive_spaces > 2) {\n                    result.pop_back(); // Remove the last underscore\n                    result += \"-\";\n                }\n            } else {\n                result += '_';\n                consecutive_spaces = 0;\n            }\n        } else {\n            result += c;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring file_name_check(string file_name){\n    int digitCount = 0;\n    int dotCount = 0;\n    string validExtensions[] = {\"txt\", \"exe\", \"dll\"};\n    string extension = \"\";\n    \n    for (char c : file_name) {\n        if (isdigit(c)) {\n            digitCount++;\n        }\n        else if (c == '.') {\n            dotCount++;\n        }\n        else if (dotCount == 1 && extension.empty()) {\n            extension += c;\n        }\n    }\n    \n    if (digitCount > 3 || dotCount != 1 || !isalpha(file_name[0]) || find(begin(validExtensions), end(validExtensions), extension) == end(validExtensions)) {\n        return \"No\";\n    }\n    \n    return \"Yes\";\n}\n"}
{"task_id": "CPP/142", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "#include <stdio.h>\n#include <string>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    string result = \"\";\n    vector<string> words;\n    string word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            words.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    words.push_back(word);\n\n    for (string w : words) {\n        if (isPrime(w.length())) {\n            result += w + \" \";\n        }\n    }\n\n    if (!result.empty()) {\n        result.pop_back(); // Remove the extra space at the end\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x, string n){\n    int numerator_x = stoi(x.substr(0, x.find('/')));\n    int denominator_x = stoi(x.substr(x.find('/') + 1));\n    int numerator_n = stoi(n.substr(0, n.find('/')));\n    int denominator_n = stoi(n.substr(n.find('/') + 1));\n    \n    int product = numerator_x * numerator_n;\n    \n    return (product % (denominator_x * denominator_n) == 0);\n}\n"}
{"task_id": "CPP/145", "generation": "#include <stdio.h>\n#include <vector>\n#include <algorithm>\n#include <string>\nusing namespace std;\n\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num != 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nbool compareIntegers(int a, int b) {\n    int sumA = sumOfDigits(a);\n    int sumB = sumOfDigits(b);\n    \n    if (sumA == sumB) {\n        return a < b;\n    }\n    return sumA < sumB;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    sort(nums.begin(), nums.end(), [&](int a, int b) {\n        return compareIntegers(a, b);\n    });\n    return nums;\n}\n"}
{"task_id": "CPP/146", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for (int num : nums) {\n        string numStr = to_string(abs(num));\n        if (num > 10 && (numStr.front() - '0') % 2 != 0 && (numStr.back() - '0') % 2 != 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_max_triples(int n){\n    int count = 0;\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (int i = 0; i < n-2; i++) {\n        for (int j = i+1; j < n-1; j++) {\n            for (int k = j+1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\n    std::map<std::string, int> planetOrder = {\n        {\"Mercury\", 1},\n        {\"Venus\", 2},\n        {\"Earth\", 3},\n        {\"Mars\", 4},\n        {\"Jupiter\", 5},\n        {\"Saturn\", 6},\n        {\"Uranus\", 7},\n        {\"Neptune\", 8}\n    };\n\n    std::vector<std::string> result;\n\n    if (planetOrder.find(planet1) == planetOrder.end() || planetOrder.find(planet2) == planetOrder.end()) {\n        return result; // Return empty vector if invalid planet names\n    }\n\n    int start = std::min(planetOrder[planet1], planetOrder[planet2]);\n    int end = std::max(planetOrder[planet1], planetOrder[planet2]);\n\n    for (const auto& planet : planetOrder) {\n        if (planet.second > start && planet.second < end) {\n            result.push_back(planet.first);\n        }\n    }\n\n    std::sort(result.begin(), result.end(), [&planetOrder](const std::string& a, const std::string& b) {\n        return planetOrder[a] < planetOrder[b];\n    });\n\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> result;\n    for (const string& str : lst) {\n        if (str.size() % 2 == 0) {\n            result.push_back(str);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        if (a.size() == b.size()) {\n            return a < b;\n        }\n        return a.size() < b.size();\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for (float num : lst) {\n        if (num > 0 && num == (int)num && fmod(num, 2) != 0) {\n            sum += num * num;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> differences;\n    for (int i = 0; i < game.size(); i++) {\n        int diff = abs(game[i] - guess[i]);\n        differences.push_back(diff);\n    }\n    return differences;\n}\n"}
{"task_id": "CPP/153", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring Strongest_Extension(string class_name, vector<string> extensions){\n    string strongest_extension = \"\";\n    int max_strength = INT_MIN;\n\n    for (string extension : extensions) {\n        int CAP = 0, SM = 0;\n        for (char c : extension) {\n            if (isupper(c)) CAP++;\n            if (islower(c)) SM++;\n        }\n        int strength = CAP - SM;\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n\n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a, string b){\n    if (a.length() != b.length())\n        return false;\n    \n    string temp = b + b;\n    int n = b.length();\n    \n    for (int i = 1; i < n; i++) {\n        if (temp.substr(i, n) == a)\n            return true;\n    }\n    \n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    int evenCount = 0, oddCount = 0;\n    string numStr = to_string(abs(num));\n    for (char c : numStr) {\n        if (isdigit(c)) {\n            int digit = c - '0';\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/156", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring int_to_mini_roman(int number) {\n    vector<pair<int, string>> romanMapping = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n\n    string result = \"\";\n    for (const auto& mapping : romanMapping) {\n        while (number >= mapping.first) {\n            number -= mapping.first;\n            result += mapping.second;\n        }\n    }\n\n    // Convert the result string to lowercase\n    transform(result.begin(), result.end(), result.begin(), ::tolower);\n\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a, float b, float c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        float longestSide = max(a, max(b, c));\n        float sumOfSquares = 0;\n        if (longestSide == a) {\n            sumOfSquares = b * b + c * c;\n        } else if (longestSide == b) {\n            sumOfSquares = a * a + c * c;\n        } else {\n            sumOfSquares = a * a + b * b;\n        }\n        if (longestSide * longestSide == sumOfSquares) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/158", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nstring find_max(vector<string> words) {\n    int maxUniqueChars = 0;\n    string maxWord = \"\";\n\n    for (const string& word : words) {\n        int uniqueChars = set<char>(word.begin(), word.end()).size();\n        if (uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word < maxWord)) {\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        }\n    }\n\n    return maxWord;\n}\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number, int need, int remaining){\n    int total_eaten = number + need;\n    int carrots_left = remaining - total_eaten;\n    if (carrots_left < 0) {\n        carrots_left = 0;\n    }\n    return {total_eaten, carrots_left};\n}\n"}
{"task_id": "CPP/160", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nint do_algebra(vector<string> operato, vector<int> operand){\n    int result = operand[0];\n    for (int i = 0; i < operato.size(); i++) {\n        if (operato[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (operato[i] == \"//\") {\n            result /= operand[i + 1];\n        } else if (operato[i] == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring solve(string s){\n    string result = \"\";\n    bool hasLetters = false;\n\n    for (char c : s) {\n        if (isalpha(c)) {\n            hasLetters = true;\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += tolower(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n\n    if (!hasLetters) {\n        reverse(result.begin(), result.end());\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "#include <stdio.h>\n#include <string>\n#include <openssl/md5.h>\n#include <sstream>\n#include <iomanip>\n\nstd::string string_to_md5(std::string text) {\n    if (text.empty()) {\n        return \"None\";\n    }\n\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((const unsigned char*)text.c_str(), text.length(), digest);\n\n    std::stringstream ss;\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        ss << std::hex << std::setw(2) << std::setfill('0') << (int)digest[i];\n    }\n\n    return ss.str();\n}\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a, int b) {\n    vector<int> result;\n    for (int i = a; i <= b; i++) {\n        if (i % 2 == 0 && i < 10) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n\nbool has_close_elements(vector<float> numbers, float threshold){\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> result;\n    string current_group = \"\";\n    \n    for (char c : paren_string) {\n        if (c == '(') {\n            string group = \"\";\n            while (c != ')') {\n                if (c != ' ') {\n                    group += c;\n                }\n                c = paren_string[++i];\n            }\n            result.push_back(group);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    int intPart = (int)number;\n    float decimalPart = number - intPart;\n    return decimalPart;\n}\n"}
{"task_id": "CPP/3", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\nfloat mean_absolute_deviation(vector<float> numbers){\n    // Calculate Mean\n    float mean = 0;\n    for (float num : numbers) {\n        mean += num;\n    }\n    mean /= numbers.size();\n\n    // Calculate Absolute Deviation\n    vector<float> abs_diff;\n    for (float num : numbers) {\n        abs_diff.push_back(abs(num - mean));\n    }\n\n    // Calculate Mean Absolute Deviation\n    float sum_abs_diff = 0;\n    for (float diff : abs_diff) {\n        sum_abs_diff += diff;\n    }\n    float mean_abs_deviation = sum_abs_diff / numbers.size();\n\n    return mean_abs_deviation;\n}\n"}
{"task_id": "CPP/5", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        if (i != numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> result;\n    size_t start = 0, end = 0;\n    while ((end = paren_string.find(\" \", start)) != string::npos) {\n        string group = paren_string.substr(start, end - start);\n        int current_level = 0, max_level = 0;\n        for (char c : group) {\n            if (c == '(') {\n                current_level++;\n                max_level = max(max_level, current_level);\n            } else if (c == ')') {\n                current_level--;\n            }\n        }\n        result.push_back(max_level);\n        start = end + 1;\n    }\n    string last_group = paren_string.substr(start);\n    int current_level = 0, max_level = 0;\n    for (char c : last_group) {\n        if (c == '(') {\n            current_level++;\n            max_level = max(max_level, current_level);\n        } else if (c == ')') {\n            current_level--;\n        }\n    }\n    result.push_back(max_level);\n    return result;\n}\n"}
{"task_id": "CPP/7", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filteredStrings;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            filteredStrings.push_back(str);\n        }\n    }\n    return filteredStrings;\n}\n"}
{"task_id": "CPP/8", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0, product = 1;\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "#include <stdio.h>\n#include <vector>\nusing namespace std;\n\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> rollingMax;\n    int currentMax = INT_MIN;\n    \n    for (int i = 0; i < numbers.size(); i++) {\n        currentMax = max(currentMax, numbers[i]);\n        rollingMax.push_back(currentMax);\n    }\n    \n    return rollingMax;\n}\n"}
{"task_id": "CPP/10", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool is_palindrome(string str) {\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(string str) {\n    if (is_palindrome(str)) {\n        return str;\n    }\n\n    int n = str.size();\n    for (int i = n - 1; i >= 0; i--) {\n        if (is_palindrome(str.substr(i))) {\n            string prefix = str.substr(0, i);\n            string suffix = str.substr(i);\n            reverse(prefix.begin(), prefix.end());\n            return str + prefix;\n        }\n    }\n    return str; // If no palindromic suffix found, return the original string\n}\n"}
{"task_id": "CPP/11", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a, string b){\n    string result = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if (strings.empty()) {\n        return \"None\";\n    }\n    string longestString = \"\";\n    for (const string& str : strings) {\n        if (str.length() > longestString.length()) {\n            longestString = str;\n        }\n    }\n    return longestString;\n}\n"}
{"task_id": "CPP/13", "generation": "#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}\n"}
{"task_id": "CPP/14", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> prefixes;\n    for (int i = 0; i < str.length(); i++) {\n        prefixes.push_back(str.substr(0, i + 1));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "#include <string>\n\nstd::string string_sequence(int n) {\n    std::string result = \"\";\n    for (int i = 0; i <= n; i++) {\n        result += std::to_string(i);\n        if (i != n) {\n            result += \" \";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <unordered_set>\nusing namespace std;\n\nint count_distinct_characters(string str) {\n    unordered_set<char> distinctChars;\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n\n    for (char c : str) {\n        distinctChars.insert(c);\n    }\n\n    return distinctChars.size();\n}\n"}
{"task_id": "CPP/17", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <unordered_map>\n\nusing namespace std;\n\nvector<int> parse_music(string music_string) {\n    vector<int> durations;\n    unordered_map<string, int> legend = {{\"o\", 4}, {\"o|\", 2}, {\".|\", 1}};\n\n    size_t pos = 0;\n    string delimiter = \" \";\n    while ((pos = music_string.find(delimiter)) != string::npos) {\n        string note = music_string.substr(0, pos);\n        durations.push_back(legend[note]);\n        music_string.erase(0, pos + delimiter.length());\n    }\n    durations.push_back(legend[music_string]); // Last note\n\n    return durations;\n}\n"}
{"task_id": "CPP/18", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str, string substring){\n    int count = 0;\n    for (int i = 0; i <= str.length() - substring.length(); i++) {\n        if (str.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\n#include<algorithm>\n#include<sstream>\n\nusing namespace std;\n\nstring sort_numbers(string numbers){\n    map<string, int> numMap = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    stringstream ss(numbers);\n    string word;\n    vector<int> nums;\n    while (ss >> word) {\n        nums.push_back(numMap[word]);\n    }\n\n    sort(nums.begin(), nums.end());\n\n    string sortedNumbers;\n    for (int num : nums) {\n        for (auto it = numMap.begin(); it != numMap.end(); ++it) {\n            if (it->second == num) {\n                sortedNumbers += it->first + \" \";\n                break;\n            }\n        }\n    }\n\n    sortedNumbers.pop_back(); // Remove the extra space at the end\n    return sortedNumbers;\n}\n"}
{"task_id": "CPP/20", "generation": "## Chain of thought:\n1. Initialize an empty vector to store the two closest elements.\n2. Iterate through the numbers vector using two nested loops to compare each pair of numbers.\n3. Check if the current pair is closer than the previously found closest pair.\n4. Update the closest pair if the current pair is closer.\n5. Return the closest pair in ascending order.\n\nLet's proceed with writing the C++ code."}
{"task_id": "CPP/21", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){\n    float min_val = numbers[0];\n    float max_val = numbers[0];\n    \n    for (float num : numbers) {\n        if (num < min_val) {\n            min_val = num;\n        }\n        if (num > max_val) {\n            max_val = num;\n        }\n    }\n    \n    float range = max_val - min_val;\n    vector<float> rescaled;\n    \n    for (float num : numbers) {\n        float transformed = (num - min_val) / range;\n        rescaled.push_back(transformed);\n    }\n    \n    return rescaled;\n}\n"}
{"task_id": "CPP/22", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\n#include<algorithm>\n#include<vector>\n#include<typeinfo>\n\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n\nvector<int> filter_integers(list_any values){\n    vector<int> filtered_integers;\n    for (const auto& val : values) {\n        if (typeid(val) == typeid(int)) {\n            filtered_integers.push_back(boost::any_cast<int>(val));\n        }\n    }\n    return filtered_integers;\n}\n"}
{"task_id": "CPP/23", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    int length = 0;\n    for (char c : str) {\n        length++;\n    }\n    return length;\n}\n"}
{"task_id": "CPP/24", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int largest = 1;\n    for (int i = n-1; i >= 1; i--) {\n        if (n % i == 0) {\n            largest = i;\n            break;\n        }\n    }\n    return largest;\n}\n"}
{"task_id": "CPP/25", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nvector<int> factorize(int n){\n    vector<int> factors;\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n /= 2;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "#include<stdio.h>\n#include<vector>\n#include<unordered_set>\nusing namespace std;\n\nvector<int> remove_duplicates(vector<int> numbers){\n    unordered_set<int> uniqueSet;\n    vector<int> uniqueVector;\n    \n    for (int num : numbers) {\n        if (uniqueSet.find(num) == uniqueSet.end()) {\n            uniqueSet.insert(num);\n            uniqueVector.push_back(num);\n        }\n    }\n    \n    return uniqueVector;\n}\n"}
{"task_id": "CPP/27", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    string result = \"\";\n    for (char c : str) {\n        if (islower(c)) {\n            result += toupper(c);\n        } else if (isupper(c)) {\n            result += tolower(c);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/28", "generation": "#include <string>\n#include <vector>\nstd::string concatenate(std::vector<std::string> strings) {\n    std::string result = \"\";\n    for (const std::string& s : strings) {\n        result += s;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> filtered_strings;\n    \n    for (const string& str : strings) {\n        if (str.find(prefix) == 0) {\n            filtered_strings.push_back(str);\n        }\n    }\n    \n    return filtered_strings;\n}\n"}
{"task_id": "CPP/30", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> positiveNumbers;\n    for (float num : l) {\n        if (num > 0) {\n            positiveNumbers.push_back(num);\n        }\n    }\n    return positiveNumbers;\n}\n"}
{"task_id": "CPP/31", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n < 2) {\n        return false;\n    }\n    if (n == 2) {\n        return true;\n    }\n    for (long long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "double find_zero(vector<double> xs){\n    if (xs.size() % 2 != 0 || xs.back() == 0) {\n        return 0.0;\n    }\n    double x = -1000.0;\n    double increment = 0.001;\n    while (x <= 1000.0) {\n        if (abs(poly(xs, x)) < 0.0001) {\n            return x;\n        }\n        x += increment;\n    }\n    return 0.0;\n}\n"}
{"task_id": "CPP/33", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            vector<int> temp = {l[i]};\n            sort(temp.begin(), temp.end());\n            result.push_back(temp[0]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/34", "generation": "#include <stdio.h>\n#include <vector>\n#include <algorithm>\n#include <set>\nusing namespace std;\n\nvector<int> unique(vector<int> l) {\n    set<int> uniqueSet;\n    for (int num : l) {\n        uniqueSet.insert(num);\n    }\n    \n    vector<int> uniqueVec(uniqueSet.begin(), uniqueSet.end());\n    sort(uniqueVec.begin(), uniqueVec.end());\n    \n    return uniqueVec;\n}\n"}
{"task_id": "CPP/35", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n    float max_num = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max_num) {\n            max_num = l[i];\n        }\n    }\n    return max_num;\n}\n"}
{"task_id": "CPP/36", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nint fizz_buzz(int n){\n    int count = 0;\n    for (int i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            string numStr = to_string(i);\n            if (numStr.find('7') != string::npos) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> result;\n    vector<float> temp;\n    \n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            temp.push_back(l[i]);\n        }\n    }\n    \n    sort(temp.begin(), temp.end());\n    \n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            result.push_back(temp[j]);\n            j++;\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/38", "generation": "#include <string>\n\nstd::string decode_cyclic(std::string s) {\n    std::string output;\n    int num = (s.length() + 2) / 3;\n    \n    for (int i = 0; i < num; i++) {\n        std::string x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x[2] + x.substr(0, 2);\n        }\n        output += x;\n    }\n    \n    return output;\n}\n"}
{"task_id": "CPP/39", "generation": "#include <stdio.h>\n#include <math.h>\n\nbool is_prime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint prime_fib(int n) {\n    int count = 0;\n    int a = 0, b = 1, c;\n    while (count < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (is_prime(c)) {\n            count++;\n        }\n    }\n    return c;\n}\n"}
{"task_id": "CPP/40", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nbool triples_sum_to_zero(vector<int> l){\n    sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        int left = i + 1;\n        int right = l.size() - 1;\n        while (left < right) {\n            int sum = l[i] + l[left] + l[right];\n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "#include <stdio.h>\nusing namespace std;\n\nint car_race_collision(int n) {\n    int collisions = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i == n - i + 1) {\n            collisions++;\n        }\n    }\n    return collisions;\n}\n"}
{"task_id": "CPP/42", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> result;\n    for (int num : l) {\n        result.push_back(num + 1);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/43", "generation": "#include<stdio.h>\n#include<vector>\n#include<unordered_set>\nusing namespace std;\n\nbool pairs_sum_to_zero(vector<int> l){\n    unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x, int base){\n    if (x == 0) {\n        return \"0\";\n    }\n    \n    string result = \"\";\n    while (x > 0) {\n        int remainder = x % base;\n        result += char(remainder + '0');\n        x = x / base;\n    }\n    \n    reverse(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float h){\n    if (a <= 0 || h <= 0) {\n        return -1; // Invalid input\n    } else {\n        float area = 0.5 * a * h;\n        return area;\n    }\n}\n"}
{"task_id": "CPP/46", "generation": "#include <stdio.h>\nusing namespace std;\n\nint fib4(int n) {\n    int fib4Arr[4] = {0, 0, 2, 0};\n    for (int i = 4; i <= n; i++) {\n        fib4Arr[i % 4] = fib4Arr[(i - 1) % 4] + fib4Arr[(i - 2) % 4] + fib4Arr[(i - 3) % 4] + fib4Arr[(i - 4) % 4];\n    }\n    return fib4Arr[n % 4];\n}\n"}
{"task_id": "CPP/47", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return l[n/2];\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.length() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "#include<stdio.h>\nusing namespace std;\nint modp(int n, int p){\n    if (n == 0) {\n        return 1;\n    }\n    int result = 1;\n    for (int i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/50", "generation": "#include <string>\n\nstd::string encode_shift(std::string s) {\n    std::string out;\n    for (char c : s) {\n        char w = ((c - 'a' + 5) % 26) + 'a';\n        out += w;\n    }\n    return out;\n}\n\nstd::string decode_shift(std::string s) {\n    std::string out;\n    for (char c : s) {\n        char w = ((c - 'a' + 26 - 5) % 26) + 'a';\n        out += w;\n    }\n    return out;\n}\n"}
{"task_id": "CPP/51", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring remove_vowels(string text){\n    string result = \"\";\n    for (char c : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/52", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nbool below_threshold(vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x, int y) {\n    return x + y;\n}\n"}
{"task_id": "CPP/54", "generation": "#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nbool same_chars(string s0, string s1) {\n    int freqS0[26] = {0};\n    int freqS1[26] = {0};\n\n    for (char c : s0) {\n        freqS0[c - 'a']++;\n    }\n\n    for (char c : s1) {\n        freqS1[c - 'a']++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        if (freqS0[i] != freqS1[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/55", "generation": "#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if (n <= 1) {\n        return n;\n    }\n    int a = 0, b = 1;\n    for (int i = 2; i <= n; i++) {\n        int temp = a;\n        a = b;\n        b = temp + b;\n    }\n    return b;\n}\n"}
{"task_id": "CPP/56", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int balance = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            balance++;\n        } else if (bracket == '>') {\n            balance--;\n            if (balance < 0) {\n                return false;\n            }\n        }\n    }\n    return balance == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    if (l.size() <= 1)\n        return true;\n\n    bool increasing = true;\n    bool decreasing = true;\n\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i - 1])\n            increasing = false;\n        if (l[i] > l[i - 1])\n            decreasing = false;\n    }\n\n    return increasing || decreasing;\n}\n"}
{"task_id": "CPP/58", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\n#include<set>\nusing namespace std;\n\nvector<int> common(vector<int> l1, vector<int> l2) {\n    set<int> set1(l1.begin(), l1.end());\n    set<int> set2(l2.begin(), l2.end());\n    \n    set<int> result;\n    for (int num : set1) {\n        if (set2.find(num) != set2.end()) {\n            result.insert(num);\n        }\n    }\n    \n    vector<int> resultVec(result.begin(), result.end());\n    sort(resultVec.begin(), resultVec.end());\n    \n    return resultVec;\n}\n"}
{"task_id": "CPP/59", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    while (n % 2 == 0) {\n        n = n / 2;\n    }\n    for (int i = 3; i <= sqrt(n); i = i + 2) {\n        while (n % i == 0) {\n            n = n / i;\n        }\n    }\n    return n;\n}\n"}
{"task_id": "CPP/60", "generation": "#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int counter = 0;\n    \n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            counter++;\n        } else if (bracket == ')') {\n            counter--;\n            if (counter < 0) {\n                return false;\n            }\n        }\n    }\n    \n    return counter == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(i * xs[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if (n == 0 || n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 1;\n    }\n    int fibfibArr[n+1] = {0};\n    fibfibArr[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        fibfibArr[i] = fibfibArr[i-1] + fibfibArr[i-2] + fibfibArr[i-3];\n    }\n    return fibfibArr[n];\n}\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = tolower(s[i]);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i == s.length() - 1)) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x, int shift){\n    string str = to_string(x);\n    int n = str.size();\n    if (shift > n) {\n        reverse(str.begin(), str.end());\n        return str;\n    } else {\n        shift = n - shift;\n        return str.substr(shift) + str.substr(0, shift);\n    }\n}\n"}
{"task_id": "CPP/66", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += c;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    int apples = 0, oranges = 0, mangoes = 0;\n    \n    // Parse the input string to extract the number of apples and oranges\n    sscanf(s.c_str(), \"%d apples and %d oranges\", &apples, &oranges);\n    \n    // Calculate the number of mango fruits\n    mangoes = n - apples - oranges;\n    \n    return mangoes;\n}\n"}
{"task_id": "CPP/68", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    int smallest_even_value = -1;\n    int smallest_even_index = -1;\n    \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && (smallest_even_value == -1 || arr[i] < smallest_even_value)) {\n            smallest_even_value = arr[i];\n            smallest_even_index = i;\n        }\n    }\n    \n    if (smallest_even_value != -1) {\n        return {smallest_even_value, smallest_even_index};\n    } else {\n        return {};\n    }\n}\n"}
{"task_id": "CPP/69", "generation": "#include<stdio.h>\n#include<vector>\n#include<unordered_map>\nusing namespace std;\n\nint search(vector<int> lst){\n    unordered_map<int, int> freqMap;\n    int greatestInteger = -1;\n\n    // Calculate frequency of each integer\n    for (int num : lst) {\n        freqMap[num]++;\n    }\n\n    // Find the greatest integer with frequency >= value\n    for (const auto& entry : freqMap) {\n        if (entry.second >= entry.first && entry.first > greatestInteger) {\n            greatestInteger = entry.first;\n        }\n    }\n\n    return greatestInteger;\n}\n"}
{"task_id": "CPP/70", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> result;\n    sort(lst.begin(), lst.end());\n    while (!lst.empty()) {\n        if (!lst.empty()) {\n            result.push_back(lst.front());\n            lst.erase(lst.begin());\n        }\n        if (!lst.empty()) {\n            result.push_back(lst.back());\n            lst.pop_back();\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float b, float c){\n    if ((a + b > c) && (a + c > b) && (b + c > a)) {\n        float s = (a + b + c) / 2;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100; // rounding to 2 decimal points\n    } else {\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nbool will_it_fly(vector<int> q, int w) {\n    bool isBalanced = true;\n    for (int i = 0; i < q.size() / 2; i++) {\n        if (q[i] != q[q.size() - i - 1]) {\n            isBalanced = false;\n            break;\n        }\n    }\n\n    int sum = 0;\n    for (int num : q) {\n        sum += num;\n    }\n\n    return isBalanced && sum <= w;\n}\n"}
{"task_id": "CPP/73", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint smallest_change(vector<int> arr){\n    int changes = 0;\n    int start = 0;\n    int end = arr.size() - 1;\n\n    while (start < end) {\n        if (arr[start] != arr[end]) {\n            changes++;\n        }\n        start++;\n        end--;\n    }\n\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int totalChars1 = 0, totalChars2 = 0;\n\n    for (string str : lst1) {\n        totalChars1 += str.length();\n    }\n\n    for (string str : lst2) {\n        totalChars2 += str.length();\n    }\n\n    if (totalChars1 < totalChars2) {\n        return lst1;\n    } else if (totalChars2 < totalChars1) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n    if (a < 30) {\n        return false;\n    }\n    int prime_numbers[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n    int count = 0;\n    for (int i = 0; i < 24; i++) {\n        for (int j = i + 1; j < 24; j++) {\n            for (int k = j + 1; k < 24; k++) {\n                if (a % prime_numbers[i] == 0 && a % prime_numbers[j] == 0 && a % prime_numbers[k] == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    if (count >= 1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x, int n) {\n    if (x <= 0 || n <= 1) {\n        return false;\n    }\n    if (x == 1) {\n        return true;\n    }\n    int power = 0;\n    while (true) {\n        int result = pow(n, power);\n        if (result == x) {\n            return true;\n        }\n        if (result > x) {\n            return false;\n        }\n        power++;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/77", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    if (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    for (int i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/78", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nbool isPrime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint hex_key(string num) {\n    int count = 0;\n    for (char c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            int decimal_value = stoi(string(1, c), nullptr, 16);\n            if (isPrime(decimal_value)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring decimal_to_binary(int decimal){\n    string binary = \"db\";\n    while (decimal > 0) {\n        binary += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    reverse(binary.begin() + 2, binary.end());\n    binary += \"db\";\n    return binary;\n}\n"}
{"task_id": "CPP/80", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if (s.length() < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length() - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letter_grades;\n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "#include<stdio.h>\n#include<string>\n#include<math.h>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool prime_length(string str) {\n    int length = str.length();\n    if (isPrime(length)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"}
{"task_id": "CPP/83", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint starts_one_ends(int n){\n    int count = 9 * pow(10, n-1) + pow(10, n-1) - 1;\n    return count;\n}\n"}
{"task_id": "CPP/84", "generation": "#include <stdio.h>\n#include <string>\nusing namespace std;\n\nstring solve(int N) {\n    int sum = 0;\n    \n    // Convert N to binary\n    string binary = bitset<16>(N).to_string();\n    \n    // Calculate the sum of binary digits\n    for (char digit : binary) {\n        if (digit == '1') {\n            sum++;\n        }\n    }\n    \n    // Convert the sum to binary\n    string sumBinary = bitset<16>(sum).to_string();\n    \n    return sumBinary;\n}\n"}
{"task_id": "CPP/85", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "#include <stdio.h>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    stringstream ss(s);\n    string word, result;\n    \n    while (ss >> word) {\n        sort(word.begin(), word.end());\n        result += word + \" \";\n    }\n    \n    // Remove the extra space at the end\n    result.pop_back();\n    \n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0];\n    });\n    for (auto& row : result) {\n        sort(row.begin(), row.end(), greater<int>());\n    }\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    if (array.empty()) {\n        return {};\n    }\n    int sum = array.front() + array.back();\n    if (sum % 2 == 1) {\n        sort(array.begin(), array.end());\n    } else {\n        sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\n"}
{"task_id": "CPP/89", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring encrypt(string s){\n    string result = \"\";\n    for (char c : s) {\n        if (isalpha(c)) {\n            char new_char = c + 4;\n            if (islower(c) && new_char > 'z') {\n                new_char = 'a' + (new_char - 'z' - 1);\n            } else if (isupper(c) && new_char > 'Z') {\n                new_char = 'A' + (new_char - 'Z' - 1);\n            }\n            result += new_char;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/90", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint next_smallest(vector<int> lst){\n    if (lst.empty()) {\n        return -1; // None\n    }\n    sort(lst.begin(), lst.end());\n    int count = 1;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n            count++;\n        }\n        if (count == 2) {\n            return lst[i];\n        }\n    }\n    return -1; // None\n}\n"}
{"task_id": "CPP/91", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int boredomCount = 0;\n    string currentSentence = \"\";\n    \n    for (char c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n            if (!currentSentence.empty() && currentSentence[0] == 'I') {\n                boredomCount++;\n            }\n            currentSentence = \"\";\n        } else {\n            currentSentence += c;\n        }\n    }\n    \n    return boredomCount;\n}\n"}
{"task_id": "CPP/92", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a, float b, float c){\n    if (a == int(a) && b == int(b) && c == int(c)) {\n        if (a == b + c || b == a + c || c == a + b) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring encode(string message){\n    string encodedMessage = \"\";\n    for (char c : message) {\n        if (isalpha(c)) {\n            if (tolower(c) == 'a' || tolower(c) == 'e' || tolower(c) == 'i' || tolower(c) == 'o' || tolower(c) == 'u') {\n                encodedMessage += char(isupper(c) ? toupper((c - 'A' + 2) % 26 + 'A') : tolower((c - 'a' + 2) % 26 + 'a'));\n            } else {\n                encodedMessage += isupper(c) ? tolower(c) : toupper(c);\n            }\n        } else {\n            encodedMessage += c;\n        }\n    }\n    return encodedMessage;\n}\n"}
{"task_id": "CPP/94", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<cmath>\nusing namespace std;\n\nbool is_prime(int num) {\n    if (num < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint skjkasdkd(vector<int> lst) {\n    int largest_prime = -1;\n    for (int num : lst) {\n        if (is_prime(num) && num > largest_prime) {\n            largest_prime = num;\n        }\n    }\n    if (largest_prime == -1) {\n        return 0;\n    }\n    int sum_digits = 0;\n    while (largest_prime != 0) {\n        sum_digits += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    return sum_digits;\n}\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\n\nbool check_dict_case(map<string,string> dict){\n    if (dict.empty()) {\n        return false;\n    }\n    for (const auto& entry : dict) {\n        string key = entry.first;\n        bool isLower = true;\n        bool isUpper = true;\n        for (char c : key) {\n            if (!islower(c)) {\n                isLower = false;\n            }\n            if (!isupper(c)) {\n                isUpper = false;\n            }\n        }\n        if (!isLower && !isUpper) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n\nbool isPrime(int num) {\n    if (num < 2) return false;\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nvector<int> count_up_to(int n) {\n    vector<int> result;\n    if (n <= 1) return result;\n    \n    for (int i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            result.push_back(i);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a, int b){\n    int unitA = abs(a) % 10;\n    int unitB = abs(b) % 10;\n    return unitA * unitB;\n}\n"}
{"task_id": "CPP/98", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n\nint closest_integer(string value){\n    double num = stod(value);\n    int floorNum = floor(num);\n    int ceilNum = ceil(num);\n    \n    double diffFloor = abs(num - floorNum);\n    double diffCeil = abs(num - ceilNum);\n    \n    if (diffCeil < diffFloor) {\n        return ceilNum;\n    } else if (diffFloor < diffCeil) {\n        return floorNum;\n    } else {\n        if (num >= 0) {\n            return ceilNum;\n        } else {\n            return floorNum;\n        }\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> make_a_pile(int n){\n    vector<int> stonesVector;\n    int stones = n;\n    for (int i = 0; i < n; i++) {\n        stonesVector.push_back(stones);\n        stones += (stones % 2 == 0) ? 1 : 2;\n    }\n    return stonesVector;\n}\n"}
{"task_id": "CPP/101", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n    \n    for (char c : s) {\n        if (isalpha(c)) {\n            word += c;\n        } else if (c == ' ' || c == ',') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n    }\n    \n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    \n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "#include<stdio.h>\nusing namespace std;\nint choose_num(int x, int y){\n    if (x % 2 != 0) {\n        x++;\n    }\n    if (y % 2 != 0) {\n        y--;\n    }\n    if (x > y) {\n        return -1;\n    }\n    return y;\n}\n"}
{"task_id": "CPP/103", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n\nstring rounded_avg(int n, int m) {\n    if (n > m) {\n        return \"-1\";\n    }\n\n    int sum = 0;\n    int count = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n        count++;\n    }\n\n    int average = round((double)sum / count);\n    string binary = bitset<32>(average).to_string();\n    size_t pos = binary.find('1');\n    return (pos == string::npos) ? \"0\" : binary.substr(pos);\n}\n"}
{"task_id": "CPP/104", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for (int num : x) {\n        bool isEvenDigitPresent = false;\n        int temp = num;\n        while (temp > 0) {\n            int digit = temp % 10;\n            if (digit % 2 == 0) {\n                isEvenDigitPresent = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if (!isEvenDigitPresent) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n\nvector<string> by_length(vector<int> arr){\n    map<int, string> numToString = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n\n    vector<int> filtered;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered.push_back(num);\n        }\n    }\n\n    sort(filtered.begin(), filtered.end());\n\n    reverse(filtered.begin(), filtered.end());\n\n    vector<string> result;\n    for (int num : filtered) {\n        result.push_back(numToString[num]);\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "#include <stdio.h>\n#include <vector>\nusing namespace std;\n\nvector<int> f(int n) {\n    vector<int> result(n);\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            int factorial = 1;\n            for (int j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result[i - 1] = factorial;\n        } else {\n            int sum = 0;\n            for (int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result[i - 1] = sum;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nbool isPalindrome(int num) {\n    string str = to_string(num);\n    int left = 0, right = str.size() - 1;\n    while (left < right) {\n        if (str[left] != str[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\nvector<int> even_odd_palindrome(int n) {\n    int evenCount = 0, oddCount = 0;\n    for (int i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/108", "generation": "#include <stdio.h>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nint count_nums(vector<int> n) {\n    int count = 0;\n    for (int num : n) {\n        int sum = 0;\n        int temp = abs(num);\n        while (temp != 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if (arr.empty()) {\n        return true;\n    }\n    int min_element = *min_element(arr.begin(), arr.end());\n    int min_index = find(arr.begin(), arr.end(), min_element) - arr.begin();\n    if (is_sorted(arr.begin(), arr.end())) {\n        return true;\n    }\n    int shifts_required = min_index;\n    for (int i = 0; i < arr.size() - 1; i++) {\n        if (arr[(i + shifts_required) % arr.size()] > arr[(i + shifts_required + 1) % arr.size()]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<unordered_map>\nusing namespace std;\n\nstring exchange(vector<int> lst1, vector<int> lst2){\n    unordered_map<int, int> freq;\n    int evenCount = 0, oddCount = 0;\n    \n    for (int num : lst1) {\n        if (num % 2 == 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    \n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    \n    if (evenCount >= lst1.size()) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/111", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\n\nmap<char, int> histogram(string test) {\n    map<char, int> charCount;\n    for (char c : test) {\n        if (c != ' ') {\n            charCount[c]++;\n        }\n    }\n\n    int maxCount = 0;\n    for (const auto& pair : charCount) {\n        maxCount = max(maxCount, pair.second);\n    }\n\n    map<char, int> result;\n    for (const auto& pair : charCount) {\n        if (pair.second == maxCount) {\n            result[pair.first] = pair.second;\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> reverse_delete(string s, string c) {\n    string result = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    \n    string original = result;\n    reverse(result.begin(), result.end());\n    \n    return {original, original == result ? \"True\" : \"False\"};\n}\n"}
{"task_id": "CPP/113", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst){\n    vector<string> result;\n    for (string str : lst) {\n        int odd_count = 0;\n        for (char c : str) {\n            if (isdigit(c) && (c - '0') % 2 != 0) {\n                odd_count++;\n            }\n        }\n        string modified_str = \"the number of odd elements \" + to_string(odd_count) + \"n the str\" + to_string(odd_count) + \"ng \" + str + \" of the \" + to_string(odd_count) + \"nput.\";\n        result.push_back(modified_str);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    long long currentSum = nums[0];\n\n    for (int i = 1; i < nums.size(); i++) {\n        currentSum = max(nums[i], currentSum + nums[i]);\n        minSum = min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n"}
{"task_id": "CPP/115", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int total_count = 0;\n    for (vector<int> well : grid) {\n        int water_level = 0;\n        for (int water : well) {\n            water_level += water;\n        }\n        if (water_level > capacity) {\n            int count = ceil((double)water_level / capacity);\n            total_count += count;\n        }\n    }\n    return total_count;\n}\n"}
{"task_id": "CPP/116", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint countOnes(int num) {\n    int count = 0;\n    while (num > 0) {\n        count += num & 1;\n        num >>= 1;\n    }\n    return count;\n}\n\nbool customComparator(int a, int b) {\n    int onesA = countOnes(a);\n    int onesB = countOnes(b);\n    \n    if (onesA == onesB) {\n        return a < b;\n    }\n    return onesA < onesB;\n}\n\nvector<int> sort_array(vector<int> arr) {\n    sort(arr.begin(), arr.end(), customComparator);\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nbool isConsonant(char c) {\n    c = tolower(c);\n    return !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') && isalpha(c);\n}\n\nint countConsonants(string word) {\n    int count = 0;\n    for (char c : word) {\n        if (isConsonant(c)) {\n            count++;\n        }\n    }\n    return count;\n}\n\nvector<string> select_words(string s, int n) {\n    vector<string> result;\n    string word = \"\";\n    for (char c : s) {\n        if (c == ' ') {\n            if (!word.empty() && countConsonants(word) == n) {\n                result.push_back(word);\n            }\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty() && countConsonants(word) == n) {\n        result.push_back(word);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring get_closest_vowel(string word){\n    string result = \"\";\n    for (int i = word.size() - 2; i > 0; i--) {\n        if (word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' &&\n            isalpha(word[i - 1]) && isalpha(word[i + 1])) {\n            result = word[i];\n            break;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    int open_count_1 = 0;\n    int close_count_1 = 0;\n    int open_count_2 = 0;\n    int close_count_2 = 0;\n    \n    for (char c : lst[0]) {\n        if (c == '(') open_count_1++;\n        else close_count_1++;\n    }\n    \n    for (char c : lst[1]) {\n        if (c == '(') open_count_2++;\n        else close_count_2++;\n    }\n    \n    if (close_count_1 > open_count_1 || close_count_2 > open_count_2) {\n        return \"No\";\n    }\n    \n    if (open_count_1 == close_count_1 && open_count_2 == close_count_2) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n"}
{"task_id": "CPP/120", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> maximum(vector<int> arr, int k) {\n    sort(arr.begin(), arr.end(), greater<int>());\n    vector<int> result(arr.begin(), arr.begin() + k);\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint add_elements(vector<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> get_odd_collatz(int n){\n    vector<int> oddNumbers;\n    oddNumbers.push_back(n);\n\n    while (n != 1) {\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n            oddNumbers.push_back(n);\n        }\n    }\n\n    vector<int> result;\n    for (int num : oddNumbers) {\n        if (num % 2 != 0) {\n            result.push_back(num);\n        }\n    }\n\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/124", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    if (date.empty())\n        return false;\n    \n    int month, day, year;\n    sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year);\n    \n    if (month < 1 || month > 12)\n        return false;\n    \n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31)\n            return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30)\n            return false;\n    } else if (month == 2) {\n        if (day < 1 || day > 29)\n            return false;\n    }\n    \n    if (date.length() != 10 || date[2] != '-' || date[5] != '-')\n        return false;\n    \n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> split_words(string txt){\n    vector<string> result;\n    string word = \"\";\n    \n    // Check for whitespaces\n    if (txt.find(' ') != string::npos) {\n        size_t pos = 0;\n        while ((pos = txt.find(' ')) != string::npos) {\n            word = txt.substr(0, pos);\n            result.push_back(word);\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    }\n    // Check for commas\n    else if (txt.find(',') != string::npos) {\n        size_t pos = 0;\n        while ((pos = txt.find(',')) != string::npos) {\n            word = txt.substr(0, pos);\n            result.push_back(word);\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    }\n    // Count lowercase letters with odd order in the alphabet\n    else {\n        int count = 0;\n        for (char c : txt) {\n            if (islower(c) && (c - 'a') % 2 == 1) {\n                count++;\n            }\n        }\n        result.push_back(to_string(count));\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/126", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\n#include<map>\nusing namespace std;\n\nbool is_sorted(vector<int> lst){\n    map<int, int> countMap;\n    int prev = INT_MIN;\n    \n    for (int num : lst) {\n        if (num < prev) {\n            return false;\n        }\n        \n        countMap[num]++;\n        if (countMap[num] > 2) {\n            return false;\n        }\n        \n        prev = num;\n    }\n    \n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<cmath>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    \n    if (start > end) return \"NO\";\n    \n    int length = end - start;\n    if (length < 2) return \"NO\";\n    \n    if (isPrime(length)) return \"YES\";\n    else return \"NO\";\n}\n"}
{"task_id": "CPP/128", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\nint prod_signs(vector<int> arr){\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    int productOfSigns = 1;\n    int sumOfMagnitudes = 0;\n\n    for (int num : arr) {\n        sumOfMagnitudes += abs(num);\n        if (num > 0) {\n            productOfSigns *= 1;\n        } else if (num < 0) {\n            productOfSigns *= -1;\n        }\n    }\n\n    return productOfSigns * sumOfMagnitudes;\n}\n"}
{"task_id": "CPP/129", "generation": "#include <vector>\n#include <algorithm>\n\nvoid backtrack(vector<vector<int>>& grid, int k, int row, int col, vector<int>& path, vector<int>& minPath, vector<vector<bool>>& visited) {\n    if (path.size() == k) {\n        if (minPath.empty() || path < minPath) {\n            minPath = path;\n        }\n        return;\n    }\n\n    visited[row][col] = true;\n    path.push_back(grid[row][col]);\n\n    int n = grid.size();\n    vector<pair<int, int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\n    for (const auto& dir : directions) {\n        int newRow = row + dir.first;\n        int newCol = col + dir.second;\n        if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n && !visited[newRow][newCol]) {\n            backtrack(grid, k, newRow, newCol, path, minPath, visited);\n        }\n    }\n\n    visited[row][col] = false;\n    path.pop_back();\n}\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int n = grid.size();\n    vector<int> path, minPath;\n    vector<vector<bool>> visited(n, vector<bool>(n, false));\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            backtrack(grid, k, i, j, path, minPath, visited);\n        }\n    }\n\n    return minPath;\n}\n"}
{"task_id": "CPP/130", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> tribonacci = {};\n    if (n == 0) {\n        tribonacci.push_back(0);\n        return tribonacci;\n    }\n    if (n == 1) {\n        tribonacci.push_back(1);\n        return tribonacci;\n    }\n    if (n == 2) {\n        tribonacci.push_back(1);\n        tribonacci.push_back(1);\n        return tribonacci;\n    }\n    if (n == 3) {\n        tribonacci.push_back(1);\n        tribonacci.push_back(1);\n        tribonacci.push_back(1);\n        return tribonacci;\n    }\n    tribonacci.push_back(1);\n    tribonacci.push_back(1);\n    tribonacci.push_back(1);\n    for (int i = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci.push_back(1 + i / 2);\n        } else {\n            tribonacci.push_back(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n        }\n    }\n    return tribonacci;\n}\n"}
{"task_id": "CPP/131", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int product = 1;\n    string numStr = to_string(n);\n    for (char c : numStr) {\n        int digit = c - '0';\n        if (digit % 2 != 0) {\n            product *= digit;\n        }\n    }\n    if (product == 1) {\n        return 0;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "#include <stack>\n#include <string>\n\nbool is_nested(std::string str) {\n    std::stack<char> brackets;\n    for (char c : str) {\n        if (c == '[') {\n            brackets.push(c);\n        } else if (c == ']') {\n            if (brackets.empty()) {\n                return false;\n            }\n            brackets.pop();\n        }\n    }\n    return !brackets.empty();\n}\n"}
{"task_id": "CPP/133", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for (float num : lst) {\n        int rounded = ceil(num);\n        sum += rounded * rounded;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.empty())\n        return false;\n    char last_char = txt.back();\n    if (isalpha(last_char) && (txt.size() == 1 || txt[txt.size() - 2] == ' '))\n        return true;\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int resultIndex = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            resultIndex = i;\n        }\n    }\n    return resultIndex;\n}\n"}
{"task_id": "CPP/136", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> largest_smallest_integers(vector<int> lst){\n    int largest_negative = INT_MIN;\n    int smallest_positive = INT_MAX;\n    \n    for (int element : lst) {\n        if (element < 0 && element > largest_negative) {\n            largest_negative = element;\n        } else if (element > 0 && element < smallest_positive) {\n            smallest_positive = element;\n        }\n    }\n    \n    return {largest_negative == INT_MIN ? 0 : largest_negative, smallest_positive == INT_MAX ? 0 : smallest_positive};\n}\n"}
{"task_id": "CPP/137", "generation": "#include <stdio.h>\n#include <string>\n#include <algorithm>\n#include <boost/any.hpp>\nusing namespace std;\n\nboost::any compare_one(boost::any a, boost::any b) {\n    if (a.type() == b.type()) {\n        if (a.type() == typeid(int)) {\n            if (boost::any_cast<int>(a) > boost::any_cast<int>(b)) {\n                return a;\n            } else if (boost::any_cast<int>(a) < boost::any_cast<int>(b)) {\n                return b;\n            } else {\n                return \"None\";\n            }\n        } else if (a.type() == typeid(float)) {\n            if (boost::any_cast<float>(a) > boost::any_cast<float>(b)) {\n                return a;\n            } else if (boost::any_cast<float>(a) < boost::any_cast<float>(b)) {\n                return b;\n            } else {\n                return \"None\";\n            }\n        } else if (a.type() == typeid(std::string)) {\n            std::string strA = boost::any_cast<std::string>(a);\n            std::string strB = boost::any_cast<std::string>(b);\n            strA.erase(std::remove(strA.begin(), strA.end(), ','), strA.end());\n            strB.erase(std::remove(strB.begin(), strB.end(), ','), strB.end());\n            if (stof(strA) > stof(strB)) {\n                return a;\n            } else if (stof(strA) < stof(strB)) {\n                return b;\n            } else {\n                return \"None\";\n            }\n        }\n    }\n    return \"None\";\n}\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if (n < 8) {\n        return false;\n    }\n    if (n % 4 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"}
{"task_id": "CPP/139", "generation": "#include<stdio.h>\nusing namespace std;\n\nlong long special_factorial(int n){\n    long long result = 1;\n    for (int i = n; i > 0; i--) {\n        long long factorial = 1;\n        for (int j = i; j > 0; j--) {\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string result = \"\";\n    int consecutiveSpaces = 0;\n\n    for (char c : text) {\n        if (c == ' ') {\n            consecutiveSpaces++;\n            if (consecutiveSpaces > 2) {\n                result.pop_back(); // remove the last space\n                result.pop_back(); // remove the previous space\n                result += \"-\";\n            }\n        } else {\n            if (consecutiveSpaces > 2) {\n                result += \"-\";\n            } else {\n                result += \"_\";\n            }\n            result += c;\n            consecutiveSpaces = 0;\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring file_name_check(string file_name){\n    int digitCount = 0, dotCount = 0;\n    bool validExtension = false, validStart = false;\n\n    for (char c : file_name) {\n        if (isdigit(c)) {\n            digitCount++;\n        } else if (c == '.') {\n            dotCount++;\n        } else if (c == '.' && dotCount == 1) {\n            validExtension = (file_name.substr(file_name.find_last_of('.') + 1) == \"txt\" || \n                              file_name.substr(file_name.find_last_of('.') + 1) == \"exe\" || \n                              file_name.substr(file_name.find_last_of('.') + 1) == \"dll\");\n        } else if (isalpha(c) && !validStart && dotCount == 0) {\n            validStart = true;\n        }\n    }\n\n    if (digitCount <= 3 && dotCount == 1 && validExtension && validStart) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n"}
{"task_id": "CPP/142", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i]; // Square the entry\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i]; // Cube the entry\n        } else {\n            sum += lst[i]; // Add the entry as is\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "#include <stdio.h>\n#include <string>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    string result = \"\";\n    vector<string> words;\n    string word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            words.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    words.push_back(word);\n\n    for (string w : words) {\n        if (isPrime(w.length())) {\n            result += w + \" \";\n        }\n    }\n\n    if (!result.empty()) {\n        result.pop_back(); // Remove the extra space at the end\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x, string n){\n    int x_num = stoi(x.substr(0, x.find('/')));\n    int x_denom = stoi(x.substr(x.find('/') + 1));\n    \n    int n_num = stoi(n.substr(0, n.find('/')));\n    int n_denom = stoi(n.substr(n.find('/') + 1));\n    \n    int result_num = x_num * n_num;\n    int result_denom = x_denom * n_denom;\n    \n    return result_denom % result_num == 0;\n}\n"}
{"task_id": "CPP/145", "generation": "#include <stdio.h>\n#include <vector>\n#include <algorithm>\n\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num != 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nbool compareBySumOfDigits(const int& a, const int& b) {\n    int sumA = sumOfDigits(a);\n    int sumB = sumOfDigits(b);\n    if (sumA == sumB) {\n        return a < b;\n    }\n    return sumA < sumB;\n}\n\nstd::vector<int> order_by_points(std::vector<int> nums) {\n    std::sort(nums.begin(), nums.end(), compareBySumOfDigits);\n    return nums;\n}\n"}
{"task_id": "CPP/146", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for (int num : nums) {\n        if (num > 10) {\n            string numStr = to_string(num);\n            char firstDigit = numStr[0];\n            char lastDigit = numStr[numStr.size() - 1];\n            int first = firstDigit - '0';\n            int last = lastDigit - '0';\n            if ((first % 2 != 0) && (last % 2 != 0)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint get_max_triples(int n){\n    int count = 0;\n    vector<int> a(n);\n    \n    for (int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    \n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    \n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\n    std::map<std::string, int> planetOrder = {\n        {\"Mercury\", 1},\n        {\"Venus\", 2},\n        {\"Earth\", 3},\n        {\"Mars\", 4},\n        {\"Jupiter\", 5},\n        {\"Saturn\", 6},\n        {\"Uranus\", 7},\n        {\"Neptune\", 8}\n    };\n\n    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n\n    if (planetOrder.find(planet1) == planetOrder.end() || planetOrder.find(planet2) == planetOrder.end()) {\n        return result;\n    }\n\n    int start = std::min(planetOrder[planet1], planetOrder[planet2]);\n    int end = std::max(planetOrder[planet1], planetOrder[planet2]);\n\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i - 1]);\n    }\n\n    std::sort(result.begin(), result.end(), [&](const std::string& a, const std::string& b) {\n        return planetOrder[a] < planetOrder[b];\n    });\n\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> result;\n    for (const string& str : lst) {\n        if (str.length() % 2 == 0) {\n            result.push_back(str);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "#include <stdio.h>\n#include <math.h>\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] == (int)lst[i] && (int)lst[i] % 2 != 0) {\n            sum += (long long)pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\nvector<int> compare(vector<int> game, vector<int> guess){\n    vector<int> diff;\n    for (int i = 0; i < game.size(); i++) {\n        diff.push_back(abs(game[i] - guess[i]));\n    }\n    return diff;\n}\n"}
{"task_id": "CPP/153", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nint calculateStrength(string extension) {\n    int CAP = 0, SM = 0;\n    for (char c : extension) {\n        if (isupper(c)) CAP++;\n        else if (islower(c)) SM++;\n    }\n    return CAP - SM;\n}\n\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest_extension = \"\";\n    int max_strength = INT_MIN;\n    for (string extension : extensions) {\n        int strength = calculateStrength(extension);\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a, string b){\n    string concat_b = b + b;\n    return concat_b.find(a) != string::npos;\n}\n"}
{"task_id": "CPP/155", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    int evenCount = 0, oddCount = 0;\n    string numStr = to_string(abs(num));\n    \n    for (char digit : numStr) {\n        int n = digit - '0';\n        if (n % 2 == 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    \n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/156", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring int_to_mini_roman(int number) {\n    vector<pair<int, string>> romanMap = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n\n    string result = \"\";\n    for (const auto& pair : romanMap) {\n        while (number >= pair.first) {\n            result += pair.second;\n            number -= pair.first;\n        }\n    }\n\n    // Convert the result to lowercase\n    transform(result.begin(), result.end(), result.begin(), ::tolower);\n\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a, float b, float c){\n    // Check if the sides can form a triangle\n    if (a + b > c && a + c > b && b + c > a) {\n        // Check if it is a right-angled triangle\n        if (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/158", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <unordered_set>\nusing namespace std;\n\nstring find_max(vector<string> words) {\n    int maxUniqueChars = 0;\n    string maxWord = \"\";\n\n    for (const string& word : words) {\n        unordered_set<char> uniqueChars;\n        for (char c : word) {\n            uniqueChars.insert(c);\n        }\n        if (uniqueChars.size() > maxUniqueChars || (uniqueChars.size() == maxUniqueChars && word < maxWord)) {\n            maxUniqueChars = uniqueChars.size();\n            maxWord = word;\n        }\n    }\n\n    return maxWord;\n}\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number, int need, int remaining){\n    int total_carrots_eaten = number + need;\n    int carrots_left = remaining - total_carrots_eaten;\n    if (carrots_left < 0) {\n        carrots_left = 0;\n    }\n    return {total_carrots_eaten, carrots_left};\n}\n"}
{"task_id": "CPP/160", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nint do_algebra(vector<string> operato, vector<int> operand){\n    int result = operand[0];\n    for (int i = 0; i < operato.size(); i++) {\n        if (operato[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (operato[i] == \"//\") {\n            result /= operand[i + 1];\n        } else if (operato[i] == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring solve(string s){\n    string result = \"\";\n    bool hasLetters = false;\n\n    for (char c : s) {\n        if (isalpha(c)) {\n            c = islower(c) ? toupper(c) : tolower(c);\n            hasLetters = true;\n        }\n        result += c;\n    }\n\n    if (!hasLetters) {\n        reverse(result.begin(), result.end());\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "#include <stdio.h>\n#include <string>\n#include <openssl/md5.h>\n#include <sstream>\n#include <iomanip>\n\nstd::string string_to_md5(std::string text) {\n    if (text.empty()) {\n        return \"None\";\n    }\n\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((const unsigned char*)text.c_str(), text.length(), digest);\n\n    std::stringstream ss;\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        ss << std::hex << std::setw(2) << std::setfill('0') << (int)digest[i];\n    }\n\n    return ss.str();\n}\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a, int b) {\n    vector<int> evenDigits;\n    for (int i = a; i <= b; i++) {\n        if (i % 2 == 0 && i < 10) {\n            evenDigits.push_back(i);\n        }\n    }\n    return evenDigits;\n}\n"}
