{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (abs(numbers[i]-numbers[j])<threshold)\n            return true;\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> groups;\n    int count = 0;\n    string currentGroup = \"\";\n    for (char c : paren_string) {\n        if (c == '(') {\n            count++;\n            if (count > 1) {\n                currentGroup += c;\n            }\n        } else if (c == ')') {\n            count--;\n            if (count > 0) {\n                currentGroup += c;\n            } else if (count == 0) {\n                groups.push_back(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n"}
{"task_id": "CPP/2", "generation": "float truncate_number(float number){\n    int integerPart = (int)number;\n    float decimalPart = number - integerPart;\n    return decimalPart;\n}\n"}
{"task_id": "CPP/3", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "float mean_absolute_deviation(vector<float> numbers){\n    float sum = 0;\n    for (float num : numbers) {\n        sum += num;\n    }\n    float mean = sum / numbers.size();\n    \n    float deviation_sum = 0;\n    for (float num : numbers) {\n        deviation_sum += abs(num - mean);\n    }\n    \n    return deviation_sum / numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){\n    vector<int> result;\n    if(numbers.empty()) {\n        return result;\n    }\n    for(int i = 0; i < numbers.size() - 1; i++) {\n        result.push_back(numbers[i]);\n        result.push_back(delimeter);\n    }\n    result.push_back(numbers[numbers.size() - 1]);\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> depths;\n    int current_depth = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n            current_depth++;\n            depths.push_back(current_depth);\n        } else if (c == ')') {\n            depths.push_back(current_depth);\n            current_depth--;\n        }\n    }\n    vector<int> max_depths;\n    int max_depth = 0;\n    for (int depth : depths) {\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n        if (depth == 0) {\n            max_depths.push_back(max_depth);\n            max_depth = 0;\n        }\n    }\n    return max_depths;\n}\n"}
{"task_id": "CPP/7", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    vector<int> result = {0, 1};\n    for (int num : numbers) {\n        result[0] += num;\n        result[1] *= num;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/9", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> result;\n    int maxNum = INT_MIN;\n    for (int i = 0; i < numbers.size(); i++) {\n        maxNum = max(maxNum, numbers[i]);\n        result.push_back(maxNum);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    string rev_str(str.rbegin(), str.rend());\n    for (int i = 0; i < str.size(); i++) {\n        if (is_palindrome(str.substr(i))) {\n            return str + rev_str.substr(0, i);\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/11", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a, string b){\n    string result = \"\";\n    for(int i = 0; i < a.size(); i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if (strings.empty()) {\n        return \"None\";\n    }\n    string longestStr = strings[0];\n    for (const string& str : strings) {\n        if (str.length() > longestStr.length() || (str.length() == longestStr.length() && str < longestStr)) {\n            longestStr = str;\n        }\n    }\n    return longestStr;\n}\n"}
{"task_id": "CPP/13", "generation": "#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n"}
{"task_id": "CPP/14", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> prefixes;\n    string prefix = \"\";\n    for (char c : str) {\n        prefix += c;\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string result = \"\";\n    for (int i = 0; i <= n; i++) {\n        result += to_string(i) + \" \";\n    }\n    result.pop_back(); // Remove the extra space at the end\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    sort(str.begin(), str.end());\n    int count = 0;\n    for (int i = 0; i < str.size(); i++) {\n        if (i == 0 || str[i] != str[i - 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/17", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){\n    vector<int> beats;\n    int length = music_string.length();\n    for (int i = 0; i < length; i++) {\n        if (music_string[i] == 'o') {\n            beats.push_back(4);\n        } else if (music_string[i] == '|') {\n            if (music_string[i - 1] == 'o') {\n                beats.back() = 2;\n            } else {\n                beats.back() = 1;\n            }\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str, string substring){\n    if (substring.empty()) {\n        return 0;\n    }\n    int count = 0;\n    size_t pos = 0;\n    while ((pos = str.find(substring, pos)) != string::npos) {\n        count++;\n        pos += 1;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<string, int> numMap = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    map<int, string> revNumMap;\n    for (auto it = numMap.begin(); it != numMap.end(); ++it) {\n        revNumMap[it->second] = it->first;\n    }\n    \n    string result = \"\";\n    string temp = \"\";\n    for (char c : numbers) {\n        if (c == ' ') {\n            result += revNumMap[numMap[temp]] + \" \";\n            temp = \"\";\n        } else {\n            temp += c;\n        }\n    }\n    result += revNumMap[numMap[temp]];\n    \n    return result;\n}\n"}
{"task_id": "CPP/20", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n"}
{"task_id": "CPP/21", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){\n    float min_num = *min_element(numbers.begin(), numbers.end());\n    float max_num = *max_element(numbers.begin(), numbers.end());\n    vector<float> rescaled;\n    for (float num : numbers) {\n        float scaled = (num - min_num) / (max_num - min_num);\n        rescaled.push_back(scaled);\n    }\n    return rescaled;\n}\n"}
{"task_id": "CPP/22", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for (const auto& val : values) {\n        try {\n            int num = boost::any_cast<int>(val);\n            result.push_back(num);\n        } catch(const boost::bad_any_cast&) {\n            continue;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    return str.length();\n}\n"}
{"task_id": "CPP/24", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    for (int i = n-1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return -1; // If no divisor found\n}\n"}
{"task_id": "CPP/25", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> factors;\n    for (int i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (count(numbers.begin(), numbers.end(), numbers[i]) == 1) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    for (char &c : str) {\n        if (islower(c)) {\n            c = toupper(c);\n        } else if (isupper(c)) {\n            c = tolower(c);\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for (const string& str : strings) {\n        result += str;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.substr(0, prefix.size()) == prefix) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> res;\n    for (float num : l) {\n        if (num > 0) {\n            res.push_back(num);\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/31", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only one zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    double zero = 0.0;\n    if (xs.size() % 2 != 0) {\n        return zero; // Return 0 if the number of coefficients is odd\n    }\n    for (int i = 0; i < xs.size(); i++) {\n        if (xs[i] != 0) {\n            zero = i; // Find the largest non-zero coefficient\n        }\n    }\n    return -xs[0] / xs[1]; // Return the zero point for a linear polynomial\n}\n"}
{"task_id": "CPP/33", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> l_prime = l;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            int start = i;\n            int end = min(i + 3, (int)l.size());\n            sort(l_prime.begin() + start, l_prime.begin() + end);\n        }\n    }\n    return l_prime;\n}\n"}
{"task_id": "CPP/34", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}\n"}
{"task_id": "CPP/35", "generation": "float max_element(vector<float> l){\n"}
{"task_id": "CPP/36", "generation": "#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count = 0;\n    for (int i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            int num = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n                    count++;\n                }\n                num /= 10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> sorted_even;\n    vector<float> even_values;\n    \n    // Extract even values from the input vector\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            even_values.push_back(l[i]);\n        }\n    }\n    \n    // Sort the even values\n    sort(even_values.begin(), even_values.end());\n    \n    // Create the output vector with odd values unchanged and even values sorted\n    int even_index = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            sorted_even.push_back(even_values[even_index]);\n            even_index++;\n        } else {\n            sorted_even.push_back(l[i]);\n        }\n    }\n    \n    return sorted_even;\n}\n"}
{"task_id": "CPP/38", "generation": "#include <string>\nusing namespace std;\n\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    int i;\n    for (i = 0; i * 3 < l; i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x = s.substr(i * 3, 3);\n        if (x.length() == 3) \n            x = x.substr(1) + x[0];\n        output = output + x;\n    }\n    return output;\n}\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\n}\n"}
{"task_id": "CPP/39", "generation": "#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return 3;\n    }\n    int count = 2;\n    int a = 2, b = 3, c;\n    while (count < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        count++;\n        bool isPrime = true;\n        for (int i = 2; i * i <= c; i++) {\n            if (c % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            count++;\n        }\n    }\n    return c;\n}\n"}
{"task_id": "CPP/40", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    return n*(n-1)/2;\n}\n"}
{"task_id": "CPP/42", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    for (int i = 0; i < l.size(); i++) {\n        l[i]++;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n        if (l[i]+l[j]==0)\n            return true;\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x, int base){\n"}
{"task_id": "CPP/45", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float h){\n    return 0.5 * a * h;\n}\n"}
{"task_id": "CPP/46", "generation": "#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if (n == 0 || n == 1)\n        return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n    \n    int a = 0, b = 0, c = 2, d = 0, e;\n    for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\n"}
{"task_id": "CPP/47", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return l[n/2];\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.size() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    if (n == 0) {\n        return 1;\n    }\n    int result = 1;\n    for (int i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/50", "generation": "#include <string>\nusing namespace std;\n\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++)\n    {\n        int w = ((int)s[i] + 5 - (int)'a') % 26 + (int)'a';   \n        out = out + (char)w;\n    }\n    return out;\n}\n\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++)\n    {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';   \n        out = out + (char)w;\n    }\n    return out;\n}\n"}
{"task_id": "CPP/51", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string vowels = \"aeiouAEIOU\";\n    text.erase(remove_if(text.begin(), text.end(), [&](char c) {\n        return vowels.find(c) != string::npos;\n    }), text.end());\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int> l, int t){\n"}
{"task_id": "CPP/53", "generation": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x + y;\n}\n"}
{"task_id": "CPP/54", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0, string s1){\n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    return s0 == s1;\n}\n"}
{"task_id": "CPP/55", "generation": "#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if (n <= 1)\n        return n;\n    int a = 0, b = 1, c;\n    for (int i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n"}
{"task_id": "CPP/56", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            count++;\n        } else if (bracket == '>') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n"}
{"task_id": "CPP/58", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1, vector<int> l2){\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    \n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(result));\n    \n    result.erase(unique(result.begin(), result.end()), result.end());\n    \n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int factor = 2;\n    while (factor * factor <= n) {\n        if (n % factor == 0) {\n            n /= factor;\n        } else {\n            factor++;\n        }\n    }\n    return n;\n}\n"}
{"task_id": "CPP/60", "generation": "int sum_to_n(int n){\n    return n * (n + 1) / 2;\n}\n"}
{"task_id": "CPP/61", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            count++;\n        } else if (bracket == ')') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if (n == 0 || n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    int a = 0, b = 0, c = 1, d = 0;\n    for (int i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    transform(s.begin(), s.end(), s.begin(), ::tolower);\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            count++;\n        } else if (i == s.size() - 1 && s[i] == 'y') {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x, int shift){\n"}
{"task_id": "CPP/66", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += c;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s, int n){\n    int apples = 0, oranges = 0;\n    sscanf(s.c_str(), \"%d apples and %d oranges\", &apples, &oranges);\n    return n - apples - oranges;\n}\n"}
{"task_id": "CPP/68", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> result = {};\n    int smallestEven = INT_MAX;\n    int smallestIndex = INT_MAX;\n    \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < smallestEven) {\n            smallestEven = arr[i];\n            smallestIndex = i;\n        } else if (arr[i] % 2 == 0 && arr[i] == smallestEven && i < smallestIndex) {\n            smallestIndex = i;\n        }\n    }\n    \n    if (smallestEven != INT_MAX && smallestIndex != INT_MAX) {\n        result.push_back(smallestEven);\n        result.push_back(smallestIndex);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/69", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int res = -1;\n    for (int num : lst) {\n        int freq = 0;\n        for (int i : lst) {\n            if (i == num) {\n                freq++;\n            }\n        }\n        if (freq >= num && num > res) {\n            res = num;\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/70", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    sort(lst.begin(), lst.end());\n    vector<int> result;\n    int left = 0, right = lst.size() - 1;\n    while (left <= right) {\n        if (left == right) {\n            result.push_back(lst[left]);\n            break;\n        }\n        result.push_back(lst[left]);\n        result.push_back(lst[right]);\n        left++;\n        right--;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float b, float c){\n"}
{"task_id": "CPP/72", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    for (int i = 0; i < q.size() / 2; i++) {\n        if (q[i] != q[q.size() - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/73", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int changes = 0;\n    for (int i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n            changes++;\n        }\n    }\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1, vector<string> lst2){\n    int totalChars1 = 0;\n    int totalChars2 = 0;\n    \n    for (const string& str : lst1) {\n        totalChars1 += str.size();\n    }\n    \n    for (const string& str : lst2) {\n        totalChars2 += str.size();\n    }\n    \n    if (totalChars1 < totalChars2 || (totalChars1 == totalChars2 && lst1.size() <= lst2.size())) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n    if(a < 30) return false;\n    int primes[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n    for(int i = 0; i < 24; i++){\n        for(int j = i; j < 24; j++){\n            for(int k = j; k < 24; k++){\n                if(primes[i] * primes[j] * primes[k] == a){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x, int n) {\n    if (x == 1) {\n        return true;\n    }\n    int power = 0;\n    while (pow(n, power) < x) {\n        power++;\n    }\n    return pow(n, power) == x;\n}\n"}
{"task_id": "CPP/77", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    int cubeRoot = cbrt(a);\n    return cubeRoot * cubeRoot * cubeRoot == a;\n}\n"}
{"task_id": "CPP/78", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    int count = 0;\n    for (char c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string binary = \"db\";\n    if (decimal == 0) {\n        binary += \"0\";\n    } else {\n        while (decimal > 0) {\n            binary = ((decimal % 2) == 0 ? \"0\" : \"1\") + binary;\n            decimal /= 2;\n        }\n    }\n    return binary + \"db\";\n}\n"}
{"task_id": "CPP/80", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if (s.length() < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length() - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letterGrades;\n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letterGrades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letterGrades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letterGrades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letterGrades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letterGrades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letterGrades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letterGrades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letterGrades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letterGrades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letterGrades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letterGrades.push_back(\"D\");\n        } else if (gpa >= 0.0) {\n            letterGrades.push_back(\"D-\");\n        } else {\n            letterGrades.push_back(\"E\");\n        }\n    }\n    return letterGrades;\n}\n"}
{"task_id": "CPP/82", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int n = str.size();\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    int count = 0;\n    if (n == 1) {\n        return 2; // Numbers 1 and 10 are n-digit positive integers that start or end with 1\n    }\n    count = 2 * 9 * pow(10, n-2); // Numbers starting with 1 + Numbers ending with 1\n    return count;\n}\n"}
{"task_id": "CPP/84", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    int sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    return bitset<32>(sum).to_string();\n}\n"}
{"task_id": "CPP/85", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string result = \"\";\n    string word = \"\";\n    for (char c : s) {\n        if (c == ' ') {\n            sort(word.begin(), word.end());\n            result += word + ' ';\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        sort(word.begin(), word.end());\n        result += word;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    \n    // Sort by rows in ascending order\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0];\n    });\n    \n    // Sort by columns in descending order\n    for (int i = 0; i < result.size(); i++) {\n        for (int j = i + 1; j < result.size(); j++) {\n            if (result[i][0] == result[j][0] && result[i][1] < result[j][1]) {\n                swap(result[i], result[j]);\n            }\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    vector<int> sortedArray = array;\n    if (sortedArray.empty()) {\n        return sortedArray;\n    }\n    int sum = sortedArray[0] + sortedArray[sortedArray.size() - 1];\n    if (sum % 2 == 0) {\n        sort(sortedArray.begin(), sortedArray.end(), greater<int>());\n    } else {\n        sort(sortedArray.begin(), sortedArray.end());\n    }\n    return sortedArray;\n}\n"}
{"task_id": "CPP/89", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string encrypted = \"\";\n    for (char c : s) {\n        if (isalpha(c)) {\n            char base = islower(c) ? 'a' : 'A';\n            char encryptedChar = base + (c - base + 2 * 2) % 26;\n            encrypted += encryptedChar;\n        } else {\n            encrypted += c;\n        }\n    }\n    return encrypted;\n}\n"}
{"task_id": "CPP/90", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    if (lst.size() < 2) {\n        return -1;\n    }\n    sort(lst.begin(), lst.end());\n    int smallest = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > smallest) {\n            return lst[i];\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/91", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int count = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if (S[i] == 'I' && (i == 0 || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!')) {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a, float b, float c){\n    if (a == (b + c) || b == (a + c) || c == (a + b)) {\n        if (a == (int)a && b == (int)b && c == (int)c) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    for (char &c : message) {\n        if (isalpha(c)) {\n            c = islower(c) ? toupper(c) : tolower(c); // Swap case\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                c = c + 2; // Replace vowels with letter 2 places ahead\n                if (c > 'z') {\n                    c = c - 26; // Wrap around if needed\n                }\n            }\n        }\n    }\n    return message;\n}\n"}
{"task_id": "CPP/94", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int maxPrime = 0;\n    for (int num : lst) {\n        if (num <= 1) {\n            continue;\n        }\n        bool isPrime = true;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime && num > maxPrime) {\n            maxPrime = num;\n        }\n    }\n    int sumOfDigits = 0;\n    while (maxPrime > 0) {\n        sumOfDigits += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sumOfDigits;\n}\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    if (dict.empty()) {\n        return false;\n    }\n    for (const auto& entry : dict) {\n        string key = entry.first;\n        for (char c : key) {\n            if (!islower(c) && !isupper(c)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nbool isPrime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvector<int> count_up_to(int n) {\n    vector<int> primes;\n    for (int i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a, int b){\n    int unitA = abs(a) % 10;\n    int unitB = abs(b) % 10;\n    return unitA * unitB;\n}\n"}
{"task_id": "CPP/98", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s[i];\n        if (isupper(c) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    double num = stod(value);\n    int lower = floor(num);\n    int upper = ceil(num);\n    if (num - lower < upper - num) {\n        return lower;\n    } else {\n        return upper;\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> stones;\n    stones.push_back(n);\n    for (int i = 1; i < n; i++) {\n        if (n % 2 == 0) {\n            n += 2;\n        } else {\n            n += 1;\n        }\n        stones.push_back(n);\n    }\n    return stones;\n}\n"}
{"task_id": "CPP/101", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n    for (char c : s) {\n        if (c == ' ' || c == ',') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "#include<stdio.h>\nusing namespace std;\nint choose_num(int x, int y){\n"}
{"task_id": "CPP/103", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n, int m) {\n    if (n > m) {\n        return \"-1\";\n    }\n    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = round((double)sum / (m - n + 1));\n    return bitset<32>(avg).to_string().substr(32 - (int)log2(avg) - 1);\n}\n"}
{"task_id": "CPP/104", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for (int num : x) {\n        bool hasEvenDigit = false;\n        int temp = num;\n        while (temp > 0) {\n            int digit = temp % 10;\n            if (digit % 2 == 0) {\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if (!hasEvenDigit) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    vector<int> sorted_arr;\n    vector<string> result;\n    map<int, string> num_to_word = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, \n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n    \n    // Sort the integers between 1 and 9 inclusive\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            sorted_arr.push_back(num);\n        }\n    }\n    sort(sorted_arr.begin(), sorted_arr.end());\n    \n    // Reverse the sorted array and replace digits with corresponding names\n    for (int i = sorted_arr.size() - 1; i >= 0; i--) {\n        result.push_back(num_to_word[sorted_arr[i]]);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> result;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            int fact = 1;\n            for (int j = 1; j <= i; j++) {\n                fact *= j;\n            }\n            result.push_back(fact);\n        } else {\n            int sum = 0;\n            for (int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> result = {0, 0};\n    for (int i = 1; i <= n; i++) {\n        string num = to_string(i);\n        string revNum = num;\n        reverse(revNum.begin(), revNum.end());\n        if (num == revNum) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for (int num : n) {\n        int sum = 0;\n        int temp = abs(num);\n        while (temp != 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if (arr.empty()) {\n        return true;\n    }\n    \n    int n = arr.size();\n    int minIndex = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] < arr[minIndex]) {\n            minIndex = i;\n        }\n    }\n    \n    for (int i = 0; i < n; i++) {\n        int expected = (arr[(i + minIndex) % n] + n - arr[minIndex]) % n;\n        if (arr[i] != expected) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1, vector<int> lst2){\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            for (int i = 0; i < lst2.size(); i++) {\n                if (lst2[i] % 2 == 0) {\n                    swap(lst1[0], lst2[i]);\n                    break;\n                }\n            }\n        }\n    }\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char,int> result;\n    for (char c : test) {\n        if (c != ' ') {\n            result[c]++;\n        }\n    }\n    int maxCount = 0;\n    for (const auto& pair : result) {\n        maxCount = max(maxCount, pair.second);\n    }\n    map<char,int> output;\n    for (const auto& pair : result) {\n        if (pair.second == maxCount) {\n            output[pair.first] = pair.second;\n        }\n    }\n    return output;\n}\n"}
{"task_id": "CPP/112", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    string result = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    string reversed = result;\n    reverse(reversed.begin(), reversed.end());\n    bool isPalindrome = (result == reversed);\n    return {result, isPalindrome ? \"True\" : \"False\"};\n}\n"}
{"task_id": "CPP/113", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    vector<string> result;\n    for (string str : lst) {\n        int oddCount = 0;\n        for (char c : str) {\n            if ((c - '0') % 2 != 0) {\n                oddCount++;\n            }\n        }\n        string output = \"the number of odd elements \" + to_string(oddCount) + \"n the str\" + to_string(oddCount) + \"ng \" + str + \" of the \" + to_string(oddCount) + \"nput.\";\n        result.push_back(output);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    long long currentSum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        currentSum += nums[i];\n        minSum = min(minSum, currentSum);\n        if (currentSum > 0) {\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n"}
{"task_id": "CPP/115", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int numFillOperations = 0;\n    for (int j = 0; j < grid[0].size(); j++) {\n        int waterLevel = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            if (grid[i][j] == 1) {\n                if (waterLevel > 0) {\n                    int bucketsNeeded = waterLevel / capacity;\n                    if (waterLevel % capacity != 0) {\n                        bucketsNeeded++;\n                    }\n                    numFillOperations += bucketsNeeded;\n                    waterLevel = 0;\n                }\n            } else {\n                waterLevel++;\n            }\n        }\n        if (waterLevel > 0) {\n            int bucketsNeeded = waterLevel / capacity;\n            if (waterLevel % capacity != 0) {\n                bucketsNeeded++;\n            }\n            numFillOperations += bucketsNeeded;\n        }\n    }\n    return numFillOperations;\n}\n"}
{"task_id": "CPP/116", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        int countA = __builtin_popcount(a);\n        int countB = __builtin_popcount(b);\n        if (countA == countB) {\n            return a < b;\n        }\n        return countA < countB;\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    vector<string> words;\n    string currentWord = \"\";\n    int consonantCount = 0;\n    for (char c : s) {\n        if (c == ' ') {\n            if (consonantCount == n) {\n                words.push_back(currentWord);\n            }\n            currentWord = \"\";\n            consonantCount = 0;\n        } else {\n            if (isalpha(c) && !strchr(\"aeiouAEIOU\", c)) {\n                consonantCount++;\n            }\n            currentWord += c;\n        }\n    }\n    if (consonantCount == n) {\n        words.push_back(currentWord);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/118", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    string vowels = \"aeiouAEIOU\";\n    int n = word.size();\n    for (int i = n - 2; i > 0; i--) {\n        if (vowels.find(word[i]) != string::npos && !isalpha(word[i - 1]) && !isalpha(word[i + 1])) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    int balance = 0;\n    for (const string& s : lst) {\n        for (char c : s) {\n            if (c == '(') {\n                balance++;\n            } else {\n                if (balance == 0) {\n                    return \"No\";\n                }\n                balance--;\n            }\n        }\n    }\n    return (balance == 0) ? \"Yes\" : \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr, int k) {\n"}
{"task_id": "CPP/121", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> result;\n    for (int i = 1; i <= n; i++) {\n        int num = i;\n        while (num != 1) {\n            if (num % 2 != 0) {\n                result.push_back(num);\n            }\n            if (num % 2 == 0) {\n                num = num / 2;\n            } else {\n                num = 3 * num + 1;\n            }\n        }\n        result.push_back(1);\n    }\n    sort(result.begin(), result.end());\n    result.erase(unique(result.begin(), result.end()), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/124", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    if (date.empty()) {\n        return false;\n    }\n    \n    int month, day, year;\n    if (sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year) != 3) {\n        return false;\n    }\n    \n    if (month < 1 || month > 12) {\n        return false;\n    }\n    \n    if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)) {\n        return false;\n    } else if ((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)) {\n        return false;\n    } else if (month == 2) {\n        if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        } else {\n            if (day < 1 || day > 28) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n    vector<string> words;\n    string word = \"\";\n    bool hasWhitespace = false;\n    bool hasComma = false;\n    \n    for (char c : txt) {\n        if (c == ' ') {\n            hasWhitespace = true;\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else if (c == ',') {\n            hasComma = true;\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    \n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    \n    if (words.empty()) {\n        int oddLowercaseCount = 0;\n        for (char c : txt) {\n            if (islower(c) && (c - 'a') % 2 == 1) {\n                oddLowercaseCount++;\n            }\n        }\n        words.push_back(to_string(oddLowercaseCount));\n    }\n    \n    return words;\n}\n"}
{"task_id": "CPP/126", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    int count[1001] = {0};\n    for (int num : lst) {\n        count[num]++;\n        if (count[num] > 2) {\n            return false;\n        }\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection(vector<int> interval1, vector<int> interval2){\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    \n    if (start > end) {\n        return \"NO\";\n    }\n    \n    int length = end - start;\n    if (isPrime(length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/128", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if (arr.empty()) {\n        return -32768;\n    }\n    \n    int product = 1;\n    int sum = 0;\n    \n    for (int num : arr) {\n        if (num > 0) {\n            sum += num;\n            product *= 1;\n        } else if (num < 0) {\n            sum += abs(num);\n            product *= -1;\n        }\n    }\n    \n    return sum * product;\n}\n"}
{"task_id": "CPP/129", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int n = grid.size();\n    int m = grid[0].size();\n    int x = 0, y = 0;\n    vector<int> path;\n    for (int i = 0; i < k; i++) {\n        path.push_back(grid[x][y]);\n        if ((x + y) % 2 == 0) {\n            if (y == m - 1) {\n                x++;\n            } else if (x == 0) {\n                y++;\n            } else {\n                x--;\n                y++;\n            }\n        } else {\n            if (x == n - 1) {\n                y++;\n            } else if (y == 0) {\n                x++;\n            } else {\n                x++;\n                y--;\n            }\n        }\n    }\n    return path;\n}\n"}
{"task_id": "CPP/130", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> tribonacci(n + 1);\n    tribonacci[0] = 3;\n    if (n > 0) tribonacci[1] = 1;\n    if (n > 1) tribonacci[2] = 2;\n    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci[i] = 1 + i / 2;\n        } else {\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n        }\n    }\n    return tribonacci;\n}\n"}
{"task_id": "CPP/131", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int product = 1;\n    string numStr = to_string(n);\n    for (char c : numStr) {\n        int digit = c - '0';\n        if (digit % 2 != 0) {\n            product *= digit;\n        }\n    }\n    if (product == 1) {\n        return 0;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n    int count = 0;\n    for (char c : str) {\n        if (c == '[') {\n            count++;\n        } else if (c == ']' && count > 0) {\n            count--;\n        }\n    }\n    return count > 0;\n}\n"}
{"task_id": "CPP/133", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for (float num : lst) {\n        int rounded = ceil(num);\n        sum += rounded * rounded;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.empty()) {\n        return false;\n    }\n    char lastChar = txt.back();\n    if (isalpha(lastChar)) {\n        size_t found = txt.find_last_of(\" \");\n        if (found == string::npos || found == txt.length() - 1) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int index = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            index = i - 1;\n        }\n    }\n    return index;\n}\n"}
{"task_id": "CPP/136", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    int largest_negative = 0;\n    int smallest_positive = 0;\n    \n    for (int num : lst) {\n        if (num < 0 && num < largest_negative) {\n            largest_negative = num;\n        } else if (num > 0 && (num < smallest_positive || smallest_positive == 0)) {\n            smallest_positive = num;\n        }\n    }\n    \n    return {largest_negative, smallest_positive};\n}\n"}
{"task_id": "CPP/137", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a, boost::any b){\n    if (a.type() == typeid(int) && b.type() == typeid(int)) {\n        int intA = boost::any_cast<int>(a);\n        int intB = boost::any_cast<int>(b);\n        if (intA > intB) {\n            return intA;\n        } else if (intB > intA) {\n            return intB;\n        } else {\n            return \"None\";\n        }\n    } else if (a.type() == typeid(float) && b.type() == typeid(float)) {\n        float floatA = boost::any_cast<float>(a);\n        float floatB = boost::any_cast<float>(b);\n        if (floatA > floatB) {\n            return floatA;\n        } else if (floatB > floatA) {\n            return floatB;\n        } else {\n            return \"None\";\n        }\n    } else if (a.type() == typeid(std::string) && b.type() == typeid(std::string)) {\n        std::string strA = boost::any_cast<std::string>(a);\n        std::string strB = boost::any_cast<std::string>(b);\n        if (strA > strB) {\n            return strA;\n        } else if (strB > strA) {\n            return strB;\n        } else {\n            return \"None\";\n        }\n    } else {\n        return \"None\";\n    }\n}\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n"}
{"task_id": "CPP/139", "generation": "#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long result = 1;\n    for (int i = 1; i <= n; i++) {\n        long long factorial = 1;\n        for (int j = 1; j <= i; j++) {\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    int count = 0;\n    string result = \"\";\n    for (char c : text) {\n        if (c == ' ') {\n            count++;\n            if (count > 2) {\n                result.pop_back();\n                result.pop_back();\n                result += \"-\";\n            } else {\n                result += \"_\";\n            }\n        } else {\n            count = 0;\n            result += c;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    int digits = 0;\n    int dots = 0;\n    int latinLetter = 0;\n    string extension = \"\";\n    \n    for (char c : file_name) {\n        if (c >= '0' && c <= '9') {\n            digits++;\n        } else if (c == '.') {\n            dots++;\n        } else if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n            latinLetter++;\n        }\n    }\n    \n    size_t dotIndex = file_name.find('.');\n    if (dotIndex != string::npos) {\n        extension = file_name.substr(dotIndex + 1);\n    }\n    \n    if (digits <= 3 && dots == 1 && latinLetter > 0 && extension == \"txt\" || extension == \"exe\" || extension == \"dll\") {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n"}
{"task_id": "CPP/142", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "#include<stdio.h>\n#include<string>\n#include<cmath>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    vector<string> words;\n    string word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n\n    string result = \"\";\n    for (const string& w : words) {\n        if (isPrime(w.size())) {\n            result += w + \" \";\n        }\n    }\n    if (!result.empty()) {\n        result.pop_back(); // Remove the extra space at the end\n    }\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x, string n){\n"}
{"task_id": "CPP/145", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool compare(int a, int b) {\n    int sumA = 0, sumB = 0;\n    string strA = to_string(a);\n    string strB = to_string(b);\n    for (char c : strA) {\n        if (c == '-') {\n            sumA -= 1;\n        } else {\n            sumA += c - '0';\n        }\n    }\n    for (char c : strB) {\n        if (c == '-') {\n            sumB -= 1;\n        } else {\n            sumB += c - '0';\n        }\n    }\n    if (sumA == sumB) {\n        return find(nums.begin(), nums.end(), a) < find(nums.begin(), nums.end(), b);\n    }\n    return sumA < sumB;\n}\n\nvector<int> order_by_points(vector<int> nums){\n    sort(nums.begin(), nums.end(), compare);\n    return nums;\n}\n"}
{"task_id": "CPP/146", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for (int num : nums) {\n        string numStr = to_string(abs(num));\n        if (numStr.front() % 2 != 0 && numStr.back() % 2 != 0 && num > 10) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_max_triples(int n){\n"}
{"task_id": "CPP/148", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1, string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    \n    int index1 = -1, index2 = -1;\n    \n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n            index1 = i;\n        }\n        if (planets[i] == planet2) {\n            index2 = i;\n        }\n    }\n    \n    if (index1 == -1 || index2 == -1) {\n        return result;\n    }\n    \n    int start = min(index1, index2);\n    int end = max(index1, index2);\n    \n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> result;\n    for (const string& word : lst) {\n        if (word.length() % 2 == 0) {\n            result.push_back(word);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    if (n <= 1) {\n        return y;\n    }\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n"}
{"task_id": "CPP/151", "generation": "long long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for (float num : lst) {\n        if (num > 0 && fmod(num, 2) == 1) {\n            sum += static_cast<long long>(pow(num, 2));\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for(int i=0; i<game.size(); i++){\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongestExtension = \"\";\n    int maxStrength = INT_MIN;\n    \n    for (const string& extension : extensions) {\n        int CAP = 0, SM = 0;\n        for (char c : extension) {\n            if (isupper(c)) {\n                CAP++;\n            } else if (islower(c)) {\n                SM++;\n            }\n        }\n        \n        int strength = CAP - SM;\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongestExtension;\n}\n"}
{"task_id": "CPP/154", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a, string b){\n    if(a.length() != b.length()){\n        return false;\n    }\n    string doubleA = a + a;\n    return doubleA.find(b) != string::npos;\n}\n"}
{"task_id": "CPP/155", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> count = {0, 0};\n    string numStr = to_string(abs(num));\n    for (char c : numStr) {\n        if ((c - '0') % 2 == 0) {\n            count[0]++;\n        } else {\n            count[1]++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/156", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_roman(int number){\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string roman = \"\";\n    for (int i = 0; i < values.size(); i++) {\n        while (number >= values[i]) {\n            number -= values[i];\n            roman += numerals[i];\n        }\n    }\n    return roman;\n}\n"}
{"task_id": "CPP/157", "generation": "bool right_angle_triangle(float a, float b, float c){\n    // Sort the sides in non-decreasing order\n    if (a > c) {\n        swap(a, c);\n    }\n    if (b > c) {\n        swap(b, c);\n    }\n    \n    // Check if it forms a right-angled triangle using Pythagoras theorem\n    return (c * c == a * a + b * b);\n}\n"}
{"task_id": "CPP/158", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    string result = \"\";\n    int maxUniqueChars = 0;\n    \n    for (const string& word : words) {\n        int uniqueChars = set<char>(word.begin(), word.end()).size();\n        if (uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word < result)) {\n            maxUniqueChars = uniqueChars;\n            result = word;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number, int need, int remaining){\n"}
{"task_id": "CPP/160", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nint do_algebra(vector<string> operato, vector<int> operand){\n    int result = operand[0];\n    for (int i = 0; i < operato.size(); i++) {\n        if (operato[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (operato[i] == \"//\") {\n            result /= operand[i + 1];\n        } else if (operato[i] == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    int n = s.size();\n    int i = 0, j = n - 1;\n    while (i < j) {\n        if (isalpha(s[i]) && isalpha(s[j])) {\n            s[i] = islower(s[i]) ? toupper(s[i]) : tolower(s[i]);\n            s[j] = islower(s[j]) ? toupper(s[j]) : tolower(s[j]);\n        }\n        i++;\n        j--;\n    }\n    if (i == j && !isalpha(s[i])) {\n        return s;\n    }\n    reverse(s.begin(), s.end());\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    if (text.empty()) {\n        return \"None\";\n    }\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    return string(mdString);\n}\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a, int b){\n    vector<int> result;\n    if (a > b) {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    for (int i = a; i <= b; i++) {\n        if (i % 2 == 0 && i < 10) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (abs(numbers[i]-numbers[j])<threshold)\n            return true;\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> groups;\n    int count = 0;\n    string currentGroup = \"\";\n    \n    for (char c : paren_string) {\n        if (c == '(') {\n            count++;\n            if (count > 1) {\n                currentGroup += c;\n            }\n        } else if (c == ')') {\n            count--;\n            if (count > 0) {\n                currentGroup += c;\n            } else if (count == 0) {\n                groups.push_back(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    \n    return groups;\n}\n"}
{"task_id": "CPP/2", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    int integerPart = (int)number;\n    float decimalPart = number - integerPart;\n    return decimalPart;\n}\n"}
{"task_id": "CPP/3", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0;\n    for (float num : numbers) {\n        sum += num;\n    }\n    float mean = sum / numbers.size();\n    \n    float deviation_sum = 0;\n    for (float num : numbers) {\n        deviation_sum += abs(num - mean);\n    }\n    \n    return deviation_sum / numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> result;\n    if (numbers.size() <= 1) {\n        return numbers;\n    }\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        result.push_back(numbers[i]);\n        result.push_back(delimeter);\n    }\n    result.push_back(numbers[numbers.size() - 1]);\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> depths;\n    int currentDepth = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n            currentDepth++;\n            depths.push_back(currentDepth);\n        } else if (c == ')') {\n            depths.push_back(currentDepth);\n            currentDepth--;\n        }\n    }\n    vector<int> maxDepths;\n    int maxDepth = 0;\n    for (int depth : depths) {\n        if (depth > maxDepth) {\n            maxDepth = depth;\n        }\n        if (depth == 0) {\n            maxDepths.push_back(maxDepth);\n            maxDepth = 0;\n        }\n    }\n    return maxDepths;\n}\n"}
{"task_id": "CPP/7", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> result;\n    int maxNum = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n        maxNum = max(maxNum, numbers[i]);\n        result.push_back(maxNum);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    string rev_str = string(str.rbegin(), str.rend());\n    for (int i = 0; i < str.size(); i++) {\n        if (is_palindrome(str.substr(i))) {\n            return str + rev_str.substr(0, str.size() - i);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/11", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a, string b){\n"}
{"task_id": "CPP/12", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if (strings.empty()) {\n        return \"\";\n    }\n    string longestStr = strings[0];\n    for (const string& str : strings) {\n        if (str.length() > longestStr.length() || (str.length() == longestStr.length() && str < longestStr)) {\n            longestStr = str;\n        }\n    }\n    return longestStr;\n}\n"}
{"task_id": "CPP/13", "generation": "#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n"}
{"task_id": "CPP/14", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> prefixes;\n    string prefix = \"\";\n    for (char c : str) {\n        prefix += c;\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string result = \"\";\n    for (int i = 0; i <= n; i++) {\n        result += to_string(i);\n        if (i < n) {\n            result += \" \";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    sort(str.begin(), str.end());\n    int count = 0;\n    for (int i = 0; i < str.size(); i++) {\n        if (i == 0 || str[i] != str[i - 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/17", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){\n    vector<int> beats;\n    for (int i = 0; i < music_string.size(); i++) {\n        if (music_string[i] == 'o') {\n            beats.push_back(4);\n        } else if (music_string[i] == '|') {\n            if (music_string[i - 1] == 'o') {\n                beats.back() = 2;\n            } else {\n                beats.back() = 1;\n            }\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str, string substring){\n    int count = 0;\n    size_t pos = 0;\n    while ((pos = str.find(substring, pos)) != string::npos) {\n        count++;\n        pos += 1;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<string, int> numMap = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    \n    vector<string> numStrings;\n    string currentNum = \"\";\n    for (char c : numbers) {\n        if (c == ' ') {\n            if (!currentNum.empty()) {\n                numStrings.push_back(currentNum);\n                currentNum = \"\";\n            }\n        } else {\n            currentNum += c;\n        }\n    }\n    if (!currentNum.empty()) {\n        numStrings.push_back(currentNum);\n    }\n    \n    sort(numStrings.begin(), numStrings.end(), [&numMap](const string& a, const string& b) {\n        return numMap[a] < numMap[b];\n    });\n    \n    string sortedNumbers = \"\";\n    for (const string& num : numStrings) {\n        sortedNumbers += num + \" \";\n    }\n    sortedNumbers.pop_back(); // Remove the extra space at the end\n    return sortedNumbers;\n}\n"}
{"task_id": "CPP/20", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n"}
{"task_id": "CPP/21", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){\n    float min_num = *min_element(numbers.begin(), numbers.end());\n    float max_num = *max_element(numbers.begin(), numbers.end());\n    vector<float> rescaled;\n    for (float num : numbers) {\n        float scaled = (num - min_num) / (max_num - min_num);\n        rescaled.push_back(scaled);\n    }\n    return rescaled;\n}\n"}
{"task_id": "CPP/22", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\n#include<typeinfo>\n#include<algorithm>\n#include<set>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for (const auto& val : values) {\n        if (val.type() == typeid(int)) {\n            result.push_back(boost::any_cast<int>(val));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    return str.length();\n}\n"}
{"task_id": "CPP/24", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    for (int i = n-1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return -1; // If no divisor found\n}\n"}
{"task_id": "CPP/25", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> factors;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (count(numbers.begin(), numbers.end(), numbers[i]) == 1) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    for (int i = 0; i < str.length(); i++) {\n        if (islower(str[i])) {\n            str[i] = toupper(str[i]);\n        } else if (isupper(str[i])) {\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for (const string& str : strings) {\n        result += str;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(prefix) == 0) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> positiveNumbers;\n    for (float num : l) {\n        if (num > 0) {\n            positiveNumbers.push_back(num);\n        }\n    }\n    return positiveNumbers;\n}\n"}
{"task_id": "CPP/31", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n <= 1) {\n        return false;\n    }\n    for (long long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only one zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    double zero = 0.0;\n    if (xs.size() % 2 != 0) {\n        return zero; // Return 0 if the number of coefficients is odd\n    }\n    for (int i = 0; i < xs.size(); i++) {\n        if (xs[i] != 0) {\n            zero = -xs[i] / xs[xs.size() - 1]; // Calculate the zero point\n            break;\n        }\n    }\n    return zero;\n}\n"}
{"task_id": "CPP/33", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> l_prime = l;\n    for (int i = 0; i < l.size(); i++) {\n        if ((i + 1) % 3 == 0) {\n            vector<int> temp;\n            for (int j = i; j < l.size(); j += 3) {\n                temp.push_back(l[j]);\n            }\n            sort(temp.begin(), temp.end());\n            int index = 0;\n            for (int j = i; j < l.size(); j += 3) {\n                l_prime[j] = temp[index];\n                index++;\n            }\n        }\n    }\n    return l_prime;\n}\n"}
{"task_id": "CPP/34", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}\n"}
{"task_id": "CPP/35", "generation": "float max_element(vector<float> l){\n"}
{"task_id": "CPP/36", "generation": "int fizz_buzz(int n){\n    int count = 0;\n    for (int i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            int num = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n                    count++;\n                }\n                num /= 10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> l_prime = l;\n    vector<float> even_values;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            even_values.push_back(l[i]);\n        }\n    }\n    sort(even_values.begin(), even_values.end());\n    int even_index = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            l_prime[i] = even_values[even_index];\n            even_index++;\n        }\n    }\n    return l_prime;\n}\n"}
{"task_id": "CPP/38", "generation": "#include <string>\nusing namespace std;\n\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    int i;\n    for (i = 0; i * 3 < l; i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x = s.substr(i * 3, 3);\n        if (x.length() == 3) \n            x = x.substr(1) + x[0];\n        output = output + x;\n    }\n    return output;\n}\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\n    // Add your code here to decode the cyclic encoded string\n}\n"}
{"task_id": "CPP/39", "generation": "#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    int a = 1, b = 1, c, count = 2;\n    while (count < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (isPrime(c)) {\n            count++;\n        }\n    }\n    return b;\n}\n"}
{"task_id": "CPP/40", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    return n*(n-1)/2;\n}\n"}
{"task_id": "CPP/42", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    for (int i = 0; i < l.size(); i++) {\n        l[i]++;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n        if (l[i]+l[j]==0)\n            return true;\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x, int base){\n"}
{"task_id": "CPP/45", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float h){\n    return 0.5 * a * h;\n}\n"}
{"task_id": "CPP/46", "generation": "#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if (n == 0 || n == 1)\n        return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n    \n    int a = 0, b = 0, c = 2, d = 0, e;\n    for (int i = 4; i <= n; ++i) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\n"}
{"task_id": "CPP/47", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return l[n/2];\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.size() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "#include<stdio.h>\nusing namespace std;\nint modp(int n, int p){\n    if (p == 1) {\n        return 0;\n    }\n    int result = 1;\n    n = n % p;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            result = (result * n) % p;\n        }\n        n = n * n;\n        n = n % p;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/50", "generation": "#include <string>\nusing namespace std;\n\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++)\n    {\n        int w = ((int)s[i] + 5 - (int)'a') % 26 + (int)'a';   \n        out = out + (char)w;\n    }\n    return out;\n}\n\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++)\n    {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';   \n        out = out + (char)w;\n    }\n    return out;\n}\n"}
{"task_id": "CPP/51", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string vowels = \"aeiouAEIOU\";\n    text.erase(remove_if(text.begin(), text.end(), [&](char c) {\n        return vowels.find(c) != string::npos;\n    }), text.end());\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int> l, int t) {\n"}
{"task_id": "CPP/53", "generation": "int add(int x, int y){\n    return x + y;\n}\n"}
{"task_id": "CPP/54", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0, string s1) {\n"}
{"task_id": "CPP/55", "generation": "#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if (n <= 1)\n        return n;\n    int a = 0, b = 1, c;\n    for (int i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n"}
{"task_id": "CPP/56", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            count++;\n        } else if (bracket == '>') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n"}
{"task_id": "CPP/58", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1, vector<int> l2) {\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    \n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            if (result.empty() || result.back() != l1[i]) {\n                result.push_back(l1[i]);\n            }\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int factor = 2;\n    while (n > 1) {\n        if (n % factor == 0) {\n            n /= factor;\n        } else {\n            factor++;\n        }\n    }\n    return factor;\n}\n"}
{"task_id": "CPP/60", "generation": "int sum_to_n(int n){\n    return n * (n + 1) / 2;\n}\n"}
{"task_id": "CPP/61", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            count++;\n        } else if (bracket == ')') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result = {};\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if (n == 0 || n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    int a = 0, b = 0, c = 1, d;\n    for (int i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    transform(s.begin(), s.end(), s.begin(), ::tolower);\n    int count = 0;\n    for(char c : s){\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n            count++;\n        }\n    }\n    if(s.back() == 'y'){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x, int shift) {\n"}
{"task_id": "CPP/66", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += c;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s, int n) {\n"}
{"task_id": "CPP/68", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> result = {};\n    int smallestEven = INT_MAX;\n    int smallestIndex = INT_MAX;\n    \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < smallestEven) {\n            smallestEven = arr[i];\n            smallestIndex = i;\n        } else if (arr[i] % 2 == 0 && arr[i] == smallestEven && i < smallestIndex) {\n            smallestIndex = i;\n        }\n    }\n    \n    if (smallestEven != INT_MAX) {\n        result.push_back(smallestEven);\n        result.push_back(smallestIndex);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/69", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int res = -1;\n    for (int num : lst) {\n        int freq = 0;\n        for (int i : lst) {\n            if (i == num) {\n                freq++;\n            }\n        }\n        if (freq >= num && num > res) {\n            res = num;\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/70", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    sort(lst.begin(), lst.end());\n    vector<int> result;\n    int left = 0, right = lst.size() - 1;\n    while (left <= right) {\n        if (left == right) {\n            result.push_back(lst[left]);\n            break;\n        }\n        result.push_back(lst[left]);\n        result.push_back(lst[right]);\n        left++;\n        right--;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "float triangle_area(float a, float b, float c){\n    if (a + b > c && a + c > b && b + c > a) {\n        float s = (a + b + c) / 2;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100;\n    } else {\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    for (int i = 0; i < q.size() / 2; i++) {\n        if (q[i] != q[q.size() - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/73", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int changes = 0;\n    for (int i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - 1 - i]) {\n            changes++;\n        }\n    }\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    \n    for (const string& str : lst1) {\n        total_chars_lst1 += str.length();\n    }\n    \n    for (const string& str : lst2) {\n        total_chars_lst2 += str.length();\n    }\n    \n    if (total_chars_lst1 < total_chars_lst2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n    if (a < 30) {\n        return false;\n    }\n    int primes[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n    for (int i = 0; i < 24; i++) {\n        for (int j = i + 1; j < 24; j++) {\n            for (int k = j + 1; k < 24; k++) {\n                if (primes[i] * primes[j] * primes[k] == a) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x, int n) {\n    if (x == 1) {\n        return true;\n    }\n    int power = 0;\n    while (pow(n, power) <= x) {\n        if (pow(n, power) == x) {\n            return true;\n        }\n        power++;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/77", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    int cubeRoot = round(cbrt(a));\n    return cubeRoot * cubeRoot * cubeRoot == a;\n}\n"}
{"task_id": "CPP/78", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    int count = 0;\n    for (char c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string binary = \"db\";\n    while (decimal > 0) {\n        binary = char((decimal % 2) + '0') + binary;\n        decimal /= 2;\n    }\n    return binary + \"db\";\n}\n"}
{"task_id": "CPP/80", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if(s.length() < 3) {\n        return false;\n    }\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letterGrades;\n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letterGrades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letterGrades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letterGrades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letterGrades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letterGrades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letterGrades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letterGrades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letterGrades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letterGrades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letterGrades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letterGrades.push_back(\"D\");\n        } else if (gpa >= 0.0) {\n            letterGrades.push_back(\"D-\");\n        } else {\n            letterGrades.push_back(\"E\");\n        }\n    }\n    return letterGrades;\n}\n"}
{"task_id": "CPP/82", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int n = str.length();\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    int count = 0;\n    if (n == 1) {\n        return 2; // Numbers 1 and 10\n    }\n    count = 2 * 9 * (n - 1); // Numbers starting with 1 and ending with 1\n    return count;\n}\n"}
{"task_id": "CPP/84", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    int sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    return bitset<8>(sum).to_string();\n}\n"}
{"task_id": "CPP/85", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string result = \"\";\n    string word = \"\";\n    for (char c : s) {\n        if (c == ' ') {\n            sort(word.begin(), word.end());\n            result += word + ' ';\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    sort(word.begin(), word.end());\n    result += word;\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    vector<int> sortedArray = array;\n    int sum = array.front() + array.back();\n    if (sum % 2 == 0) {\n        sort(sortedArray.begin(), sortedArray.end(), greater<int>());\n    } else {\n        sort(sortedArray.begin(), sortedArray.end());\n    }\n    return sortedArray;\n}\n"}
{"task_id": "CPP/89", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string encrypted = \"\";\n    for (char c : s) {\n        if (isalpha(c)) {\n            char base = islower(c) ? 'a' : 'A';\n            char encryptedChar = base + (c - base + 2 * 2) % 26;\n            encrypted += encryptedChar;\n        } else {\n            encrypted += c;\n        }\n    }\n    return encrypted;\n}\n"}
{"task_id": "CPP/90", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    if(lst.size() < 2) {\n        return -1;\n    }\n    sort(lst.begin(), lst.end());\n    int smallest = lst[0];\n    for(int i = 1; i < lst.size(); i++) {\n        if(lst[i] > smallest) {\n            return lst[i];\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/91", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int count = 0;\n    int i = 0;\n    while (i < S.length()) {\n        if (S[i] == 'I' && (i == 0 || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!')) {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a, float b, float c){\n    if (a == (b + c) || b == (a + c) || c == (a + b)) {\n        if (a == (int)a && b == (int)b && c == (int)c) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    for (int i = 0; i < message.size(); i++) {\n        if (isalpha(message[i])) {\n            if (islower(message[i])) {\n                message[i] = toupper(message[i]);\n            } else {\n                message[i] = tolower(message[i]);\n            }\n            if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n                message[i] = message[i] + 2;\n            }\n        }\n    }\n    return message;\n}\n"}
{"task_id": "CPP/94", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int maxPrime = 0;\n    for (int num : lst) {\n        if (num <= 1) {\n            continue;\n        }\n        bool isPrime = true;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime && num > maxPrime) {\n            maxPrime = num;\n        }\n    }\n    int sumOfDigits = 0;\n    while (maxPrime > 0) {\n        sumOfDigits += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sumOfDigits;\n}\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    if(dict.empty()) {\n        return false;\n    }\n    for(auto const& element : dict) {\n        string key = element.first;\n        for(char c : key) {\n            if(!isalpha(c) || (islower(c) && isupper(c))) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nbool isPrime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvector<int> count_up_to(int n) {\n    vector<int> primes;\n    for (int i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a, int b){\n    int unitA = abs(a) % 10;\n    int unitB = abs(b) % 10;\n    return unitA * unitB;\n}\n"}
{"task_id": "CPP/98", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        if (isupper(s[i]) && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n"}
{"task_id": "CPP/100", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> stones;\n    for (int i = 0; i < n; i++) {\n        stones.push_back(n + 2 * i);\n    }\n    return stones;\n}\n"}
{"task_id": "CPP/101", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n    for (char c : s) {\n        if (c == ' ' || c == ',') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "#include<stdio.h>\nusing namespace std;\nint choose_num(int x, int y){\n"}
{"task_id": "CPP/103", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n, int m) {\n    if (n > m) {\n        return \"-1\";\n    }\n    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = round((double)sum / (m - n + 1));\n    string binary = bitset<32>(avg).to_string();\n    size_t pos = binary.find('1');\n    return (pos == string::npos) ? \"0\" : binary.substr(pos);\n}\n"}
{"task_id": "CPP/104", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for (int num : x) {\n        bool hasEvenDigit = false;\n        int temp = num;\n        while (temp > 0) {\n            int digit = temp % 10;\n            if (digit % 2 == 0) {\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if (!hasEvenDigit) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    vector<int> filtered;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered.push_back(num);\n        }\n    }\n    sort(filtered.begin(), filtered.end());\n    reverse(filtered.begin(), filtered.end());\n    \n    map<int, string> numToString = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n    \n    vector<string> result;\n    for (int num : filtered) {\n        result.push_back(numToString[num]);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> result;\n    int factorial = 1;\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            factorial *= i;\n            result.push_back(factorial);\n        } else {\n            sum += i;\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> result = {0, 0};\n    for (int i = 1; i <= n; i++) {\n        string num = to_string(i);\n        bool isPalindrome = true;\n        for (int j = 0; j < num.size() / 2; j++) {\n            if (num[j] != num[num.size() - 1 - j]) {\n                isPalindrome = false;\n                break;\n            }\n        }\n        if (isPalindrome) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for (int num : n) {\n        int sum = 0;\n        int temp = abs(num);\n        while (temp > 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if(arr.empty()) {\n        return true;\n    }\n    int n = arr.size();\n    int minIndex = 0;\n    for(int i = 0; i < n; i++) {\n        if(arr[i] < arr[minIndex]) {\n            minIndex = i;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        if(arr[(minIndex + i) % n] != i + 1) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1, vector<int> lst2){\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char,int> result;\n    for (char c : test) {\n        if (c != ' ') {\n            result[c]++;\n        }\n    }\n    int maxCount = 0;\n    for (const auto& pair : result) {\n        maxCount = max(maxCount, pair.second);\n    }\n    map<char,int> output;\n    for (const auto& pair : result) {\n        if (pair.second == maxCount) {\n            output[pair.first] = pair.second;\n        }\n    }\n    return output;\n}\n"}
{"task_id": "CPP/112", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    string result = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    string reversed = result;\n    reverse(reversed.begin(), reversed.end());\n    bool isPalindrome = (result == reversed);\n    return {result, isPalindrome ? \"True\" : \"False\"};\n}\n"}
{"task_id": "CPP/113", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    vector<string> result;\n    for (string str : lst) {\n        int oddCount = 0;\n        for (char c : str) {\n            if ((c - '0') % 2 != 0) {\n                oddCount++;\n            }\n        }\n        string res = \"the number of odd elements \" + to_string(oddCount) + \"n the str\" + to_string(oddCount) + \"ng \" + str + \" of the \" + to_string(oddCount) + \"nput.\";\n        result.push_back(res);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    long long currentSum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        currentSum = min(nums[i], currentSum + nums[i]);\n        minSum = min(minSum, currentSum);\n    }\n    return minSum;\n}\n"}
{"task_id": "CPP/115", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int numFillOperations = 0;\n    int rows = grid.size();\n    int cols = grid[0].size();\n    \n    for (int j = 0; j < cols; j++) {\n        int waterInColumn = 0;\n        for (int i = 0; i < rows; i++) {\n            waterInColumn += grid[i][j];\n        }\n        while (waterInColumn > 0) {\n            waterInColumn -= capacity;\n            numFillOperations++;\n        }\n    }\n    \n    return numFillOperations;\n}\n"}
{"task_id": "CPP/116", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        int countA = __builtin_popcount(a);\n        int countB = __builtin_popcount(b);\n        if (countA == countB) {\n            return a < b;\n        }\n        return countA < countB;\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s, int n) {\n    vector<string> words;\n    string currentWord;\n    int consonantCount = 0;\n    \n    auto processWord = [&]() {\n        if (consonantCount == n) {\n            words.push_back(currentWord);\n        }\n        currentWord.clear();\n        consonantCount = 0;\n    };\n    \n    for (char c : s) {\n        if (c == ' ') {\n            processWord();\n        } else if (isalpha(c)) {\n            char lowercaseC = tolower(c);\n            if (lowercaseC != 'a' && lowercaseC != 'e' && lowercaseC != 'i' && lowercaseC != 'o' && lowercaseC != 'u') {\n                consonantCount++;\n            }\n            currentWord.push_back(c);\n        }\n    }\n    \n    processWord();\n    \n    return words;\n}\n"}
{"task_id": "CPP/118", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    string vowels = \"aeiouAEIOU\";\n    int n = word.size();\n    for (int i = n - 2; i > 0; i--) {\n        if (vowels.find(word[i]) != string::npos && !islower(word[i-1]) && !islower(word[i+1])) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n"}
{"task_id": "CPP/120", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr, int k) {\n"}
{"task_id": "CPP/121", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> result;\n    for (int i = 1; i <= n; i++) {\n        int num = i;\n        while (num != 1) {\n            if (num % 2 != 0) {\n                result.push_back(num);\n            }\n            if (num % 2 == 0) {\n                num = num / 2;\n            } else {\n                num = 3 * num + 1;\n            }\n        }\n        result.push_back(1);\n    }\n    sort(result.begin(), result.end());\n    result.erase(unique(result.begin(), result.end()), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/124", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    if (date.empty()) {\n        return false;\n    }\n    \n    int month, day, year;\n    if (sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year) != 3) {\n        return false;\n    }\n    \n    if (month < 1 || month > 12) {\n        return false;\n    }\n    \n    if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)) {\n        return false;\n    }\n    \n    if ((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)) {\n        return false;\n    }\n    \n    if (month == 2) {\n        if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        } else {\n            if (day < 1 || day > 28) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n    vector<string> words;\n    string word = \"\";\n    bool hasWhitespace = false;\n    bool hasComma = false;\n    \n    for (char c : txt) {\n        if (c == ' ') {\n            hasWhitespace = true;\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else if (c == ',') {\n            hasComma = true;\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    \n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    \n    if (words.empty()) {\n        int oddLowercaseCount = 0;\n        for (char c : txt) {\n            if (islower(c) && (c - 'a') % 2 == 1) {\n                oddLowercaseCount++;\n            }\n        }\n        words.push_back(to_string(oddLowercaseCount));\n    }\n    \n    return words;\n}\n"}
{"task_id": "CPP/126", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    int count[1001] = {0};\n    for (int i = 0; i < lst.size(); i++) {\n        count[lst[i]]++;\n        if (count[lst[i]] > 2) {\n            return false;\n        }\n    }\n    vector<int> sorted_lst = lst;\n    sort(sorted_lst.begin(), sorted_lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] != sorted_lst[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection(vector<int> interval1, vector<int> interval2){\n"}
{"task_id": "CPP/128", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if (arr.empty()) {\n        return -32768;\n    }\n    int product = 1;\n    int sum = 0;\n    for (int num : arr) {\n        if (num > 0) {\n            product *= 1;\n        } else if (num < 0) {\n            product *= -1;\n        } else {\n            product *= 0;\n        }\n        sum += abs(num);\n    }\n    return product * sum;\n}\n"}
{"task_id": "CPP/129", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int n = grid.size();\n    int row = 0, col = 0;\n    vector<int> path;\n    for (int i = 0; i < k; i++) {\n        path.push_back(grid[row][col]);\n        if ((row + col) % 2 == 0) {\n            if (col == n - 1) {\n                row++;\n            } else if (row == 0) {\n                col++;\n            } else {\n                row--;\n                col++;\n            }\n        } else {\n            if (row == n - 1) {\n                col++;\n            } else if (col == 0) {\n                row++;\n            } else {\n                row++;\n                col--;\n            }\n        }\n    }\n    return path;\n}\n"}
{"task_id": "CPP/130", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> tribonacci(n+1, 0);\n    tribonacci[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci[i] = 1 + i / 2;\n        } else {\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n        }\n    }\n    return tribonacci;\n}\n"}
{"task_id": "CPP/131", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int product = 1;\n    string numStr = to_string(n);\n    for (char c : numStr) {\n        int digit = c - '0';\n        if (digit % 2 != 0) {\n            product *= digit;\n        } else if (digit == 0) {\n            return 0;\n        }\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n    int count = 0;\n    for (char c : str) {\n        if (c == '[') {\n            count++;\n        } else if (c == ']' && count > 0) {\n            count--;\n        }\n    }\n    return count > 0;\n}\n"}
{"task_id": "CPP/133", "generation": "int sum_squares(vector<float> lst){\n    int sum = 0;\n    for (float num : lst) {\n        int roundedNum = ceil(num);\n        sum += roundedNum * roundedNum;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.empty()) {\n        return false;\n    }\n    char lastChar = txt.back();\n    if (isalpha(lastChar)) {\n        int i = txt.size() - 2;\n        while (i >= 0 && txt[i] != ' ') {\n            i--;\n        }\n        if (i == -1) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int index = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            index = i - 1;\n        }\n    }\n    return index;\n}\n"}
{"task_id": "CPP/136", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    int largest_negative = 0;\n    int smallest_positive = 0;\n    \n    for (int num : lst) {\n        if (num < 0 && num < largest_negative) {\n            largest_negative = num;\n        } else if (num > 0 && (num < smallest_positive || smallest_positive == 0)) {\n            smallest_positive = num;\n        }\n    }\n    \n    return {largest_negative, smallest_positive};\n}\n"}
{"task_id": "CPP/137", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a, boost::any b){\n    if (a.type() == typeid(int) && b.type() == typeid(int)) {\n        int intA = boost::any_cast<int>(a);\n        int intB = boost::any_cast<int>(b);\n        if (intA > intB) {\n            return intA;\n        } else if (intB > intA) {\n            return intB;\n        } else {\n            return \"None\";\n        }\n    } else if (a.type() == typeid(float) && b.type() == typeid(float)) {\n        float floatA = boost::any_cast<float>(a);\n        float floatB = boost::any_cast<float>(b);\n        if (floatA > floatB) {\n            return floatA;\n        } else if (floatB > floatA) {\n            return floatB;\n        } else {\n            return \"None\";\n        }\n    } else if (a.type() == typeid(std::string) && b.type() == typeid(std::string)) {\n        std::string strA = boost::any_cast<std::string>(a);\n        std::string strB = boost::any_cast<std::string>(b);\n        if (strA > strB) {\n            return strA;\n        } else if (strB > strA) {\n            return strB;\n        } else {\n            return \"None\";\n        }\n    } else {\n        return \"None\";\n    }\n}\n"}
{"task_id": "CPP/138", "generation": "bool is_equal_to_sum_even(int n)\n"}
{"task_id": "CPP/139", "generation": "#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long result = 1;\n    for (int i = 1; i <= n; i++) {\n        long long factorial = 1;\n        for (int j = 1; j <= i; j++) {\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    int count = 0;\n    string result = \"\";\n    for (char c : text) {\n        if (c == ' ') {\n            count++;\n            if (count > 2) {\n                result.pop_back(); // Remove the last space\n                result.pop_back(); // Remove the second last space\n                result += \"-\";\n                count = 1;\n            } else {\n                result += \"_\";\n            }\n        } else {\n            result += c;\n            count = 0;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    int digits = 0;\n    int dotIndex = -1;\n    for (int i = 0; i < file_name.size(); i++) {\n        if (isdigit(file_name[i])) {\n            digits++;\n        } else if (file_name[i] == '.') {\n            if (dotIndex != -1) {\n                return \"No\";\n            }\n            dotIndex = i;\n        }\n    }\n    if (digits > 3 || dotIndex == -1 || dotIndex == 0 || dotIndex == file_name.size() - 1) {\n        return \"No\";\n    }\n    string beforeDot = file_name.substr(0, dotIndex);\n    string afterDot = file_name.substr(dotIndex + 1);\n    if (!isalpha(beforeDot[0])) {\n        return \"No\";\n    }\n    if (afterDot != \"txt\" && afterDot != \"exe\" && afterDot != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/142", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if ((i + 1) % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if ((i + 1) % 4 == 0 && (i + 1) % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "#include<stdio.h>\n#include<string>\n#include<cmath>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    vector<string> words;\n    string word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n\n    string result = \"\";\n    for (const string& w : words) {\n        if (isPrime(w.length())) {\n            result += w + \" \";\n        }\n    }\n    if (!result.empty()) {\n        result.pop_back(); // Remove the extra space at the end\n    }\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x, string n) {\n"}
{"task_id": "CPP/145", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n    auto sum_of_digits = [](int num) {\n        int sum = 0;\n        string num_str = to_string(abs(num));\n        for (char c : num_str) {\n            if (c == '-') continue;\n            sum += c - '0';\n        }\n        return sum;\n    };\n    \n    auto compare = [&](int a, int b) {\n        int sum_a = sum_of_digits(a);\n        int sum_b = sum_of_digits(b);\n        if (sum_a == sum_b) {\n            return find(nums.begin(), nums.end(), a) < find(nums.begin(), nums.end(), b);\n        }\n        return sum_a < sum_b;\n    };\n    \n    sort(nums.begin(), nums.end(), compare);\n    return nums;\n}\n"}
{"task_id": "CPP/146", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for (int num : nums) {\n        if (num > 10) {\n            string numStr = to_string(abs(num));\n            if (numStr.front() % 2 != 0 && numStr.back() % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_max_triples(int n){\n"}
{"task_id": "CPP/148", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1, string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    \n    // Check if planet1 and planet2 are valid planet names\n    if (find(planets.begin(), planets.end(), planet1) == planets.end() || find(planets.begin(), planets.end(), planet2) == planets.end()) {\n        return result; // Return empty vector if planet names are not correct\n    }\n    \n    // Find the indices of planet1 and planet2\n    int index1 = find(planets.begin(), planets.end(), planet1) - planets.begin();\n    int index2 = find(planets.begin(), planets.end(), planet2) - planets.begin();\n    \n    // Determine the range of planets between planet1 and planet2\n    int start = min(index1, index2) + 1;\n    int end = max(index1, index2);\n    \n    // Add planets between planet1 and planet2 to the result vector\n    for (int i = start; i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> result;\n    for (const string& word : lst) {\n        if (word.length() % 2 == 0) {\n            result.push_back(word);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "#include<stdio.h>\nusing namespace std;\nint x_or_y(int n, int x, int y){\n    if(n <= 1){\n        return y;\n    }\n    for(int i = 2; i*i <= n; i++){\n        if(n % i == 0){\n            return y;\n        }\n    }\n    return x;\n}\n"}
{"task_id": "CPP/151", "generation": "long long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for (float num : lst) {\n        if (num > 0 && num == (int)num && (int)num % 2 != 0) {\n            sum += (long long)num * num;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for (int i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongestExtension = \"\";\n    int maxStrength = INT_MIN;\n    for (const string& extension : extensions) {\n        int CAP = 0, SM = 0;\n        for (char c : extension) {\n            if (isupper(c)) {\n                CAP++;\n            } else if (islower(c)) {\n                SM++;\n            }\n        }\n        int strength = CAP - SM;\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    }\n    return class_name + \".\" + strongestExtension;\n}\n"}
{"task_id": "CPP/154", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a,string b){\n    if (a.length() != b.length()) {\n        return false;\n    }\n    string doubleA = a + a;\n    return doubleA.find(b) != string::npos;\n}\n"}
{"task_id": "CPP/155", "generation": "vector<int> even_odd_count(int num){\n    string numStr = to_string(abs(num));\n    int evenCount = 0, oddCount = 0;\n    for (char c : numStr) {\n        int digit = c - '0';\n        if (digit % 2 == 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    if (num == 0) {\n        evenCount = 1;\n    }\n    if (num < 0) {\n        evenCount--; // Exclude the negative sign\n    }\n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/156", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_roman(int number){\n    vector<pair<int, string>> romanMap = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n    \n    string roman = \"\";\n    for (const auto& pair : romanMap) {\n        while (number >= pair.first) {\n            roman += pair.second;\n            number -= pair.first;\n        }\n    }\n    \n    // Convert to lowercase\n    for (char& c : roman) {\n        c = tolower(c);\n    }\n    \n    return roman;\n}\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a, float b, float c){\n"}
{"task_id": "CPP/158", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    string maxWord = \"\";\n    int maxUniqueChars = 0;\n    \n    for (const string& word : words) {\n        int uniqueChars = set<char>(word.begin(), word.end()).size();\n        if (uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word < maxWord)) {\n            maxWord = word;\n            maxUniqueChars = uniqueChars;\n        }\n    }\n    \n    return maxWord;\n}\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number, int need, int remaining) {\n"}
{"task_id": "CPP/160", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nint do_algebra(vector<string> operato, vector<int> operand){\n    int result = operand[0];\n    for (int i = 0; i < operato.size(); i++) {\n        if (operato[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (operato[i] == \"//\") {\n            result /= operand[i + 1];\n        } else if (operato[i] == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    int n = s.size();\n    int i = 0, j = n - 1;\n    while (i < j) {\n        if (isalpha(s[i]) && isalpha(s[j])) {\n            s[i] = islower(s[i]) ? toupper(s[i]) : tolower(s[i]);\n            s[j] = islower(s[j]) ? toupper(s[j]) : tolower(s[j]);\n        }\n        i++;\n        j--;\n    }\n    if (i == j) {\n        if (isalpha(s[i])) {\n            s[i] = islower(s[i]) ? toupper(s[i]) : tolower(s[i]);\n        }\n    } else {\n        reverse(s.begin(), s.end());\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    if (text.empty()) {\n        return \"None\";\n    }\n    \n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n    \n    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    \n    return string(mdString);\n}\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a, int b){\n    vector<int> result;\n    if (a > b) {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    for (int i = a; i <= b; i++) {\n        if (i % 2 == 0 && i < 10) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/0", "generation": "bool has_close_elements(vector<float> numbers, float threshold)\n"}
{"task_id": "CPP/1", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> groups;\n    int count = 0;\n    string currentGroup = \"\";\n    for (char c : paren_string) {\n        if (c == '(') {\n            count++;\n            if (count > 1) {\n                currentGroup += c;\n            }\n        } else if (c == ')') {\n            count--;\n            if (count > 0) {\n                currentGroup += c;\n            }\n            if (count == 0) {\n                groups.push_back(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n"}
{"task_id": "CPP/2", "generation": "float truncate_number(float number){\n    int intPart = (int)number;\n    float decimalPart = number - intPart;\n    return decimalPart;\n}\n"}
{"task_id": "CPP/3", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0;\n    for (float num : numbers) {\n        sum += num;\n    }\n    float mean = sum / numbers.size();\n    \n    float deviation_sum = 0;\n    for (float num : numbers) {\n        deviation_sum += abs(num - mean);\n    }\n    \n    return deviation_sum / numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){\n    vector<int> result;\n    if (numbers.empty()) {\n        return result;\n    }\n    \n    for (int i = 0; i < numbers.size() - 1; i++) {\n        result.push_back(numbers[i]);\n        result.push_back(delimeter);\n    }\n    result.push_back(numbers[numbers.size() - 1]);\n    \n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> depths;\n    int currentDepth = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n            currentDepth++;\n            depths.push_back(currentDepth);\n        } else if (c == ')') {\n            depths.push_back(currentDepth);\n            currentDepth--;\n        }\n    }\n    vector<int> maxDepths;\n    int maxDepth = 0;\n    for (int depth : depths) {\n        if (depth > maxDepth) {\n            maxDepth = depth;\n        }\n        if (depth == 0) {\n            maxDepths.push_back(maxDepth);\n            maxDepth = 0;\n        }\n    }\n    return maxDepths;\n}\n"}
{"task_id": "CPP/7", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> result;\n    int maxNum = INT_MIN;\n    for (int i = 0; i < numbers.size(); i++) {\n        maxNum = max(maxNum, numbers[i]);\n        result.push_back(maxNum);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    string rev_str(str.rbegin(), str.rend());\n    for (int i = 0; i < str.size(); i++) {\n        if (is_palindrome(str.substr(i))) {\n            return str + rev_str.substr(0, str.size() - i);\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/11", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a, string b){\n    string result = \"\";\n    for(int i = 0; i < a.size(); i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if (strings.empty()) {\n        return \"None\";\n    }\n    string longestStr = strings[0];\n    for (const string& str : strings) {\n        if (str.length() > longestStr.length() || (str.length() == longestStr.length() && str < longestStr)) {\n            longestStr = str;\n        }\n    }\n    return longestStr;\n}\n"}
{"task_id": "CPP/13", "generation": "#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n"}
{"task_id": "CPP/14", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> prefixes;\n    string prefix = \"\";\n    for (char c : str) {\n        prefix += c;\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string result = \"\";\n    for (int i = 0; i <= n; i++) {\n        result += to_string(i);\n        if (i < n) {\n            result += \" \";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    sort(str.begin(), str.end());\n    int count = 0;\n    for (int i = 0; i < str.size(); i++) {\n        if (i == 0 || str[i] != str[i - 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/17", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){\n    vector<int> beats;\n    for (int i = 0; i < music_string.size(); i++) {\n        if (music_string[i] == 'o') {\n            beats.push_back(4);\n        } else if (music_string[i] == '|') {\n            if (music_string[i - 1] == 'o') {\n                beats.back() = 2;\n            } else {\n                beats.back() = 1;\n            }\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str, string substring){\n    int count = 0;\n    size_t pos = 0;\n    while ((pos = str.find(substring, pos)) != string::npos) {\n        count++;\n        pos += 1;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<string, int> numberMap = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    \n    // Split the input string into individual numbers\n    vector<string> tokens;\n    string token;\n    istringstream tokenStream(numbers);\n    while (getline(tokenStream, token, ' ')) {\n        tokens.push_back(token);\n    }\n    \n    // Sort the numbers based on their integer values\n    sort(tokens.begin(), tokens.end(), [&](const string& a, const string& b) {\n        return numberMap[a] < numberMap[b];\n    });\n    \n    // Construct the sorted string\n    string sortedNumbers;\n    for (const string& num : tokens) {\n        sortedNumbers += num + \" \";\n    }\n    \n    // Remove the extra space at the end\n    sortedNumbers.pop_back();\n    \n    return sortedNumbers;\n}\n"}
{"task_id": "CPP/20", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n"}
{"task_id": "CPP/21", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){\n    float min_num = *min_element(numbers.begin(), numbers.end());\n    float max_num = *max_element(numbers.begin(), numbers.end());\n    vector<float> rescaled_numbers;\n    for (float num : numbers) {\n        float rescaled_num = (num - min_num) / (max_num - min_num);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n    return rescaled_numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for (const auto& val : values) {\n        if (val.type() == typeid(int)) {\n            result.push_back(boost::any_cast<int>(val));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    return str.length();\n}\n"}
{"task_id": "CPP/24", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    for (int i = n-1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return -1; // If no divisor found\n}\n"}
{"task_id": "CPP/25", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> factors;\n    for (int i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (count(numbers.begin(), numbers.end(), numbers[i]) == 1) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    for (int i = 0; i < str.size(); i++) {\n        if (islower(str[i])) {\n            str[i] = toupper(str[i]);\n        } else if (isupper(str[i])) {\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for (const string& str : strings) {\n        result += str;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.substr(0, prefix.size()) == prefix) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> positiveNumbers;\n    for (float num : l) {\n        if (num > 0) {\n            positiveNumbers.push_back(num);\n        }\n    }\n    return positiveNumbers;\n}\n"}
{"task_id": "CPP/31", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "double find_zero(vector<double> xs){\n    double x = 0.0;\n    if (xs.size() % 2 != 0) {\n        throw std::invalid_argument(\"Number of coefficients should be even.\");\n    }\n    double largestNonZeroCoefficient = 0.0;\n    for (double coeff : xs) {\n        if (coeff != 0.0 && abs(coeff) > abs(largestNonZeroCoefficient)) {\n            largestNonZeroCoefficient = coeff;\n        }\n    }\n    if (largestNonZeroCoefficient == 0.0) {\n        throw std::invalid_argument(\"No non-zero coefficients found.\");\n    }\n    x = -xs[0] / xs[1]; // For linear polynomial ax + b = 0, x = -b/a\n    return x;\n}\n"}
{"task_id": "CPP/33", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> result = l;\n    for (int i = 0; i < l.size(); i++) {\n        if ((i + 1) % 3 == 0) {\n            int start = i;\n            while (start < l.size() && (start + 1) % 3 == 0) {\n                start++;\n            }\n            sort(result.begin() + i, result.begin() + start + 1);\n            i = start;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/34", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}\n"}
{"task_id": "CPP/35", "generation": "float max_element(vector<float> l){\n    float max_num = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max_num) {\n            max_num = l[i];\n        }\n    }\n    return max_num;\n}\n"}
{"task_id": "CPP/36", "generation": "#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if ((i % 11 == 0 || i % 13 == 0) && to_string(i).find('7') != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> even_values;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            even_values.push_back(l[i]);\n        }\n    }\n    sort(even_values.begin(), even_values.end());\n    \n    vector<float> result;\n    int even_index = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            result.push_back(even_values[even_index]);\n            even_index++;\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/38", "generation": "#include <string>\nusing namespace std;\n\nstring decode_cyclic(string s){ \n    string output;\n    int l = s.length();\n    int num = (l + 2) / 3;\n    for (int i = 0; i * 3 < l; i++)\n    {\n        string x = s.substr(i * 3, 3);\n        if (x.length() == 3) x = x.substr(2) + x[0];\n        output = output + x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/39", "generation": "#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return 3;\n    }\n    int count = 2;\n    int first = 2, second = 3, next;\n    while (count < n) {\n        next = first + second;\n        first = second;\n        second = next;\n        count++;\n        bool isPrime = true;\n        for (int i = 2; i * i <= next; i++) {\n            if (next % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            count++;\n        }\n    }\n    return next;\n}\n"}
{"task_id": "CPP/40", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    return n * (n - 1) / 2;\n}\n"}
{"task_id": "CPP/42", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    for (int i = 0; i < l.size(); i++) {\n        l[i]++;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n        if (l[i]+l[j]==0)\n            return true;\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x, int base){\n"}
{"task_id": "CPP/45", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float h){\n    return 0.5 * a * h;\n}\n"}
{"task_id": "CPP/46", "generation": "#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if (n == 0 || n == 1)\n        return 0;\n    if (n == 2)\n        return 2;\n    int a = 0, b = 0, c = 2, d = 0, sum = 0;\n    for (int i = 3; i <= n; i++) {\n        sum = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = sum;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/47", "generation": "float median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return l[n/2];\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.length() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "#include<stdio.h>\nusing namespace std;\nint modp(int n, int p){\n    if (n == 0) {\n        return 1;\n    }\n    int result = 1;\n    for (int i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/50", "generation": "#include <string>\nusing namespace std;\n\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++)\n    {\n        int w = ((int)s[i] + 5 - (int)'a') % 26 + (int)'a';   \n        out = out + (char)w;\n    }\n    return out;\n}\n\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++)\n    {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';   \n        out = out + (char)w;\n    }\n    return out;\n}\n"}
{"task_id": "CPP/51", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string vowels = \"aeiouAEIOU\";\n    text.erase(remove_if(text.begin(), text.end(), [&](char c) {\n        return vowels.find(c) != string::npos;\n    }), text.end());\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int> l, int t){\n"}
{"task_id": "CPP/53", "generation": "#include<stdio.h>\n#include<stdlib.h>\nint add(int x, int y){\n"}
{"task_id": "CPP/54", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0, string s1){\n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    return s0 == s1;\n}\n"}
{"task_id": "CPP/55", "generation": "#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if (n <= 1) {\n        return n;\n    }\n    int a = 0, b = 1, c;\n    for (int i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n"}
{"task_id": "CPP/56", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            count++;\n        } else if (bracket == '>') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n"}
{"task_id": "CPP/58", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1, vector<int> l2){\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    \n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(result));\n    \n    result.erase(unique(result.begin(), result.end()), result.end());\n    \n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int factor = 2;\n    while (n > 1) {\n        if (n % factor == 0) {\n            n /= factor;\n        } else {\n            factor++;\n        }\n    }\n    return factor;\n}\n"}
{"task_id": "CPP/60", "generation": "int sum_to_n(int n){\n    return n * (n + 1) / 2;\n}\n"}
{"task_id": "CPP/61", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            count++;\n        } else if (bracket == ')') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> derivativeCoefficients;\n    for (int i = 1; i < xs.size(); i++) {\n        derivativeCoefficients.push_back(xs[i] * i);\n    }\n    return derivativeCoefficients;\n}\n"}
{"task_id": "CPP/63", "generation": "#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if (n == 0 || n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    int a = 0, b = 0, c = 1, d;\n    for (int i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    transform(s.begin(), s.end(), s.begin(), ::tolower);\n    int count = 0;\n    for(char c : s){\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n            count++;\n        }\n    }\n    if(s.back() == 'y'){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x, int shift){\n"}
{"task_id": "CPP/66", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(char c : s){\n        if(isupper(c)){\n            sum += c;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s, int n) {\n    int apples = 0, oranges = 0;\n    sscanf(s.c_str(), \"%d apples and %d oranges\", &apples, &oranges);\n    return n - apples - oranges;\n}\n"}
{"task_id": "CPP/68", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> result = {};\n    int smallestEven = INT_MAX;\n    int smallestIndex = INT_MAX;\n    \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < smallestEven) {\n            smallestEven = arr[i];\n            smallestIndex = i;\n        } else if (arr[i] % 2 == 0 && arr[i] == smallestEven && i < smallestIndex) {\n            smallestIndex = i;\n        }\n    }\n    \n    if (smallestEven != INT_MAX) {\n        result.push_back(smallestEven);\n        result.push_back(smallestIndex);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/69", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int res = -1;\n    for (int num : lst) {\n        int freq = 0;\n        for (int i : lst) {\n            if (i == num) {\n                freq++;\n            }\n        }\n        if (num > freq && freq >= res) {\n            res = num;\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/70", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    sort(lst.begin(), lst.end());\n    vector<int> result;\n    int left = 0, right = lst.size() - 1;\n    while (left <= right) {\n        if (left == right) {\n            result.push_back(lst[left]);\n            break;\n        }\n        result.push_back(lst[left]);\n        result.push_back(lst[right]);\n        left++;\n        right--;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "float triangle_area(float a, float b, float c){\n    if (a + b > c && a + c > b && b + c > a) {\n        float s = (a + b + c) / 2;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100;\n    } else {\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q, int w) {\n    // Check if the vector is palindromic\n    bool isPalindromic = true;\n    for (int i = 0; i < q.size() / 2; i++) {\n        if (q[i] != q[q.size() - i - 1]) {\n            isPalindromic = false;\n            break;\n        }\n    }\n    \n    // Check if the sum of elements is less than or equal to the maximum weight\n    int sum = 0;\n    for (int num : q) {\n        sum += num;\n    }\n    \n    return isPalindromic && sum <= w;\n}\n"}
{"task_id": "CPP/73", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int changes = 0;\n    for (int i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - 1 - i]) {\n            changes++;\n        }\n    }\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1, vector<string> lst2){\n    int totalChars1 = 0;\n    int totalChars2 = 0;\n    \n    for (const string& str : lst1) {\n        totalChars1 += str.length();\n    }\n    \n    for (const string& str : lst2) {\n        totalChars2 += str.length();\n    }\n    \n    if (totalChars1 < totalChars2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n    if (a < 30) {\n        return false;\n    }\n    int primes[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n    for (int i = 0; i < 24; i++) {\n        for (int j = i; j < 24; j++) {\n            for (int k = j; k < 24; k++) {\n                if (primes[i] * primes[j] * primes[k] == a) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x, int n) {\n    if (x == 1) {\n        return true;\n    }\n    int power = 0;\n    while (pow(n, power) < x) {\n        power++;\n    }\n    return pow(n, power) == x;\n}\n"}
{"task_id": "CPP/77", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    int cubeRoot = round(cbrt(a));\n    return cubeRoot * cubeRoot * cubeRoot == a;\n}\n"}
{"task_id": "CPP/78", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    int count = 0;\n    for (char c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string binary = \"db\";\n    if (decimal == 0) {\n        binary += \"0\";\n    } else {\n        while (decimal > 0) {\n            binary = ((decimal % 2) == 0 ? \"0\" : \"1\") + binary;\n            decimal /= 2;\n        }\n    }\n    binary += \"db\";\n    return binary;\n}\n"}
{"task_id": "CPP/80", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if (s.length() < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length() - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letter_grades;\n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int length = str.length();\n    if(length <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=length; i++){\n        if(length % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    int count = 0;\n    if (n == 1) {\n        return 2; // Numbers 1 and 10\n    } else {\n        count += 9; // Numbers starting with 1\n        count += 9; // Numbers ending with 1\n        count -= 1; // Remove the overlap (number 1)\n        return count * pow(10, n - 2);\n    }\n}\n"}
{"task_id": "CPP/84", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    int sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    return bitset<8>(sum).to_string();\n}\n"}
{"task_id": "CPP/85", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string result = \"\";\n    string word = \"\";\n    for (char c : s) {\n        if (c == ' ') {\n            sort(word.begin(), word.end());\n            result += word + ' ';\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    sort(word.begin(), word.end());\n    result += word;\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    vector<int> sortedArray = array;\n    if (sortedArray.empty()) {\n        return sortedArray;\n    }\n    \n    int sum = sortedArray.front() + sortedArray.back();\n    if (sum % 2 == 0) {\n        sort(sortedArray.begin(), sortedArray.end(), greater<int>());\n    } else {\n        sort(sortedArray.begin(), sortedArray.end());\n    }\n    \n    return sortedArray;\n}\n"}
{"task_id": "CPP/89", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string encrypted = \"\";\n    for (char c : s) {\n        if (isalpha(c)) {\n            char base = islower(c) ? 'a' : 'A';\n            encrypted += (c - base + 2 * 2) % 26 + base;\n        } else {\n            encrypted += c;\n        }\n    }\n    return encrypted;\n}\n"}
{"task_id": "CPP/90", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    if(lst.size() < 2) {\n        return -1;\n    }\n    sort(lst.begin(), lst.end());\n    int smallest = lst[0];\n    for(int i = 1; i < lst.size(); i++) {\n        if(lst[i] > smallest) {\n            return lst[i];\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/91", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int count = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if (S[i] == 'I' && (i == 0 || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!')) {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a, float b, float c){\n    if (a == (b + c) || b == (a + c) || c == (a + b)) {\n        if (a == (int)a && b == (int)b && c == (int)c) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    for (int i = 0; i < message.size(); i++) {\n        if (isalpha(message[i])) {\n            if (islower(message[i])) {\n                message[i] = toupper(message[i]);\n            } else {\n                message[i] = tolower(message[i]);\n            }\n            if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n                message[i] = message[i] + 2;\n            }\n        }\n    }\n    return message;\n}\n"}
{"task_id": "CPP/94", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int maxPrime = 0;\n    for (int num : lst) {\n        if (num <= 1) {\n            continue;\n        }\n        bool isPrime = true;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime && num > maxPrime) {\n            maxPrime = num;\n        }\n    }\n    int sumOfDigits = 0;\n    while (maxPrime > 0) {\n        sumOfDigits += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sumOfDigits;\n}\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    if (dict.empty()) {\n        return false;\n    }\n    for (const auto& entry : dict) {\n        string key = entry.first;\n        for (char c : key) {\n            if (!islower(c) && !isupper(c)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\nbool is_prime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvector<int> count_up_to(int n) {\n    vector<int> primes;\n    for (int i = 2; i < n; i++) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "int multiply(int a, int b){\n"}
{"task_id": "CPP/98", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s[i];\n        if (isupper(c) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    double num = stod(value);\n    int lower = floor(num);\n    int upper = ceil(num);\n    if (num - lower < upper - num) {\n        return lower;\n    } else {\n        return upper;\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> stones;\n    stones.push_back(n);\n    for (int i = 1; i < n; i++) {\n        if (n % 2 == 0) {\n            n += 2;\n        } else {\n            n += 1;\n        }\n        stones.push_back(n);\n    }\n    return stones;\n}\n"}
{"task_id": "CPP/101", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n    for (char c : s) {\n        if (c == ' ' || c == ',') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "#include<stdio.h>\nusing namespace std;\nint choose_num(int x, int y){\n"}
{"task_id": "CPP/103", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n, int m) {\n    if (n > m) {\n        return \"-1\";\n    }\n    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = round((double)sum / (m - n + 1));\n    return bitset<32>(avg).to_string().substr(32 - (int)log2(avg) - 1);\n}\n"}
{"task_id": "CPP/104", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for (int num : x) {\n        int current = num;\n        bool hasEvenDigit = false;\n        while (current > 0) {\n            int digit = current % 10;\n            if (digit % 2 == 0) {\n                hasEvenDigit = true;\n                break;\n            }\n            current /= 10;\n        }\n        if (!hasEvenDigit) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    vector<int> sorted;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            sorted.push_back(num);\n        }\n    }\n    sort(sorted.begin(), sorted.end());\n    reverse(sorted.begin(), sorted.end());\n    \n    map<int, string> numToString = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n    \n    vector<string> result;\n    for (int num : sorted) {\n        result.push_back(numToString[num]);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> result;\n    int factorial = 1;\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            factorial *= i;\n            result.push_back(factorial);\n        } else {\n            sum += i;\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> result = {0, 0};\n    for (int i = 1; i <= n; i++) {\n        string num = to_string(i);\n        string rev_num = num;\n        reverse(rev_num.begin(), rev_num.end());\n        if (num == rev_num) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for (int num : n) {\n        int sum = 0;\n        int temp = abs(num);\n        while (temp != 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if (arr.empty()) {\n        return true;\n    }\n    int n = arr.size();\n    int minIndex = -1;\n    for (int i = 0; i < n; i++) {\n        if (minIndex == -1 || arr[i] < arr[minIndex]) {\n            minIndex = i;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (arr[(minIndex + i) % n] != i + 1) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1, vector<int> lst2){\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            for (int i = 0; i < lst2.size(); i++) {\n                if (lst2[i] % 2 == 0) {\n                    swap(lst1[0], lst2[i]);\n                    break;\n                }\n            }\n        }\n    }\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char,int> result;\n    map<char,int> count;\n    for (char c : test) {\n        if (c != ' ') {\n            count[c]++;\n        }\n    }\n    int maxCount = 0;\n    for (const auto& pair : count) {\n        maxCount = max(maxCount, pair.second);\n    }\n    for (const auto& pair : count) {\n        if (pair.second == maxCount) {\n            result[pair.first] = pair.second;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    string result = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    string reversed = result;\n    reverse(reversed.begin(), reversed.end());\n    bool isPalindrome = (result == reversed);\n    return {result, isPalindrome ? \"True\" : \"False\"};\n}\n"}
{"task_id": "CPP/113", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    vector<string> result;\n    for (string str : lst) {\n        int oddCount = 0;\n        for (char c : str) {\n            if ((c - '0') % 2 != 0) {\n                oddCount++;\n            }\n        }\n        string newStr = \"the number of odd elements \" + to_string(oddCount) + \"n the str\" + to_string(oddCount) + \"ng \" + str + \" of the \" + to_string(oddCount) + \"nput.\";\n        result.push_back(newStr);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    long long currentSum = nums[0];\n    \n    for (int i = 1; i < nums.size(); i++) {\n        currentSum = min(nums[i], currentSum + nums[i]);\n        minSum = min(minSum, currentSum);\n    }\n    \n    return minSum;\n}\n"}
{"task_id": "CPP/115", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int numFillOperations = 0;\n    for (int j = 0; j < grid[0].size(); j++) {\n        int waterInColumn = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            waterInColumn += grid[i][j];\n        }\n        while (waterInColumn > 0) {\n            waterInColumn -= min(waterInColumn, capacity);\n            numFillOperations++;\n        }\n    }\n    return numFillOperations;\n}\n"}
{"task_id": "CPP/116", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        int countA = __builtin_popcount(a);\n        int countB = __builtin_popcount(b);\n        if (countA == countB) {\n            return a < b;\n        }\n        return countA < countB;\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    vector<string> words;\n    string currentWord = \"\";\n    int consonantCount = 0;\n    \n    for (char c : s) {\n        if (c == ' ') {\n            if (consonantCount == n) {\n                words.push_back(currentWord);\n            }\n            currentWord = \"\";\n            consonantCount = 0;\n        } else if (isalpha(c)) {\n            char lowercaseChar = tolower(c);\n            if (lowercaseChar != 'a' && lowercaseChar != 'e' && lowercaseChar != 'i' && lowercaseChar != 'o' && lowercaseChar != 'u') {\n                consonantCount++;\n            }\n            currentWord += c;\n        }\n    }\n    \n    if (consonantCount == n) {\n        words.push_back(currentWord);\n    }\n    \n    return words;\n}\n"}
{"task_id": "CPP/118", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    string vowels = \"aeiouAEIOU\";\n    int n = word.size();\n    for (int i = n - 2; i > 0; i--) {\n        if (vowels.find(word[i]) != string::npos) {\n            for (int j = i - 1; j > 0; j--) {\n                if (vowels.find(word[j]) == string::npos) {\n                    for (int k = i + 1; k < n - 1; k++) {\n                        if (vowels.find(word[k]) == string::npos) {\n                            return string(1, word[i]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n"}
{"task_id": "CPP/120", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr, int k) {\n    sort(arr.begin(), arr.end(), greater<int>());\n    vector<int> result;\n    for (int i = 0; i < k; i++) {\n        result.push_back(arr[i]);\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> result;\n    for (int i = 1; i <= n; i++) {\n        int num = i;\n        while (num != 1) {\n            if (num % 2 == 1) {\n                result.push_back(num);\n            }\n            if (num % 2 == 0) {\n                num = num / 2;\n            } else {\n                num = 3 * num + 1;\n            }\n        }\n        if (num == 1) {\n            result.push_back(1);\n        }\n    }\n    sort(result.begin(), result.end());\n    result.erase(unique(result.begin(), result.end()), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/124", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    // Check if the date string is empty\n    if (date.empty()) {\n        return false;\n    }\n\n    // Extracting month, day, and year from the date string\n    int month, day, year;\n    sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year);\n\n    // Check if the month is valid\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Check if the day is valid based on the month\n    if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)) {\n        return false;\n    } else if ((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)) {\n        return false;\n    } else if (month == 2) {\n        // Check for leap year\n        if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        } else {\n            if (day < 1 || day > 28) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n    vector<string> words;\n    string word = \"\";\n    for (char c : txt) {\n        if (c == ' ' || c == ',') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    if (words.empty()) {\n        int oddCount = 0;\n        for (char c : txt) {\n            if (islower(c) && (c - 'a') % 2 == 1) {\n                oddCount++;\n            }\n        }\n        words.push_back(to_string(oddCount));\n    }\n    return words;\n}\n"}
{"task_id": "CPP/126", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    int count[1001] = {0};\n    for (int num : lst) {\n        count[num]++;\n        if (count[num] > 2) {\n            return false;\n        }\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection(vector<int> interval1, vector<int> interval2){\n"}
{"task_id": "CPP/128", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if (arr.empty()) {\n        return -32768;\n    }\n    int product = 1;\n    int sum = 0;\n    for (int num : arr) {\n        if (num > 0) {\n            product *= 1;\n            sum += abs(num);\n        } else if (num < 0) {\n            product *= -1;\n            sum += abs(num);\n        } else {\n            product *= 0;\n        }\n    }\n    return product * sum;\n}\n"}
{"task_id": "CPP/129", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int n = grid.size();\n    int row = 0, col = 0;\n    vector<int> path;\n    for (int i = 0; i < k; i++) {\n        path.push_back(grid[row][col]);\n        if ((row + col) % 2 == 0) {\n            if (col == n - 1) {\n                row++;\n            } else if (row == 0) {\n                col++;\n            } else {\n                row--;\n                col++;\n            }\n        } else {\n            if (row == n - 1) {\n                col++;\n            } else if (col == 0) {\n                row++;\n            } else {\n                row++;\n                col--;\n            }\n        }\n    }\n    return path;\n}\n"}
{"task_id": "CPP/130", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> tribonacci(n+1, 0);\n    tribonacci[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci[i] = 1 + i / 2;\n        } else {\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n        }\n    }\n    return tribonacci;\n}\n"}
{"task_id": "CPP/131", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int product = 1;\n    string numStr = to_string(n);\n    for (char c : numStr) {\n        int digit = c - '0';\n        if (digit % 2 != 0) {\n            product *= digit;\n        }\n    }\n    if (product == 1) {\n        return 0;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n    int count = 0;\n    for (char c : str) {\n        if (c == '[') {\n            count++;\n        } else if (c == ']' && count > 0) {\n            count--;\n        }\n    }\n    return count > 0;\n}\n"}
{"task_id": "CPP/133", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for (float num : lst) {\n        int roundedNum = ceil(num);\n        sum += roundedNum * roundedNum;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.empty()) {\n        return false;\n    }\n    char lastChar = txt.back();\n    if (isalpha(lastChar)) {\n        int i = txt.size() - 2;\n        while (i >= 0 && txt[i] != ' ') {\n            i--;\n        }\n        if (i == -1) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int index = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            index = i - 1;\n        }\n    }\n    return index;\n}\n"}
{"task_id": "CPP/136", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    int largest_negative = 0;\n    int smallest_positive = 0;\n    \n    for (int num : lst) {\n        if (num < 0 && num < largest_negative) {\n            largest_negative = num;\n        } else if (num > 0 && (num < smallest_positive || smallest_positive == 0)) {\n            smallest_positive = num;\n        }\n    }\n    \n    return {largest_negative, smallest_positive};\n}\n"}
{"task_id": "CPP/137", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a, boost::any b){\n    if (a.type() == typeid(int) && b.type() == typeid(int)) {\n        int intA = boost::any_cast<int>(a);\n        int intB = boost::any_cast<int>(b);\n        if (intA > intB) {\n            return intA;\n        } else if (intB > intA) {\n            return intB;\n        } else {\n            return \"None\";\n        }\n    } else if (a.type() == typeid(float) && b.type() == typeid(float)) {\n        float floatA = boost::any_cast<float>(a);\n        float floatB = boost::any_cast<float>(b);\n        if (floatA > floatB) {\n            return floatA;\n        } else if (floatB > floatA) {\n            return floatB;\n        } else {\n            return \"None\";\n        }\n    } else if (a.type() == typeid(std::string) && b.type() == typeid(std::string)) {\n        std::string strA = boost::any_cast<std::string>(a);\n        std::string strB = boost::any_cast<std::string>(b);\n        if (strA > strB) {\n            return strA;\n        } else if (strB > strA) {\n            return strB;\n        } else {\n            return \"None\";\n        }\n    } else {\n        return \"None\";\n    }\n}\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n"}
{"task_id": "CPP/139", "generation": "#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long result = 1;\n    for (int i = 1; i <= n; i++) {\n        long long factorial = 1;\n        for (int j = 1; j <= i; j++) {\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string result = \"\";\n    int consecutiveSpaces = 0;\n    for (char c : text) {\n        if (c == ' ') {\n            consecutiveSpaces++;\n            if (consecutiveSpaces > 2) {\n                result.pop_back(); // Remove the last space\n                result.pop_back(); // Remove the second last space\n                result += \"-\";\n            } else {\n                result += \"_\";\n            }\n        } else {\n            consecutiveSpaces = 0;\n            result += c;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    int digits = 0;\n    int dots = 0;\n    int latinLetter = 0;\n    int extension = 0;\n    \n    for (char c : file_name) {\n        if (c >= '0' && c <= '9') {\n            digits++;\n        } else if (c == '.') {\n            dots++;\n        } else if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n            latinLetter++;\n        }\n    }\n    \n    if (digits > 3 || dots != 1 || latinLetter == 0) {\n        return \"No\";\n    }\n    \n    string fileExtension = file_name.substr(file_name.find('.') + 1);\n    if (fileExtension != \"txt\" && fileExtension != \"exe\" && fileExtension != \"dll\") {\n        return \"No\";\n    }\n    \n    return \"Yes\";\n}\n"}
{"task_id": "CPP/142", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if ((i + 1) % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if ((i + 1) % 4 == 0 && (i + 1) % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "#include<stdio.h>\n#include<string>\n#include<cmath>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    vector<string> words;\n    string word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n\n    string result = \"\";\n    for (const string& w : words) {\n        if (isPrime(w.size())) {\n            result += w + \" \";\n        }\n    }\n    if (!result.empty()) {\n        result.pop_back(); // Remove the extra space at the end\n    }\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x, string n){\n    int num1 = stoi(x.substr(0, x.find('/')));\n    int den1 = stoi(x.substr(x.find('/') + 1));\n    int num2 = stoi(n.substr(0, n.find('/')));\n    int den2 = stoi(n.substr(n.find('/') + 1));\n    \n    return (num1 * den2 == num2 * den1);\n}\n"}
{"task_id": "CPP/145", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint sumOfDigits(int num) {\n    int sum = 0;\n    string numStr = to_string(abs(num));\n    for (char c : numStr) {\n        sum += c - '0';\n    }\n    return sum;\n}\n\nbool compare(int a, int b) {\n    int sumA = sumOfDigits(a);\n    int sumB = sumOfDigits(b);\n    if (sumA == sumB) {\n        return find(nums.begin(), nums.end(), a) < find(nums.begin(), nums.end(), b);\n    }\n    return sumA < sumB;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    sort(nums.begin(), nums.end(), compare);\n    return nums;\n}\n"}
{"task_id": "CPP/146", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for (int num : nums) {\n        string numStr = to_string(abs(num));\n        if (numStr.front() % 2 != 0 && numStr.back() % 2 != 0 && num > 10) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_max_triples(int n){\n"}
{"task_id": "CPP/148", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1, string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    \n    int start = -1, end = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n            end = i;\n        }\n    }\n    \n    if (start == -1 || end == -1) {\n        return result;\n    }\n    \n    if (start > end) {\n        swap(start, end);\n    }\n    \n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> result;\n    for (const string& word : lst) {\n        if (word.size() % 2 == 0) {\n            result.push_back(word);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        if (a.size() == b.size()) {\n            return a < b;\n        }\n        return a.size() < b.size();\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "#include<stdio.h>\nusing namespace std;\nint x_or_y(int n, int x, int y){\n    if(n <= 1){\n        return y;\n    }\n    for(int i = 2; i*i <= n; i++){\n        if(n % i == 0){\n            return y;\n        }\n    }\n    return x;\n}\n"}
{"task_id": "CPP/151", "generation": "long long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for (float num : lst) {\n        if (num > 0 && fmod(num, 2) == 1) {\n            sum += static_cast<long long>(pow(num, 2));\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for (int i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name, vector<string> extensions){\n    string strongestExtension = \"\";\n    int maxStrength = INT_MIN;\n    \n    for (const string& extension : extensions) {\n        int CAP = 0, SM = 0;\n        for (char c : extension) {\n            if (isupper(c)) {\n                CAP++;\n            } else if (islower(c)) {\n                SM++;\n            }\n        }\n        \n        int strength = CAP - SM;\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongestExtension;\n}\n"}
{"task_id": "CPP/154", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a, string b) {\n    if (a.length() != b.length()) {\n        return false;\n    }\n    string combined = a + a;\n    return combined.find(b) != string::npos;\n}\n"}
{"task_id": "CPP/155", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> count = {0, 0};\n    string numStr = to_string(abs(num));\n    for (char c : numStr) {\n        if ((c - '0') % 2 == 0) {\n            count[0]++; // Even digit\n        } else {\n            count[1]++; // Odd digit\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/156", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_roman(int number){\n    vector<string> roman={\"i\",\"iv\",\"v\",\"ix\",\"x\",\"xl\",\"l\",\"xc\",\"c\",\"cd\",\"d\",\"cm\",\"m\"};\n    vector<int> values={1,4,5,9,10,40,50,90,100,400,500,900,1000};\n    string result=\"\";\n    for (int i=12;i>=0;i--){\n        while (number>=values[i]){\n            result+=roman[i];\n            number-=values[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a, float b, float c){\n"}
{"task_id": "CPP/158", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    string maxWord = \"\";\n    int maxUniqueChars = 0;\n    \n    for (const string& word : words) {\n        int uniqueChars = unordered_set<char>(word.begin(), word.end()).size();\n        if (uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word < maxWord)) {\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        }\n    }\n    \n    return maxWord;\n}\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number, int need, int remaining){\n"}
{"task_id": "CPP/160", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nint do_algebra(vector<string> operato, vector<int> operand){\n    int result = operand[0];\n    for (int i = 0; i < operato.size(); i++) {\n        if (operato[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (operato[i] == \"//\") {\n            result /= operand[i + 1];\n        } else if (operato[i] == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    int n = s.size();\n    int i = 0, j = n - 1;\n    while (i < j) {\n        if (isalpha(s[i]) && isalpha(s[j])) {\n            s[i] = islower(s[i]) ? toupper(s[i]) : tolower(s[i]);\n            s[j] = islower(s[j]) ? toupper(s[j]) : tolower(s[j]);\n            i++;\n            j--;\n        } else if (isalpha(s[i])) {\n            j--;\n        } else if (isalpha(s[j])) {\n            i++;\n        } else {\n            char temp = s[i];\n            s[i] = s[j];\n            s[j] = temp;\n            i++;\n            j--;\n        }\n    }\n    if (i == j && isalpha(s[i])) {\n        s[i] = islower(s[i]) ? toupper(s[i]) : tolower(s[i]);\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    if (text.empty()) {\n        return \"None\";\n    }\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), result);\n    std::string md5_result;\n    char buf[MD5_DIGEST_LENGTH*2+1];\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        sprintf(buf, \"%02x\", result[i]);\n        md5_result += buf;\n    }\n    return md5_result;\n}\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a, int b){\n    vector<int> result;\n    if (a > b) {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    for (int i = a; i <= b; i++) {\n        if (i % 2 == 0 && i < 10) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n"}
{"task_id": "CPP/1", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> result;\n    int balance = 0;\n    string currentGroup = \"\";\n    \n    for (char c : paren_string) {\n        if (c == '(') {\n            balance++;\n            if (balance > 1) {\n                currentGroup += c;\n            }\n        } else if (c == ')') {\n            balance--;\n            if (balance > 0) {\n                currentGroup += c;\n            }\n            if (balance == 0) {\n                result.push_back(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "float truncate_number(float number){\n    int integerPart = (int)number;\n    float decimalPart = number - integerPart;\n    return decimalPart;\n}\n"}
{"task_id": "CPP/3", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "float mean_absolute_deviation(vector<float> numbers){\n    float sum = 0;\n    for (float num : numbers) {\n        sum += num;\n    }\n    float mean = sum / numbers.size();\n    \n    float deviationSum = 0;\n    for (float num : numbers) {\n        deviationSum += abs(num - mean);\n    }\n    \n    return deviationSum / numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){\n    vector<int> result;\n    if(numbers.empty()) {\n        return result;\n    }\n    for(int i = 0; i < numbers.size() - 1; i++) {\n        result.push_back(numbers[i]);\n        result.push_back(delimeter);\n    }\n    result.push_back(numbers[numbers.size() - 1]);\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> depths;\n    int currentDepth = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n            currentDepth++;\n            depths.push_back(currentDepth);\n        } else if (c == ')') {\n            depths.push_back(currentDepth);\n            currentDepth--;\n        }\n    }\n    vector<int> maxDepths;\n    int maxDepth = 0;\n    for (int depth : depths) {\n        if (depth > maxDepth) {\n            maxDepth = depth;\n        }\n        if (depth == 0) {\n            maxDepths.push_back(maxDepth);\n            maxDepth = 0;\n        }\n    }\n    return maxDepths;\n}\n"}
{"task_id": "CPP/7", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    vector<int> result = {0, 1};\n    for (int num : numbers) {\n        result[0] += num;\n        result[1] *= num;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/9", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> result;\n    int max_num = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n        max_num = max(max_num, numbers[i]);\n        result.push_back(max_num);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    string rev_str(str.rbegin(), str.rend());\n    for (int i = 0; i < str.size(); i++) {\n        if (is_palindrome(str.substr(i))) {\n            return str + rev_str.substr(0, str.size() - i);\n        }\n    }\n    return str; // If the whole string is a palindrome\n}\n"}
{"task_id": "CPP/11", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a, string b){\n    string result = \"\";\n    for(int i = 0; i < a.size(); i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if (strings.empty()) {\n        return \"None\";\n    }\n    string longestStr = strings[0];\n    for (const string& str : strings) {\n        if (str.length() > longestStr.length() || (str.length() == longestStr.length() && str < longestStr)) {\n            longestStr = str;\n        }\n    }\n    return longestStr;\n}\n"}
{"task_id": "CPP/13", "generation": "#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n"}
{"task_id": "CPP/14", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> prefixes;\n    string prefix = \"\";\n    for (char c : str) {\n        prefix += c;\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string result = \"\";\n    for (int i = 0; i <= n; i++) {\n        result += to_string(i);\n        if (i < n) {\n            result += \" \";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    sort(str.begin(), str.end());\n    int count = 0;\n    for (int i = 0; i < str.size(); i++) {\n        if (i == 0 || str[i] != str[i - 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/17", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){\n    vector<int> beats;\n    int length = music_string.length();\n    for (int i = 0; i < length; i++) {\n        if (music_string[i] == 'o') {\n            beats.push_back(4);\n        } else if (music_string[i] == '|') {\n            if (music_string[i - 1] == 'o') {\n                beats.back() = 2;\n            } else {\n                beats.back() = 1;\n            }\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str, string substring){\n    int count = 0;\n    size_t pos = 0;\n    while ((pos = str.find(substring, pos)) != string::npos) {\n        count++;\n        pos += 1;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<string, int> numMap = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    \n    string result = \"\";\n    vector<string> numList;\n    string num = \"\";\n    for (char c : numbers) {\n        if (c == ' ') {\n            numList.push_back(num);\n            num = \"\";\n        } else {\n            num += c;\n        }\n    }\n    numList.push_back(num);\n    \n    sort(numList.begin(), numList.end(), [&](string a, string b) {\n        return numMap[a] < numMap[b];\n    });\n    \n    for (int i = 0; i < numList.size(); i++) {\n        result += numList[i];\n        if (i != numList.size() - 1) {\n            result += \" \";\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/20", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n"}
{"task_id": "CPP/21", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){\n    float min_num = *min_element(numbers.begin(), numbers.end());\n    float max_num = *max_element(numbers.begin(), numbers.end());\n    vector<float> rescaled;\n    for (float num : numbers) {\n        float new_num = (num - min_num) / (max_num - min_num);\n        rescaled.push_back(new_num);\n    }\n    return rescaled;\n}\n"}
{"task_id": "CPP/22", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for (const auto& val : values) {\n        try {\n            int num = boost::any_cast<int>(val);\n            result.push_back(num);\n        } catch (const boost::bad_any_cast&) {\n            continue;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    return str.length();\n}\n"}
{"task_id": "CPP/24", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int largest = 1;\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n        }\n    }\n    return largest;\n}\n"}
{"task_id": "CPP/25", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> factors;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (count(numbers.begin(), numbers.end(), numbers[i]) == 1) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    for (int i = 0; i < str.size(); i++) {\n        if (islower(str[i])) {\n            str[i] = toupper(str[i]);\n        } else if (isupper(str[i])) {\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for (const string& s : strings) {\n        result += s;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.substr(0, prefix.size()) == prefix) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> positiveNumbers;\n    for (float num : l) {\n        if (num > 0) {\n            positiveNumbers.push_back(num);\n        }\n    }\n    return positiveNumbers;\n}\n"}
{"task_id": "CPP/31", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only one zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    double zero = 0.0;\n    for (int i = 0; i < xs.size(); i++) {\n        if (xs[i] != 0) {\n            zero = -xs[i] / xs[xs.size() - 1];\n            break;\n        }\n    }\n    return zero;\n}\n"}
{"task_id": "CPP/33", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> res = l;\n    for (int i = 0; i < l.size(); i++) {\n        if ((i + 1) % 3 == 0) {\n            res[i] = l[i];\n        }\n    }\n    sort(res.begin(), res.end());\n    return res;\n}\n"}
{"task_id": "CPP/34", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}\n"}
{"task_id": "CPP/35", "generation": "float max_element(vector<float> l){\n    float max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count = 0;\n    for (int i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            int num = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n                    count++;\n                }\n                num /= 10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> even_values;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            even_values.push_back(l[i]);\n        }\n    }\n    sort(even_values.begin(), even_values.end());\n    \n    vector<float> result;\n    int even_index = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            result.push_back(even_values[even_index]);\n            even_index++;\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/38", "generation": "#include <string>\nusing namespace std;\n\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    int i;\n    for (i = 0; i * 3 < l; i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x = s.substr(i * 3, 3);\n        if (x.length() == 3) \n            x = x.substr(1) + x[0];\n        output = output + x;\n    }\n    return output;\n}\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\n}\n"}
{"task_id": "CPP/39", "generation": "#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    int a = 1, b = 1, c, count = 2;\n    while (count < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (isPrime(c)) {\n            count++;\n        }\n    }\n    return b;\n}\n"}
{"task_id": "CPP/40", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    return n*(n-1)/2;\n}\n"}
{"task_id": "CPP/42", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    for (int i = 0; i < l.size(); i++) {\n        l[i]++;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n        if (l[i]+l[j]==0)\n            return true;\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x, int base){\n"}
{"task_id": "CPP/45", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n    return 0.5 * a * h;\n}\n"}
{"task_id": "CPP/46", "generation": "#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if (n == 0 || n == 1)\n        return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n    \n    int a = 0, b = 0, c = 2, d = 0, e = 0;\n    for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\n"}
{"task_id": "CPP/47", "generation": "float median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return l[n/2];\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int start = 0;\n    int end = text.size() - 1;\n    while (start < end) {\n        if (text[start] != text[end]) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "#include<stdio.h>\nusing namespace std;\nint modp(int n, int p){\n    if (p == 1) {\n        return 0;\n    }\n    int result = 1;\n    n = n % p;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            result = (result * n) % p;\n        }\n        n = n * n;\n        n = n % p;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/50", "generation": "#include <string>\nusing namespace std;\n\nstring encode_shift(string s){\n    string out;\n    for (int i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] + 5 - (int)'a') % 26 + (int)'a';\n        out += (char)w;\n    }\n    return out;\n}\n\nstring decode_shift(string s){\n    string out;\n    for (int i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out += (char)w;\n    }\n    return out;\n}\n"}
{"task_id": "CPP/51", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string vowels = \"aeiouAEIOU\";\n    text.erase(remove_if(text.begin(), text.end(), [&](char c) { return vowels.find(c) != string::npos; }), text.end());\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int> l, int t){\n"}
{"task_id": "CPP/53", "generation": "#include<stdio.h>\n#include<stdlib.h>\nint add(int x,int y){\n    return x + y;\n}\n"}
{"task_id": "CPP/54", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0, string s1) {\n"}
{"task_id": "CPP/55", "generation": "int fib(int n){\n    if (n <= 1) {\n        return n;\n    }\n    int a = 0, b = 1;\n    for (int i = 2; i <= n; i++) {\n        int temp = b;\n        b = a + b;\n        a = temp;\n    }\n    return b;\n}\n"}
{"task_id": "CPP/56", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            count++;\n        } else if (bracket == '>') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    bool increasing = true, decreasing = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\n"}
{"task_id": "CPP/58", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1, vector<int> l2){\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    \n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(result));\n    \n    result.erase(unique(result.begin(), result.end()), result.end());\n    \n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int factor = 2;\n    while (n > 1) {\n        if (n % factor == 0) {\n            n /= factor;\n        } else {\n            factor++;\n        }\n    }\n    return factor;\n}\n"}
{"task_id": "CPP/60", "generation": "int sum_to_n(int n){\n    return n * (n + 1) / 2;\n}\n"}
{"task_id": "CPP/61", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            count++;\n        } else if (bracket == ')') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(xs[i]*i);\n    return out;\n}\n"}
{"task_id": "CPP/63", "generation": "#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if (n == 0 || n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    int a = 0, b = 0, c = 1, d;\n    for (int i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    transform(s.begin(), s.end(), s.begin(), ::tolower);\n    int count = 0;\n    for(char c : s){\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n            count++;\n        }\n    }\n    if(s.back() == 'y'){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x, int shift){\n"}
{"task_id": "CPP/66", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += c;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s, int n) {\n"}
{"task_id": "CPP/68", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> result = {};\n    int smallestEven = INT_MAX;\n    int smallestIndex = INT_MAX;\n    \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < smallestEven) {\n            smallestEven = arr[i];\n            smallestIndex = i;\n        } else if (arr[i] % 2 == 0 && arr[i] == smallestEven && i < smallestIndex) {\n            smallestIndex = i;\n        }\n    }\n    \n    if (smallestEven != INT_MAX) {\n        result.push_back(smallestEven);\n        result.push_back(smallestIndex);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/69", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int res = -1;\n    for (int num : lst) {\n        int freq = 0;\n        for (int i : lst) {\n            if (i == num) {\n                freq++;\n            }\n        }\n        if (freq >= num && num > res) {\n            res = num;\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/70", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    sort(lst.begin(), lst.end());\n    vector<int> result;\n    int left = 0, right = lst.size() - 1;\n    while (left <= right) {\n        if (left == right) {\n            result.push_back(lst[left]);\n            break;\n        }\n        result.push_back(lst[left]);\n        result.push_back(lst[right]);\n        left++;\n        right--;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float b, float c){\n    if (a + b > c && a + c > b && b + c > a) {\n        float s = (a + b + c) / 2;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100;\n    } else {\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    for (int i = 0; i < q.size() / 2; i++) {\n        if (q[i] != q[q.size() - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/73", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int changes = 0;\n    for (int i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n            changes++;\n        }\n    }\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1, vector<string> lst2){\n    int totalChars1 = 0, totalChars2 = 0;\n    for (const string& str : lst1) {\n        totalChars1 += str.size();\n    }\n    for (const string& str : lst2) {\n        totalChars2 += str.size();\n    }\n    \n    if (totalChars1 < totalChars2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n    if (a < 2) return false;\n    for (int i = 2; i <= a / 2; i++) {\n        if (a % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x, int n) {\n    if (x <= 0 || n <= 0) {\n        return false;\n    }\n    double result = log(x) / log(n);\n    return (result - (int)result == 0);\n}\n"}
{"task_id": "CPP/77", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    int cubeRoot = cbrt(a);\n    return cubeRoot * cubeRoot * cubeRoot == a;\n}\n"}
{"task_id": "CPP/78", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    int count = 0;\n    for (char c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string binary = \"db\";\n    if (decimal == 0) {\n        binary += \"0\";\n    } else {\n        while (decimal > 0) {\n            binary = (decimal % 2 == 0 ? \"0\" : \"1\") + binary;\n            decimal /= 2;\n        }\n    }\n    binary += \"db\";\n    return binary;\n}\n"}
{"task_id": "CPP/80", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if (s.length() < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length() - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> result;\n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            result.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            result.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            result.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            result.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            result.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            result.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            result.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            result.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            result.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            result.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            result.push_back(\"D\");\n        } else if (gpa >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/82", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int n = str.length();\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    int count = 0;\n    if (n == 1) {\n        return 2; // Numbers 1 and 10\n    }\n    count = 2 * 9 * (n - 1); // Numbers starting with 1 + Numbers ending with 1\n    return count;\n}\n"}
{"task_id": "CPP/84", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    int sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    return bitset<8>(sum).to_string();\n}\n"}
{"task_id": "CPP/85", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string result = \"\";\n    string word = \"\";\n    for (char c : s) {\n        if (c == ' ') {\n            sort(word.begin(), word.end());\n            result += word + \" \";\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        sort(word.begin(), word.end());\n        result += word;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    vector<int> sortedArray = array;\n    if (array.empty()) {\n        return sortedArray;\n    }\n    \n    int sum = array[0] + array[array.size() - 1];\n    if (sum % 2 == 0) {\n        sort(sortedArray.begin(), sortedArray.end(), greater<int>());\n    } else {\n        sort(sortedArray.begin(), sortedArray.end());\n    }\n    \n    return sortedArray;\n}\n"}
{"task_id": "CPP/89", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string encrypted = \"\";\n    for (char c : s) {\n        if (isalpha(c)) {\n            char base = isupper(c) ? 'A' : 'a';\n            char encryptedChar = base + (c - base + 2 * 2) % 26;\n            encrypted += encryptedChar;\n        } else {\n            encrypted += c;\n        }\n    }\n    return encrypted;\n}\n"}
{"task_id": "CPP/90", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    if(lst.size() < 2) {\n        return -1;\n    }\n    sort(lst.begin(), lst.end());\n    int smallest = lst[0];\n    for(int i = 1; i < lst.size(); i++) {\n        if(lst[i] > smallest) {\n            return lst[i];\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/91", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int count = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if (S[i] == 'I' && (i == 0 || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!')) {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a, float b, float c){\n    if (a == (b + c) || b == (a + c) || c == (a + b)) {\n        if (a == int(a) && b == int(b) && c == int(c)) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    string encodedMessage = \"\";\n    for (char c : message) {\n        if (isalpha(c)) {\n            // Swap case\n            if (islower(c)) {\n                encodedMessage += toupper(c);\n            } else {\n                encodedMessage += tolower(c);\n            }\n            // Replace vowels\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n                c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                encodedMessage += c + 2;\n            } else {\n                encodedMessage += c;\n            }\n        } else {\n            encodedMessage += c;\n        }\n    }\n    return encodedMessage;\n}\n"}
{"task_id": "CPP/94", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int maxPrime = 0;\n    for (int num : lst) {\n        if (num <= 1) {\n            continue;\n        }\n        bool isPrime = true;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime && num > maxPrime) {\n            maxPrime = num;\n        }\n    }\n    int sumDigits = 0;\n    while (maxPrime > 0) {\n        sumDigits += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sumDigits;\n}\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    if(dict.empty()){\n        return false;\n    }\n    for(auto const& element : dict) {\n        string key = element.first;\n        for(char c : key) {\n            if(!isalpha(c)) {\n                return false;\n            }\n        }\n        bool isLower = true;\n        bool isUpper = true;\n        for(char c : key) {\n            if(!islower(c)) {\n                isLower = false;\n            }\n            if(!isupper(c)) {\n                isUpper = false;\n            }\n        }\n        if(!isLower && !isUpper) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nbool isPrime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvector<int> count_up_to(int n) {\n    vector<int> primes;\n    for (int i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a, int b){\n    int unitA = abs(a) % 10;\n    int unitB = abs(b) % 10;\n    return unitA * unitB;\n}\n"}
{"task_id": "CPP/98", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s[i];\n        if (isupper(c) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    double num = stod(value);\n    int lower = floor(num);\n    int upper = ceil(num);\n    if (num - lower < upper - num) {\n        return lower;\n    } else {\n        return upper;\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> stones;\n    stones.push_back(n);\n    for (int i = 1; i < n; i++) {\n        if (n % 2 == 0) {\n            n += 2;\n        } else {\n            n += 1;\n        }\n        stones.push_back(n);\n    }\n    return stones;\n}\n"}
{"task_id": "CPP/101", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n    for (char c : s) {\n        if (c == ' ' || c == ',') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "#include<stdio.h>\nusing namespace std;\nint choose_num(int x, int y){\n"}
{"task_id": "CPP/103", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n, int m) {\n    if (n > m) {\n        return \"-1\";\n    }\n    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = round((double)sum / (m - n + 1));\n    return bitset<32>(avg).to_string().substr(32 - (int)log2(avg) - 1);\n}\n"}
{"task_id": "CPP/104", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for (int num : x) {\n        int temp = num;\n        bool hasEvenDigit = false;\n        while (temp > 0) {\n            int digit = temp % 10;\n            if (digit % 2 == 0) {\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if (!hasEvenDigit) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    vector<int> sorted;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            sorted.push_back(num);\n        }\n    }\n    sort(sorted.begin(), sorted.end());\n    reverse(sorted.begin(), sorted.end());\n    \n    map<int, string> numToString = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n    \n    vector<string> result;\n    for (int num : sorted) {\n        result.push_back(numToString[num]);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> result;\n    int factorial = 1;\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            factorial *= i;\n            result.push_back(factorial);\n        } else {\n            sum += i;\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> result = {0, 0};\n    for (int i = 1; i <= n; i++) {\n        string num = to_string(i);\n        string rev_num = num;\n        reverse(rev_num.begin(), rev_num.end());\n        if (num == rev_num) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for (int num : n) {\n        int sum = 0;\n        int numCopy = num;\n        while (numCopy != 0) {\n            sum += abs(numCopy % 10);\n            numCopy /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if(arr.empty()) {\n        return true;\n    }\n    int n = arr.size();\n    int minIndex = 0;\n    for(int i = 0; i < n; i++) {\n        if(arr[i] < arr[minIndex]) {\n            minIndex = i;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        if(arr[(minIndex + i) % n] != i + 1) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char,int> freq;\n    for (char c : test) {\n        if (c != ' ') {\n            freq[c]++;\n        }\n    }\n    int maxFreq = 0;\n    for (const auto& pair : freq) {\n        maxFreq = max(maxFreq, pair.second);\n    }\n    map<char,int> result;\n    for (const auto& pair : freq) {\n        if (pair.second == maxFreq) {\n            result[pair.first] = pair.second;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    string result = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    string reversed = result;\n    reverse(reversed.begin(), reversed.end());\n    bool isPalindrome = (result == reversed);\n    return {result, isPalindrome ? \"True\" : \"False\"};\n}\n"}
{"task_id": "CPP/113", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    vector<string> result;\n    for (string str : lst) {\n        int oddCount = 0;\n        for (char c : str) {\n            if ((c - '0') % 2 != 0) {\n                oddCount++;\n            }\n        }\n        string res = \"the number of odd elements \" + to_string(oddCount) + \"n the str\" + to_string(oddCount) + \"ng \" + str + \" of the \" + to_string(oddCount) + \"nput.\";\n        result.push_back(res);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    long long currentSum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        currentSum += nums[i];\n        minSum = min(minSum, currentSum);\n        if (currentSum > 0) {\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n"}
{"task_id": "CPP/115", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int count = 0;\n    for (int j = 0; j < grid[0].size(); j++) {\n        int sum = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            sum += grid[i][j];\n        }\n        count += sum / capacity;\n        if (sum % capacity != 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/116", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    auto count_ones = [](int num) {\n        int count = 0;\n        while (num) {\n            count += num & 1;\n            num >>= 1;\n        }\n        return count;\n    };\n    \n    sort(arr.begin(), arr.end(), [&](int a, int b) {\n        int onesA = count_ones(a);\n        int onesB = count_ones(b);\n        if (onesA == onesB) {\n            return a < b;\n        }\n        return onesA < onesB;\n    });\n    \n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s, int n) {\n    vector<string> words;\n    string currentWord = \"\";\n    int consonantCount = 0;\n    \n    auto processWord = [&]() {\n        if (consonantCount == n) {\n            words.push_back(currentWord);\n        }\n        currentWord = \"\";\n        consonantCount = 0;\n    };\n    \n    for (char c : s) {\n        if (c != ' ') {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                consonantCount++;\n            }\n            currentWord += c;\n        } else {\n            processWord();\n        }\n    }\n    \n    processWord();\n    \n    return words;\n}\n"}
{"task_id": "CPP/118", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    string vowels = \"aeiouAEIOU\";\n    int n = word.size();\n    for (int i = n - 2; i > 0; i--) {\n        if (vowels.find(word[i]) != string::npos && !isalpha(word[i - 1]) && !isalpha(word[i + 1])) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    int open = 0, close = 0;\n    for (string s : lst) {\n        for (char c : s) {\n            if (c == '(') {\n                open++;\n            } else {\n                if (open > 0) {\n                    open--;\n                } else {\n                    close++;\n                }\n            }\n        }\n    }\n    return open == 0 && close == 0 ? \"Yes\" : \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr, int k) {\n    sort(arr.begin(), arr.end(), greater<int>());\n    vector<int> result;\n    for (int i = 0; i < k; i++) {\n        result.push_back(arr[i]);\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> result;\n    for (int i = 1; i <= n; i++) {\n        int num = i;\n        while (num != 1) {\n            if (num % 2 != 0) {\n                result.push_back(num);\n            }\n            if (num % 2 == 0) {\n                num = num / 2;\n            } else {\n                num = 3 * num + 1;\n            }\n        }\n        result.push_back(1);\n    }\n    sort(result.begin(), result.end());\n    result.erase(unique(result.begin(), result.end()), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/124", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    if (date.size() != 10) {\n        return false;\n    }\n    \n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    \n    if (month < 1 || month > 12) {\n        return false;\n    }\n    \n    if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)) {\n        return false;\n    }\n    \n    if ((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)) {\n        return false;\n    }\n    \n    if (month == 2) {\n        if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        } else {\n            if (day < 1 || day > 28) {\n                return false;\n            }\n        }\n    }\n    \n    if (date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    \n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n    vector<string> words;\n    string word = \"\";\n    for (char c : txt) {\n        if (c == ' ' || c == ',') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    if (words.empty()) {\n        int oddLowercaseLetters = 0;\n        for (char c : txt) {\n            if (islower(c) && (c - 'a') % 2 == 1) {\n                oddLowercaseLetters++;\n            }\n        }\n        words.push_back(to_string(oddLowercaseLetters));\n    }\n    return words;\n}\n"}
{"task_id": "CPP/126", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    for (int i = 0; i < lst.size() - 2; i++) {\n        if (lst[i] == lst[i + 1] && lst[i] == lst[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection(vector<int> interval1, vector<int> interval2){\n"}
{"task_id": "CPP/128", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if (arr.empty()) {\n        return -32768;\n    }\n    int product = 1;\n    int sum = 0;\n    for (int num : arr) {\n        product *= (num > 0) ? 1 : (num < 0) ? -1 : 0;\n        sum += abs(num);\n    }\n    return product * sum;\n}\n"}
{"task_id": "CPP/129", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int n = grid.size();\n    int row = 0, col = 0;\n    vector<int> path;\n    for (int i = 0; i < k; i++) {\n        path.push_back(grid[row][col]);\n        if ((row + col) % 2 == 0) {\n            if (col == n - 1) {\n                row++;\n            } else if (row == 0) {\n                col++;\n            } else {\n                row--;\n                col++;\n            }\n        } else {\n            if (row == n - 1) {\n                col++;\n            } else if (col == 0) {\n                row++;\n            } else {\n                row++;\n                col--;\n            }\n        }\n    }\n    return path;\n}\n"}
{"task_id": "CPP/130", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> tribonacci(n + 1);\n    tribonacci[0] = 3;\n    if (n > 0) tribonacci[1] = 1;\n    if (n > 1) tribonacci[2] = 2;\n    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci[i] = 1 + i / 2;\n        } else {\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n        }\n    }\n    return tribonacci;\n}\n"}
{"task_id": "CPP/131", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int product = 1;\n    string numStr = to_string(n);\n    for (char c : numStr) {\n        int digit = c - '0';\n        if (digit % 2 != 0) {\n            product *= digit;\n        }\n    }\n    if (product == 1) {\n        return 0;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n    int count = 0;\n    for (char c : str) {\n        if (c == '[') {\n            count++;\n        } else if (c == ']' && count > 0) {\n            count--;\n        }\n    }\n    return count > 0;\n}\n"}
{"task_id": "CPP/133", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for (float num : lst) {\n        int rounded = ceil(num);\n        sum += rounded * rounded;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if(txt.empty()) {\n        return false;\n    }\n    char lastChar = txt.back();\n    if(isalpha(lastChar)) {\n        int i = txt.size() - 2;\n        while(i >= 0 && txt[i] != ' ') {\n            i--;\n        }\n        if(i == -1) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int index = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            index = i - 1;\n        }\n    }\n    return index;\n}\n"}
{"task_id": "CPP/136", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    int largest_negative = 0;\n    int smallest_positive = 0;\n    \n    for (int num : lst) {\n        if (num < 0 && num < largest_negative) {\n            largest_negative = num;\n        } else if (num > 0 && (num < smallest_positive || smallest_positive == 0)) {\n            smallest_positive = num;\n        }\n    }\n    \n    return {largest_negative, smallest_positive};\n}\n"}
{"task_id": "CPP/137", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a, boost::any b){\n    if (a.type() == typeid(int) && b.type() == typeid(int)) {\n        int intA = boost::any_cast<int>(a);\n        int intB = boost::any_cast<int>(b);\n        if (intA > intB) {\n            return intA;\n        } else if (intB > intA) {\n            return intB;\n        }\n    } else if (a.type() == typeid(float) && b.type() == typeid(float)) {\n        float floatA = boost::any_cast<float>(a);\n        float floatB = boost::any_cast<float>(b);\n        if (floatA > floatB) {\n            return floatA;\n        } else if (floatB > floatA) {\n            return floatB;\n        }\n    } else if (a.type() == typeid(std::string) && b.type() == typeid(std::string)) {\n        std::string strA = boost::any_cast<std::string>(a);\n        std::string strB = boost::any_cast<std::string>(b);\n        if (strA > strB) {\n            return strA;\n        } else if (strB > strA) {\n            return strB;\n        }\n    }\n    return \"None\";\n}\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if(n % 2 != 0 || n < 8) {\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/139", "generation": "#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long result = 1;\n    for (int i = n; i > 0; i--) {\n        long long factorial = 1;\n        for (int j = i; j > 0; j--) {\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string result = \"\";\n    int consecutiveSpaces = 0;\n    for (char c : text) {\n        if (c == ' ') {\n            consecutiveSpaces++;\n            if (consecutiveSpaces > 2) {\n                if (result.back() != '-') {\n                    result += '-';\n                }\n            } else {\n                result += '_';\n            }\n        } else {\n            result += c;\n            consecutiveSpaces = 0;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    int digits = 0;\n    int dots = 0;\n    int latinLetter = 0;\n    string extension = \"\";\n    \n    for (char c : file_name) {\n        if (c >= '0' && c <= '9') {\n            digits++;\n        } else if (c == '.') {\n            dots++;\n        } else if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n            latinLetter++;\n        }\n    }\n    \n    if (digits > 3 || dots != 1 || latinLetter == 0) {\n        return \"No\";\n    }\n    \n    size_t dotIndex = file_name.find('.');\n    extension = file_name.substr(dotIndex + 1);\n    \n    if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\") {\n        return \"No\";\n    }\n    \n    return \"Yes\";\n}\n"}
{"task_id": "CPP/142", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "#include<stdio.h>\n#include<string>\n#include<cmath>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    vector<string> words;\n    string word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n\n    string result = \"\";\n    for (const string& w : words) {\n        if (isPrime(w.size())) {\n            result += w + \" \";\n        }\n    }\n\n    if (!result.empty()) {\n        result.pop_back(); // Remove the extra space at the end\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x, string n){\n"}
{"task_id": "CPP/145", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n    auto sum_of_digits = [](int num) {\n        int sum = 0;\n        string num_str = to_string(abs(num));\n        for (char c : num_str) {\n            sum += c - '0';\n        }\n        return sum;\n    };\n\n    sort(nums.begin(), nums.end(), [&](int a, int b) {\n        int sum_a = sum_of_digits(a);\n        int sum_b = sum_of_digits(b);\n        if (sum_a == sum_b) {\n            return find(nums.begin(), nums.end(), a) < find(nums.begin(), nums.end(), b);\n        }\n        return sum_a < sum_b;\n    });\n\n    return nums;\n}\n"}
{"task_id": "CPP/146", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for (int num : nums) {\n        if (num > 10) {\n            string numStr = to_string(abs(num));\n            if (numStr.front() % 2 != 0 && numStr.back() % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_max_triples(int n){\n"}
{"task_id": "CPP/148", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1, string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    \n    int index1 = -1, index2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n            index1 = i;\n        }\n        if (planets[i] == planet2) {\n            index2 = i;\n        }\n    }\n    \n    if (index1 == -1 || index2 == -1) {\n        return result;\n    }\n    \n    int start = min(index1, index2);\n    int end = max(index1, index2);\n    \n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> result;\n    for (const string& word : lst) {\n        if (word.length() % 2 == 0) {\n            result.push_back(word);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    if (n <= 1) {\n        return y;\n    }\n    for (int i = 2; i*i <= n; i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n"}
{"task_id": "CPP/151", "generation": "long long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for (float num : lst) {\n        if (num > 0 && fmod(num, 2) == 1) {\n            sum += static_cast<long long>(pow(num, 2));\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for (int i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongestExtension = \"\";\n    int maxStrength = INT_MIN;\n    \n    for (const string& extension : extensions) {\n        int CAP = 0, SM = 0;\n        for (char c : extension) {\n            if (isupper(c)) {\n                CAP++;\n            } else if (islower(c)) {\n                SM++;\n            }\n        }\n        int strength = CAP - SM;\n        \n        if (strength > maxStrength || (strength == maxStrength && strongestExtension.empty())) {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongestExtension;\n}\n"}
{"task_id": "CPP/154", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a, string b){\n    if (a.length() != b.length()) {\n        return false;\n    }\n    string doubleA = a + a;\n    return doubleA.find(b) != string::npos;\n}\n"}
{"task_id": "CPP/155", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    string numStr = to_string(abs(num));\n    int evenCount = 0, oddCount = 0;\n    for (char c : numStr) {\n        int digit = c - '0';\n        if (digit % 2 == 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/156", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_roman(int number){\n    vector<pair<int, string>> romanMap = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n    \n    string result = \"\";\n    for (const auto& pair : romanMap) {\n        while (number >= pair.first) {\n            result += pair.second;\n            number -= pair.first;\n        }\n    }\n    \n    // Convert result to lowercase\n    for (char& c : result) {\n        c = tolower(c);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a, float b, float c){\n"}
{"task_id": "CPP/158", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    string maxWord = \"\";\n    int maxUniqueChars = 0;\n    \n    for (const string& word : words) {\n        int uniqueChars = unordered_set<char>(word.begin(), word.end()).size();\n        if (uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word < maxWord)) {\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        }\n    }\n    \n    return maxWord;\n}\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number, int need, int remaining){\n    int totalEaten = number + need;\n    int carrotsLeft = max(0, remaining - need);\n    return {totalEaten, carrotsLeft};\n}\n"}
{"task_id": "CPP/160", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nint do_algebra(vector<string> operato, vector<int> operand){\n    int result = operand[0];\n    for (int i = 0; i < operato.size(); i++) {\n        if (operato[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (operato[i] == \"//\") {\n            result /= operand[i + 1];\n        } else if (operato[i] == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    string result = \"\";\n    bool hasLetter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            hasLetter = true;\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += tolower(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n    if (!hasLetter) {\n        reverse(result.begin(), result.end());\n    }\n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    if (text.empty()) {\n        return \"None\";\n    }\n    \n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n    \n    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    \n    return string(mdString);\n}\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a, int b){\n    vector<int> result;\n    for (int i = a; i <= b; i++) {\n        if (i % 2 == 0 && i < 10) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (abs(numbers[i]-numbers[j])<threshold)\n            return true;\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> result;\n    int count = 0;\n    string current = \"\";\n    for (char c : paren_string) {\n        if (c == '(') {\n            count++;\n            if (count > 1) {\n                current += c;\n            }\n        } else if (c == ')') {\n            count--;\n            if (count > 0) {\n                current += c;\n            } else if (count == 0) {\n                result.push_back(current);\n                current = \"\";\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "float truncate_number(float number){\n    int integerPart = (int)number;\n    float decimalPart = number - integerPart;\n    return decimalPart;\n}\n"}
{"task_id": "CPP/3", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "float mean_absolute_deviation(vector<float> numbers){\n    float sum = 0;\n    for (float num : numbers) {\n        sum += num;\n    }\n    float mean = sum / numbers.size();\n    \n    float deviation_sum = 0;\n    for (float num : numbers) {\n        deviation_sum += abs(num - mean);\n    }\n    \n    return deviation_sum / numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i > 0) {\n            result.push_back(delimeter);\n        }\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> depths;\n    int currentDepth = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n            currentDepth++;\n            depths.push_back(currentDepth);\n        } else if (c == ')') {\n            depths.push_back(currentDepth);\n            currentDepth--;\n        }\n    }\n    vector<int> maxDepths;\n    int maxDepth = 0;\n    for (int depth : depths) {\n        if (depth > maxDepth) {\n            maxDepth = depth;\n        }\n        if (depth == 0) {\n            maxDepths.push_back(maxDepth);\n            maxDepth = 0;\n        }\n    }\n    return maxDepths;\n}\n"}
{"task_id": "CPP/7", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> result;\n    int maxNum = INT_MIN;\n    for (int i = 0; i < numbers.size(); i++) {\n        maxNum = max(maxNum, numbers[i]);\n        result.push_back(maxNum);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    string rev_str(str.rbegin(), str.rend());\n    for (int i = 0; i < str.size(); i++) {\n        if (is_palindrome(str.substr(i))) {\n            return str + rev_str.substr(0, str.size() - i);\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/11", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a, string b){\n    string result = \"\";\n    for(int i = 0; i < a.size(); i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if (strings.empty()) {\n        return \"None\";\n    }\n    string longestStr = strings[0];\n    for (const string& str : strings) {\n        if (str.length() > longestStr.length() || (str.length() == longestStr.length() && str < longestStr)) {\n            longestStr = str;\n        }\n    }\n    return longestStr;\n}\n"}
{"task_id": "CPP/13", "generation": "#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n"}
{"task_id": "CPP/14", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> prefixes;\n    string prefix = \"\";\n    for (char c : str) {\n        prefix += c;\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "#include <string>\n\nstd::string string_sequence(int n) {\n    std::string result;\n    for (int i = 0; i <= n; i++) {\n        result += std::to_string(i);\n        if (i < n) {\n            result += \" \";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    sort(str.begin(), str.end());\n    int count = 0;\n    for (int i = 0; i < str.size(); i++) {\n        if (i == 0 || str[i] != str[i - 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/17", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){\n    vector<int> beats;\n    int i = 0;\n    while (i < music_string.size()) {\n        if (music_string[i] == 'o') {\n            if (i + 1 < music_string.size() && music_string[i + 1] == '|') {\n                beats.push_back(2);\n                i += 2;\n            } else {\n                beats.push_back(4);\n                i++;\n            }\n        } else if (music_string[i] == '.') {\n            beats.push_back(1);\n            i += 2;\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str, string substring){\n    int count = 0;\n    size_t pos = 0;\n    while ((pos = str.find(substring, pos)) != string::npos) {\n        count++;\n        pos += 1;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<string, int> numberMap = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n\n    // Split the input string into individual numbers\n    vector<string> tokens;\n    string token;\n    stringstream ss(numbers);\n    while (ss >> token) {\n        tokens.push_back(token);\n    }\n\n    // Sort the numbers based on their integer values\n    sort(tokens.begin(), tokens.end(), [&](const string& a, const string& b) {\n        return numberMap[a] < numberMap[b];\n    });\n\n    // Construct the sorted string\n    string sortedNumbers;\n    for (const string& num : tokens) {\n        sortedNumbers += num + \" \";\n    }\n\n    // Remove the extra space at the end\n    sortedNumbers.pop_back();\n\n    return sortedNumbers;\n}\n"}
{"task_id": "CPP/20", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n"}
{"task_id": "CPP/21", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){\n    float min_num = *min_element(numbers.begin(), numbers.end());\n    float max_num = *max_element(numbers.begin(), numbers.end());\n    vector<float> rescaled_numbers;\n    for (float num : numbers) {\n        float rescaled_num = (num - min_num) / (max_num - min_num);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n    return rescaled_numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for (const auto& val : values) {\n        try {\n            int num = boost::any_cast<int>(val);\n            result.push_back(num);\n        } catch (const boost::bad_any_cast&) {\n            continue;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    return str.length();\n}\n"}
{"task_id": "CPP/24", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n"}
{"task_id": "CPP/25", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> factors;\n    for (int i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (count(numbers.begin(), numbers.end(), numbers[i]) == 1) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    for (int i = 0; i < str.length(); i++) {\n        if (islower(str[i])) {\n            str[i] = toupper(str[i]);\n        } else if (isupper(str[i])) {\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for (const string& str : strings) {\n        result += str;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(prefix) == 0) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> positiveNumbers;\n    for (float num : l) {\n        if (num > 0) {\n            positiveNumbers.push_back(num);\n        }\n    }\n    return positiveNumbers;\n}\n"}
{"task_id": "CPP/31", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n <= 1) {\n        return false;\n    }\n    for (long long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only one zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    double zero = 0.0;\n    for (int i = 0; i < xs.size(); i++) {\n        if (xs[i] != 0) {\n            zero = -xs[i] / xs[xs.size() - 1];\n            break;\n        }\n    }\n    return zero;\n}\n"}
{"task_id": "CPP/33", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> l_prime = l;\n    for (int i = 0; i < l.size(); i++) {\n        if ((i + 1) % 3 == 0) {\n            vector<int> temp;\n            for (int j = i; j < l.size(); j += 3) {\n                temp.push_back(l[j]);\n            }\n            sort(temp.begin(), temp.end());\n            int index = 0;\n            for (int j = i; j < l.size(); j += 3) {\n                l_prime[j] = temp[index];\n                index++;\n            }\n        }\n    }\n    return l_prime;\n}\n"}
{"task_id": "CPP/34", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}\n"}
{"task_id": "CPP/35", "generation": "float max_element(vector<float> l){\n    float max_val = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n    return max_val;\n}\n"}
{"task_id": "CPP/36", "generation": "#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count = 0;\n    for (int i = 1; i < n; i++) {\n        if ((i % 11 == 0 || i % 13 == 0) && to_string(i).find('7') != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> even_values;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            even_values.push_back(l[i]);\n        }\n    }\n    sort(even_values.begin(), even_values.end());\n    \n    vector<float> result;\n    int even_index = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            result.push_back(even_values[even_index]);\n            even_index++;\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/38", "generation": "#include <string>\nusing namespace std;\n\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    int i;\n    for (i = 0; i * 3 < l; i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x = s.substr(i * 3, 3);\n        if (x.length() == 3) \n            x = x.substr(1) + x[0];\n        output = output + x;\n    }\n    return output;\n}\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\n}\n"}
{"task_id": "CPP/39", "generation": "#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return 3;\n    }\n    int count = 2;\n    int a = 2, b = 3, c;\n    while (count < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        count++;\n        bool isPrime = true;\n        for (int i = 2; i * i <= c; i++) {\n            if (c % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            count++;\n        }\n    }\n    return c;\n}\n"}
{"task_id": "CPP/40", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0)\n            return true;\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    return n * (n - 1) / 2;\n}\n"}
{"task_id": "CPP/42", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    for (int i = 0; i < l.size(); i++) {\n        l[i]++;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n        if (l[i]+l[j]==0)\n            return true;\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x, int base){\n"}
{"task_id": "CPP/45", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n    return 0.5 * a * h;\n}\n"}
{"task_id": "CPP/46", "generation": "#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if (n == 0 || n == 1)\n        return 0;\n    if (n == 2)\n        return 2;\n    int a = 0, b = 0, c = 2, d = 0, sum = 0;\n    for (int i = 3; i <= n; i++) {\n        sum = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = sum;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/47", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return l[n/2];\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.size() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "#include<stdio.h>\nusing namespace std;\nint modp(int n, int p){\n    if (n == 0) {\n        return 1;\n    }\n    int result = 1;\n    for (int i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/50", "generation": "string decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n"}
{"task_id": "CPP/51", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string vowels = \"aeiouAEIOU\";\n    text.erase(remove_if(text.begin(), text.end(), [&](char c) {\n        return vowels.find(c) != string::npos;\n    }), text.end());\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int> l, int t){\n"}
{"task_id": "CPP/53", "generation": "int add(int x, int y){\n    return x + y;\n}\n"}
{"task_id": "CPP/54", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0, string s1){\n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    return s0 == s1;\n}\n"}
{"task_id": "CPP/55", "generation": "int fib(int n){\n    if (n <= 1) {\n        return n;\n    }\n    int a = 0, b = 1;\n    for (int i = 2; i <= n; i++) {\n        int temp = b;\n        b = a + b;\n        a = temp;\n    }\n    return b;\n}\n"}
{"task_id": "CPP/56", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            count++;\n        } else if (bracket == '>') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n"}
{"task_id": "CPP/58", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    \n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(result));\n    \n    result.erase(unique(result.begin(), result.end()), result.end());\n    \n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int factor = 2;\n    while (n > 1) {\n        if (n % factor == 0) {\n            n /= factor;\n        } else {\n            factor++;\n        }\n    }\n    return factor;\n}\n"}
{"task_id": "CPP/60", "generation": "int sum_to_n(int n){\n    return n * (n + 1) / 2;\n}\n"}
{"task_id": "CPP/61", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            count++;\n        } else if (bracket == ')') {\n            count--;\n            if (count < 0) {\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if (n == 0 || n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    int a = 0, b = 0, c = 1, d;\n    for (int i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    transform(s.begin(), s.end(), s.begin(), ::tolower);\n    int count = 0;\n    for(char c : s){\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n            count++;\n        }\n    }\n    if(!s.empty() && (s.back() == 'y' || s.back() == 'Y')){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x, int shift){\n"}
{"task_id": "CPP/66", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(char c : s){\n        if(isupper(c)){\n            sum += c;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s, int n) {\n"}
{"task_id": "CPP/68", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> result = {};\n    int smallestEven = INT_MAX;\n    int smallestEvenIndex = -1;\n    \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < smallestEven) {\n            smallestEven = arr[i];\n            smallestEvenIndex = i;\n        }\n    }\n    \n    if (smallestEvenIndex != -1) {\n        result.push_back(smallestEven);\n        result.push_back(smallestEvenIndex);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/69", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int res = -1;\n    for (int num : lst) {\n        int freq = 0;\n        for (int i : lst) {\n            if (i == num) {\n                freq++;\n            }\n        }\n        if (freq >= num && num > res) {\n            res = num;\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/70", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    sort(lst.begin(), lst.end());\n    vector<int> result;\n    int n = lst.size();\n    int i = 0, j = n - 1;\n    while (i <= j) {\n        if (i == j) {\n            result.push_back(lst[i]);\n            break;\n        }\n        result.push_back(lst[i]);\n        result.push_back(lst[j]);\n        i++;\n        j--;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float b, float c){\n    if (a + b > c && a + c > b && b + c > a) {\n        float s = (a + b + c) / 2;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100;\n    } else {\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    for (int i = 0; i < q.size() / 2; i++) {\n        if (q[i] != q[q.size() - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/73", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int changes = 0;\n    for (int i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - 1 - i]) {\n            changes++;\n        }\n    }\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int totalChars1 = 0, totalChars2 = 0;\n    for (const string& str : lst1) {\n        totalChars1 += str.size();\n    }\n    for (const string& str : lst2) {\n        totalChars2 += str.size();\n    }\n    if (totalChars1 < totalChars2 || (totalChars1 == totalChars2 && !lst1.empty())) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n    if (a < 30) return false;\n    int primes[25] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n    for (int i = 0; i < 25; i++) {\n        for (int j = i + 1; j < 25; j++) {\n            for (int k = j + 1; k < 25; k++) {\n                if (primes[i] * primes[j] * primes[k] == a) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x, int n) {\n    if (x == 1) {\n        return true;\n    }\n    int power = 0;\n    while (pow(n, power) < x) {\n        power++;\n    }\n    return pow(n, power) == x;\n}\n"}
{"task_id": "CPP/77", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    int cubeRoot = cbrt(a);\n    return cubeRoot * cubeRoot * cubeRoot == a;\n}\n"}
{"task_id": "CPP/78", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    int count = 0;\n    for (char c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string binary = \"db\";\n    if (decimal == 0) {\n        binary += \"0\";\n    } else {\n        while (decimal > 0) {\n            binary = (decimal % 2 == 0 ? \"0\" : \"1\") + binary;\n            decimal /= 2;\n        }\n    }\n    binary += \"db\";\n    return binary;\n}\n"}
{"task_id": "CPP/80", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if (s.length() < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length() - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letter_grades;\n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int n = str.length();\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    int count = 0;\n    if (n == 1) {\n        return 2; // Numbers 1 and 10\n    } else {\n        count = 2 * 9 * (n - 1); // Numbers starting with 1 and ending with 1\n        return count;\n    }\n}\n"}
{"task_id": "CPP/84", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    int sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    return bitset<32>(sum).to_string();\n}\n"}
{"task_id": "CPP/85", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string result = \"\";\n    string word = \"\";\n    for (char c : s) {\n        if (c == ' ') {\n            sort(word.begin(), word.end());\n            result += word + \" \";\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        sort(word.begin(), word.end());\n        result += word;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    vector<int> sortedArray = array;\n    if (array.empty()) {\n        return sortedArray;\n    }\n    int sum = array[0] + array[array.size() - 1];\n    if (sum % 2 == 0) {\n        sort(sortedArray.begin(), sortedArray.end(), greater<int>());\n    } else {\n        sort(sortedArray.begin(), sortedArray.end());\n    }\n    return sortedArray;\n}\n"}
{"task_id": "CPP/89", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string result = \"\";\n    for (char c : s) {\n        if (isalpha(c)) {\n            char base = islower(c) ? 'a' : 'A';\n            result += (c - base + 2 * 2) % 26 + base;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/90", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    if (lst.size() < 2) {\n        return -1;\n    }\n    sort(lst.begin(), lst.end());\n    int smallest = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > smallest) {\n            return lst[i];\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/91", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int count = 0;\n    size_t pos = 0;\n    while ((pos = S.find(\"I\", pos)) != string::npos) {\n        if (pos == 0 || S[pos - 1] == '.' || S[pos - 1] == '?' || S[pos - 1] == '!') {\n            count++;\n        }\n        pos++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a, float b, float c){\n    if (a == int(a) && b == int(b) && c == int(c)) {\n        if (a == b + c || b == a + c || c == a + b) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    for (int i=0;i<message.size();i++){\n        if (isalpha(message[i])){\n            if (isupper(message[i])){\n                message[i]=tolower(message[i]);\n            }\n            else{\n                message[i]=toupper(message[i]);\n            }\n            if (message[i]=='a' or message[i]=='e' or message[i]=='i' or message[i]=='o' or message[i]=='u'){\n                message[i]=message[i]+2;\n            }\n        }\n    }\n    return message;\n}\n"}
{"task_id": "CPP/94", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int maxPrime = 0;\n    for (int num : lst) {\n        if (num <= 1) {\n            continue;\n        }\n        bool isPrime = true;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime && num > maxPrime) {\n            maxPrime = num;\n        }\n    }\n    int sumDigits = 0;\n    while (maxPrime > 0) {\n        sumDigits += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sumDigits;\n}\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    if(dict.empty()){\n        return false;\n    }\n    for(auto const& element : dict) {\n        string key = element.first;\n        for(char c : key) {\n            if(!isalpha(c)) {\n                return false;\n            }\n        }\n        bool isLower = all_of(key.begin(), key.end(), ::islower);\n        bool isUpper = all_of(key.begin(), key.end(), ::isupper);\n        if(!isLower && !isUpper) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> primes;\n    if (n < 2) {\n        return primes;\n    }\n    vector<bool> isPrime(n, true);\n    isPrime[0] = isPrime[1] = false;\n    \n    for (int i = 2; i <= sqrt(n); i++) {\n        if (isPrime[i]) {\n            for (int j = i * i; j < n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n    \n    for (int i = 2; i < n; i++) {\n        if (isPrime[i]) {\n            primes.push_back(i);\n        }\n    }\n    \n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a, int b){\n    int unitA = abs(a) % 10;\n    int unitB = abs(b) % 10;\n    return unitA * unitB;\n}\n"}
{"task_id": "CPP/98", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s[i];\n        if (isupper(c) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    double num = stod(value);\n    int lower = floor(num);\n    int upper = ceil(num);\n    if (num - lower < upper - num) {\n        return lower;\n    } else {\n        return upper;\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> stones;\n    stones.push_back(n);\n    for (int i = 1; i < n; i++) {\n        if (n % 2 == 0) {\n            n += 2;\n        } else {\n            n += 1;\n        }\n        stones.push_back(n);\n    }\n    return stones;\n}\n"}
{"task_id": "CPP/101", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n    for (char c : s) {\n        if (c == ' ' || c == ',') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "#include<stdio.h>\nusing namespace std;\nint choose_num(int x, int y){\n"}
{"task_id": "CPP/103", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n, int m) {\n    if (n > m) {\n        return \"-1\";\n    }\n    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = round((double)sum / (m - n + 1));\n    string binary = bitset<32>(avg).to_string();\n    size_t pos = binary.find('1');\n    return (pos == string::npos) ? \"0\" : binary.substr(pos);\n}\n"}
{"task_id": "CPP/104", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for (int num : x) {\n        int temp = num;\n        bool hasEvenDigit = false;\n        while (temp > 0) {\n            int digit = temp % 10;\n            if (digit % 2 == 0) {\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if (!hasEvenDigit) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    vector<int> sorted_arr;\n    vector<string> result;\n    map<int, string> num_to_word = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n\n    // Sort the integers between 1 and 9 inclusive\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            sorted_arr.push_back(num);\n        }\n    }\n    sort(sorted_arr.begin(), sorted_arr.end());\n\n    // Reverse the sorted array and replace digits with corresponding names\n    for (int i = sorted_arr.size() - 1; i >= 0; i--) {\n        result.push_back(num_to_word[sorted_arr[i]]);\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> result;\n    int factorial = 1;\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            factorial *= i;\n            result.push_back(factorial);\n        } else {\n            sum += i;\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> result = {0, 0};\n    for (int i = 1; i <= n; i++) {\n        string num = to_string(i);\n        string revNum = num;\n        reverse(revNum.begin(), revNum.end());\n        if (num == revNum) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for (int num : n) {\n        int sum = 0;\n        int temp = abs(num);\n        while (temp != 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if (arr.empty()) {\n        return true;\n    }\n    int n = arr.size();\n    int minIndex = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] < arr[minIndex]) {\n            minIndex = i;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (arr[(minIndex + i) % n] != i + 1) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1, vector<int> lst2){\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char,int> result;\n    for (char c : test) {\n        if (c != ' ') {\n            result[c]++;\n        }\n    }\n    \n    int maxCount = 0;\n    for (const auto& pair : result) {\n        maxCount = max(maxCount, pair.second);\n    }\n    \n    map<char,int> output;\n    for (const auto& pair : result) {\n        if (pair.second == maxCount) {\n            output[pair.first] = pair.second;\n        }\n    }\n    \n    return output;\n}\n"}
{"task_id": "CPP/112", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    string result = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    string reversed = result;\n    reverse(reversed.begin(), reversed.end());\n    bool isPalindrome = (result == reversed);\n    return {result, isPalindrome ? \"True\" : \"False\"};\n}\n"}
{"task_id": "CPP/113", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    vector<string> result;\n    for (string str : lst) {\n        int oddCount = 0;\n        for (char c : str) {\n            if ((c - '0') % 2 != 0) {\n                oddCount++;\n            }\n        }\n        string newStr = \"the number of odd elements \" + to_string(oddCount) + \"n the str\" + to_string(oddCount) + \"ng \" + str + \" of the \" + to_string(oddCount) + \"nput.\";\n        result.push_back(newStr);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    long long currentSum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        currentSum += nums[i];\n        minSum = min(minSum, currentSum);\n        if (currentSum > 0) {\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n"}
{"task_id": "CPP/115", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int numOperations = 0;\n    for (int j = 0; j < grid[0].size(); j++) {\n        int waterLevel = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            if (grid[i][j] == 1) {\n                int diff = grid.size() - i - waterLevel;\n                if (diff > 0) {\n                    numOperations += diff;\n                    waterLevel += diff;\n                }\n                waterLevel--;\n            }\n        }\n        numOperations += waterLevel / capacity;\n        if (waterLevel % capacity != 0) {\n            numOperations++;\n        }\n    }\n    return numOperations;\n}\n"}
{"task_id": "CPP/116", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        int countA = __builtin_popcount(a);\n        int countB = __builtin_popcount(b);\n        if (countA == countB) {\n            return a < b;\n        }\n        return countA < countB;\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    vector<string> words;\n    string currentWord = \"\";\n    int consonantCount = 0;\n    for (char c : s) {\n        if (c != ' ') {\n            currentWord += c;\n            if (tolower(c) != 'a' && tolower(c) != 'e' && tolower(c) != 'i' && tolower(c) != 'o' && tolower(c) != 'u') {\n                consonantCount++;\n            }\n        } else {\n            if (consonantCount == n) {\n                words.push_back(currentWord);\n            }\n            currentWord = \"\";\n            consonantCount = 0;\n        }\n    }\n    if (consonantCount == n) {\n        words.push_back(currentWord);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/118", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    string vowels = \"aeiouAEIOU\";\n    int n = word.size();\n    for (int i = n - 2; i > 0; i--) {\n        if (vowels.find(word[i]) != string::npos && !isalpha(word[i - 1]) && !isalpha(word[i + 1])) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n"}
{"task_id": "CPP/120", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr, int k) {\n    sort(arr.begin(), arr.end(), greater<int>());\n    vector<int> result;\n    for (int i = 0; i < k; i++) {\n        result.push_back(arr[i]);\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> result;\n    for (int i = 1; i <= n; i++) {\n        int num = i;\n        while (num != 1) {\n            if (num % 2 == 0) {\n                num = num / 2;\n            } else {\n                num = 3 * num + 1;\n            }\n            if (num % 2 != 0 && find(result.begin(), result.end(), num) == result.end()) {\n                result.push_back(num);\n            }\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/124", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    if (date.empty()) {\n        return false;\n    }\n    \n    int month, day, year;\n    if (sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year) != 3) {\n        return false;\n    }\n    \n    if (month < 1 || month > 12) {\n        return false;\n    }\n    \n    if (day < 1 || day > 31) {\n        return false;\n    }\n    \n    if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n        return false;\n    }\n    \n    if (month == 2) {\n        if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n            if (day > 29) {\n                return false;\n            }\n        } else {\n            if (day > 28) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n    vector<string> words;\n    string word = \"\";\n    for (char c : txt) {\n        if (c == ' ' || c == ',') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    if (words.empty()) {\n        int count = 0;\n        for (char c : txt) {\n            if (islower(c) && (c - 'a') % 2 == 1) {\n                count++;\n            }\n        }\n        words.push_back(to_string(count));\n    }\n    return words;\n}\n"}
{"task_id": "CPP/126", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    int count[100] = {0};\n    for (int i = 0; i < lst.size(); i++) {\n        count[lst[i]]++;\n        if (count[lst[i]] > 2) {\n            return false;\n        }\n    }\n    vector<int> sorted_lst = lst;\n    sort(sorted_lst.begin(), sorted_lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] != sorted_lst[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection(vector<int> interval1, vector<int> interval2){\n"}
{"task_id": "CPP/128", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if (arr.empty()) {\n        return -32768;\n    }\n    int sum = 0;\n    int product = 1;\n    for (int num : arr) {\n        sum += abs(num);\n        if (num > 0) {\n            product *= 1;\n        } else if (num < 0) {\n            product *= -1;\n        }\n    }\n    return sum * product;\n}\n"}
{"task_id": "CPP/129", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int n = grid.size();\n    int m = grid[0].size();\n    vector<int> path;\n    int x = 0, y = 0;\n    for (int i = 0; i < k; i++) {\n        path.push_back(grid[x][y]);\n        if ((x + y) % 2 == 0) {\n            if (y == m - 1) {\n                x++;\n            } else if (x == 0) {\n                y++;\n            } else {\n                x--;\n                y++;\n            }\n        } else {\n            if (x == n - 1) {\n                y++;\n            } else if (y == 0) {\n                x++;\n            } else {\n                x++;\n                y--;\n            }\n        }\n    }\n    return path;\n}\n"}
{"task_id": "CPP/130", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> tribonacci(n + 1, 0);\n    tribonacci[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci[i] = 1 + i / 2;\n        } else {\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n        }\n    }\n    return tribonacci;\n}\n"}
{"task_id": "CPP/131", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int product = 1;\n    string numStr = to_string(n);\n    for (char c : numStr) {\n        int digit = c - '0';\n        if (digit % 2 != 0) {\n            product *= digit;\n        }\n    }\n    if (product == 1) {\n        return 0;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n    int count = 0;\n    for (char c : str) {\n        if (c == '[') {\n            count++;\n        } else if (c == ']' && count > 0) {\n            count--;\n        }\n    }\n    return count > 0;\n}\n"}
{"task_id": "CPP/133", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for (float num : lst) {\n        int rounded = ceil(num);\n        sum += rounded * rounded;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.empty()) {\n        return false;\n    }\n    char lastChar = txt.back();\n    if (isalpha(lastChar)) {\n        int i = txt.size() - 2;\n        while (i >= 0 && txt[i] != ' ') {\n            i--;\n        }\n        if (i < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int index = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            index = i - 1;\n        }\n    }\n    return index;\n}\n"}
{"task_id": "CPP/136", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    int largest_negative = 0;\n    int smallest_positive = 0;\n    \n    for (int num : lst) {\n        if (num < 0 && num < largest_negative) {\n            largest_negative = num;\n        } else if (num > 0 && (num < smallest_positive || smallest_positive == 0)) {\n            smallest_positive = num;\n        }\n    }\n    \n    return {largest_negative, smallest_positive};\n}\n"}
{"task_id": "CPP/137", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a, boost::any b){\n    if (a.type() == typeid(int) && b.type() == typeid(int)) {\n        int intA = boost::any_cast<int>(a);\n        int intB = boost::any_cast<int>(b);\n        if (intA > intB) {\n            return intA;\n        } else if (intB > intA) {\n            return intB;\n        }\n    } else if (a.type() == typeid(float) && b.type() == typeid(float)) {\n        float floatA = boost::any_cast<float>(a);\n        float floatB = boost::any_cast<float>(b);\n        if (floatA > floatB) {\n            return floatA;\n        } else if (floatB > floatA) {\n            return floatB;\n        }\n    } else if (a.type() == typeid(std::string) && b.type() == typeid(std::string)) {\n        std::string strA = boost::any_cast<std::string>(a);\n        std::string strB = boost::any_cast<std::string>(b);\n        if (strA > strB) {\n            return strA;\n        } else if (strB > strA) {\n            return strB;\n        }\n    }\n    return \"None\";\n}\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if(n % 2 != 0 || n < 8) {\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/139", "generation": "#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long result = 1;\n    for (int i = 1; i <= n; i++) {\n        long long factorial = 1;\n        for (int j = 1; j <= i; j++) {\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string result = \"\";\n    int consecutiveSpaces = 0;\n    for (char c : text) {\n        if (c == ' ') {\n            consecutiveSpaces++;\n            if (consecutiveSpaces > 2) {\n                result.pop_back(); // Remove the last space\n                result.pop_back(); // Remove the second last space\n                result += \"-\";\n            } else {\n                result += \"_\";\n            }\n        } else {\n            result += c;\n            consecutiveSpaces = 0;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    int digits = 0;\n    int dots = 0;\n    int latinLetter = 0;\n    string extension = \"\";\n    \n    for (char c : file_name) {\n        if (c >= '0' && c <= '9') {\n            digits++;\n        } else if (c == '.') {\n            dots++;\n        } else if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n            latinLetter++;\n        }\n    }\n    \n    if (digits > 3 || dots != 1 || latinLetter == 0) {\n        return \"No\";\n    }\n    \n    int dotIndex = file_name.find('.');\n    extension = file_name.substr(dotIndex + 1);\n    \n    if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\") {\n        return \"No\";\n    }\n    \n    return \"Yes\";\n}\n"}
{"task_id": "CPP/142", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if ((i + 1) % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if ((i + 1) % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "#include<stdio.h>\n#include<string>\n#include<cmath>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    vector<string> words;\n    string word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n\n    string result = \"\";\n    for (const string& w : words) {\n        if (isPrime(w.size())) {\n            result += w + \" \";\n        }\n    }\n    if (!result.empty()) {\n        result.pop_back(); // Remove the extra space at the end\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x, string n){\n"}
{"task_id": "CPP/145", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool compare(int a, int b) {\n    int sumA = 0, sumB = 0;\n    string strA = to_string(a);\n    string strB = to_string(b);\n    for (char c : strA) {\n        if (c == '-') {\n            sumA += c - '0';\n        } else {\n            sumA += c - '0';\n        }\n    }\n    for (char c : strB) {\n        if (c == '-') {\n            sumB += c - '0';\n        } else {\n            sumB += c - '0';\n        }\n    }\n    if (sumA == sumB) {\n        return find(nums.begin(), nums.end(), a) < find(nums.begin(), nums.end(), b);\n    }\n    return sumA < sumB;\n}\n\nvector<int> order_by_points(vector<int> nums){\n    sort(nums.begin(), nums.end(), compare);\n    return nums;\n}\n"}
{"task_id": "CPP/146", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for (int num : nums) {\n        string numStr = to_string(abs(num));\n        if (numStr.front() % 2 != 0 && numStr.back() % 2 != 0 && num > 10) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_max_triples(int n){\n    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        for (int j = i + 1; j <= n; j++) {\n            for (int k = j + 1; k <= n; k++) {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1, string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    \n    // Check if planet1 and planet2 are valid planet names\n    if (find(planets.begin(), planets.end(), planet1) == planets.end() || find(planets.begin(), planets.end(), planet2) == planets.end()) {\n        return result; // Return empty vector if planet names are not correct\n    }\n    \n    int start = find(planets.begin(), planets.end(), planet1) - planets.begin();\n    int end = find(planets.begin(), planets.end(), planet2) - planets.begin();\n    \n    if (start > end) {\n        swap(start, end);\n    }\n    \n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> result;\n    for (const string& word : lst) {\n        if (word.length() % 2 == 0) {\n            result.push_back(word);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    if (n <= 1) {\n        return y;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n"}
{"task_id": "CPP/151", "generation": "long long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for (float num : lst) {\n        if (num > 0 && fmod(num, 1) == 0 && ((int)num) % 2 != 0) {\n            sum += (long long)pow(num, 2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for (int i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongestExtension = \"\";\n    int maxStrength = INT_MIN;\n    \n    for (const string& extension : extensions) {\n        int CAP = 0, SM = 0;\n        for (char c : extension) {\n            if (isupper(c)) {\n                CAP++;\n            } else if (islower(c)) {\n                SM++;\n            }\n        }\n        \n        int strength = CAP - SM;\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongestExtension;\n}\n"}
{"task_id": "CPP/154", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a, string b){\n    if(a.length() != b.length()){\n        return false;\n    }\n    string doubleA = a + a;\n    return doubleA.find(b) != string::npos;\n}\n"}
{"task_id": "CPP/155", "generation": "vector<int> even_odd_count(int num){\n    string numStr = to_string(abs(num));\n    int evenCount = 0, oddCount = 0;\n    for (char c : numStr) {\n        int digit = c - '0';\n        if (digit % 2 == 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    if (num == 0) {\n        evenCount = 1;\n    }\n    if (num < 0) {\n        evenCount--; // Exclude the negative sign as it is not a digit\n    }\n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/156", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_roman(int number){\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    \n    string result = \"\";\n    for (int i = 0; i < values.size(); i++) {\n        while (number >= values[i]) {\n            result += numerals[i];\n            number -= values[i];\n        }\n    }\n    \n    // Convert result to lowercase\n    for (char &c : result) {\n        c = tolower(c);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a, float b, float c){\n"}
{"task_id": "CPP/158", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    string maxWord = \"\";\n    int maxUniqueChars = 0;\n    \n    for (const string& word : words) {\n        int uniqueChars = set<char>(word.begin(), word.end()).size();\n        \n        if (uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word < maxWord)) {\n            maxWord = word;\n            maxUniqueChars = uniqueChars;\n        }\n    }\n    \n    return maxWord;\n}\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number, int need, int remaining){\n"}
{"task_id": "CPP/160", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nint do_algebra(vector<string> operato, vector<int> operand){\n    int result = operand[0];\n    for (int i = 0; i < operato.size(); i++) {\n        if (operato[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (operato[i] == \"//\") {\n            result /= operand[i + 1];\n        } else if (operato[i] == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    int n = s.size();\n    int i = 0, j = n - 1;\n    while (i < j) {\n        if (isalpha(s[i]) && isalpha(s[j])) {\n            s[i] = islower(s[i]) ? toupper(s[i]) : tolower(s[i]);\n            s[j] = islower(s[j]) ? toupper(s[j]) : tolower(s[j]);\n        }\n        else if (!isalpha(s[i]) && !isalpha(s[j])) {\n            swap(s[i], s[j]);\n        }\n        i++;\n        j--;\n    }\n    if (i == j && !isalpha(s[i])) {\n        return s;\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    if (text.empty()) {\n        return \"None\";\n    }\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), result);\n    std::string md5_str;\n    char buf[3];\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        sprintf(buf, \"%02x\", result[i]);\n        md5_str += buf;\n    }\n    return md5_str;\n}\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a, int b){\n    vector<int> result;\n    if (a > b) {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    for (int i = a; i <= b; i++) {\n        if (i % 2 == 0 && i < 10) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
