{"task_id": "CPP/0", "generation": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/1", "generation": "/*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> result;\n    int count = 0;\n    string current_group = \"\";\n    \n    for(int i=0; i<paren_string.size(); i++){\n        if(paren_string[i] == '('){\n            count++;\n        }\n        current_group += paren_string[i];\n        \n        if(paren_string[i] == ')'){\n            count--;\n            if(count == 0){\n                result.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/2", "generation": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    int integer_part = (int)number; // get the integer part of the number\n    float decimal_part = number - integer_part; // subtract integer part to get decimal part\n    return decimal_part;\n}\n\n"}
{"task_id": "CPP/3", "generation": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/4", "generation": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    // Calculate the mean of the input numbers\n    float sum = 0;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    \n    // Calculate the mean absolute deviation\n    float mad = 0;\n    for(int i=0; i<numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n    \n    return mad;\n}\n\n"}
{"task_id": "CPP/5", "generation": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i != numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/6", "generation": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> result;\n    int max_depth = 0;\n    int current_depth = 0;\n    \n    for(int i=0; i<paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            current_depth++;\n            max_depth = max(max_depth, current_depth);\n        }\n        else if(paren_string[i] == ')'){\n            current_depth--;\n        }\n        else if(paren_string[i] == ' '){\n            result.push_back(max_depth);\n            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n    \n    result.push_back(max_depth);\n    \n    return result;\n}"}
{"task_id": "CPP/7", "generation": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filtered_strings;\n    for(string s : strings){\n        if(s.find(substring) != string::npos){\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;\n}"}
{"task_id": "CPP/8", "generation": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    vector<int> result;\n    int sum = 0;\n    int product = 1;\n    \n    for(int num : numbers){\n        sum += num;\n        product *= num;\n    }\n    \n    result.push_back(sum);\n    result.push_back(product);\n    \n    return result;\n}"}
{"task_id": "CPP/9", "generation": "/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> result;\n    int max_num = numbers[0];\n    result.push_back(max_num);\n    \n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n        result.push_back(max_num);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/10", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    int n = str.length();\n    if(n==0){\n        return \"\";\n    }\n    int i = 0;\n    for(i=n-1;i>=0;i--){\n        if(is_palindrome(str.substr(i))){\n            break;\n        }\n    }\n    string prefix = str.substr(0,i);\n    string suffix = str.substr(i);\n    string reverse_prefix(prefix.rbegin(),prefix.rend());\n    return str + reverse_prefix;\n}\n\n"}
{"task_id": "CPP/11", "generation": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result = \"\";\n    for(int i=0; i<a.length(); i++){\n        if(a[i] != b[i]){\n            result += \"1\";\n        } else {\n            result += \"0\";\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if(strings.empty()){\n        return \"None\";\n    }\n    \n    string longestString = strings[0];\n    for(int i=1; i<strings.size(); i++){\n        if(strings[i].length() > longestString.length()){\n            longestString = strings[i];\n        }\n    }\n    \n    return longestString;\n}"}
{"task_id": "CPP/13", "generation": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    if (b == 0) {\n        return a;\n    } else {\n        return greatest_common_divisor(b, a % b);\n    }\n}"}
{"task_id": "CPP/14", "generation": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> result;\n    string prefix = \"\";\n    for(char c : str){\n        prefix += c;\n        result.push_back(prefix);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/15", "generation": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string result = \"\";\n    for(int i=0; i<=n; i++){\n        result += to_string(i) + \" \";\n    }\n    result.pop_back(); // remove the extra space at the end\n    return result;\n}"}
{"task_id": "CPP/16", "generation": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n    // Convert the string to lowercase to ignore case\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Initialize a vector to store distinct characters\n    vector<char> distinct_chars;\n    \n    // Iterate through each character in the string\n    for(char c : str){\n        // Check if the character is already in the distinct_chars vector\n        if(find(distinct_chars.begin(), distinct_chars.end(), c) == distinct_chars.end()){\n            // If not found, add it to the vector\n            distinct_chars.push_back(c);\n        }\n    }\n    \n    // Return the size of the distinct_chars vector\n    return distinct_chars.size();\n}"}
{"task_id": "CPP/17", "generation": "/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n    vector<int> beats;\n    int i = 0;\n    while(i < music_string.length()){\n        if(music_string[i] == 'o'){\n            beats.push_back(4);\n            i += 2;\n        } else if(music_string[i] == '.'){\n            beats.push_back(1);\n            i += 2;\n        } else {\n            beats.push_back(2);\n            i += 3;\n        }\n    }\n    return beats;\n}"}
{"task_id": "CPP/18", "generation": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int count = 0;\n    if(substring.empty()){\n        return 0;\n    }\n    for(int i=0; i<=str.length()-substring.length(); i++){\n        if(str.substr(i, substring.length()) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/19", "generation": "/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    // Create a map to store the mapping of number words to their corresponding numerical values\n    map<string, int> numberMap = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n\n    // Split the input string into individual number words\n    string number;\n    string result = \"\";\n    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] == ' ') {\n            // Convert the number word to its numerical value and append it to the result string\n            result += number + \" \";\n            number = \"\";\n        } else {\n            number += numbers[i];\n        }\n    }\n\n    // Append the last number word to the result string\n    result += number;\n\n    // Split the result string into individual number words\n    string sortedResult = \"\";\n    number = \"\";\n    for (int i = 0; i < result.size(); i++) {\n        if (result[i] == ' ') {\n            // Convert the number word to its numerical value and append it to the sorted result string\n            sortedResult += number + \" \";\n            number = \"\";\n        } else {\n            number += result[i];\n        }\n    }\n\n    // Append the last number word to the sorted result string\n    sortedResult += number;\n\n    // Sort the number words based on their numerical values\n    for (int i = 0; i < sortedResult.size(); i++) {\n        if (sortedResult[i] == ' ') {\n            string currentNumber = \"\";\n            while (i < sortedResult.size() && sortedResult[i] != ' ') {\n                currentNumber += sortedResult[i];\n                i++;\n            }\n            int currentValue = numberMap[currentNumber];\n            int j = i + 1;\n            while (j < sortedResult.size()) {\n                string nextNumber = \"\";\n                while (j < sortedResult.size() && sortedResult[j] != ' ') {\n                    nextNumber += sortedResult[j];\n                    j++;\n                }\n                int nextValue = numberMap[nextNumber];\n                if (nextValue < currentValue) {\n                    // Swap the positions of the current number word and the next number word\n                    swap(sortedResult[i], sortedResult[j]);\n                    i = j;\n                    currentValue = nextValue;\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n\n    return sortedResult;\n}"}
{"task_id": "CPP/20", "generation": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> result;\n    float min_diff = INFINITY;\n    for(int i=0; i<numbers.size()-1; i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result.clear();\n                result.push_back(min(numbers[i], numbers[j]));\n                result.push_back(max(numbers[i], numbers[j]));\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/21", "generation": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n    // Find the minimum and maximum numbers in the vector\n    float min_num = numbers[0];\n    float max_num = numbers[0];\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] < min_num){\n            min_num = numbers[i];\n        }\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n    }\n    \n    // Apply linear transform to rescale the numbers\n    vector<float> rescaled_numbers;\n    for(int i=0; i<numbers.size(); i++){\n        float rescaled_num = (numbers[i] - min_num) / (max_num - min_num);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n    \n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/22", "generation": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for(auto val : values){\n        if(val.type() == typeid(int)){\n            result.push_back(boost::any_cast<int>(val));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/23", "generation": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    return str.length();\n}\n\n"}
{"task_id": "CPP/24", "generation": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int largest = 1;\n    for(int i=2; i<n; i++){\n        if(n%i == 0){\n            largest = i;\n        }\n    }\n    return largest;\n}\n\n"}
{"task_id": "CPP/25", "generation": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> factors;\n    for(int i=2; i*i<=n; i++){\n        while(n%i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if(n > 1){\n        factors.push_back(n);\n    }\n    return factors;\n}"}
{"task_id": "CPP/26", "generation": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        if(count(numbers.begin(), numbers.end(), numbers[i]) == 1){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/27", "generation": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    for(int i=0; i<str.length(); i++){\n        if(islower(str[i])){\n            str[i] = toupper(str[i]);\n        }\n        else if(isupper(str[i])){\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;\n}"}
{"task_id": "CPP/28", "generation": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for(string s : strings){\n        result += s;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/29", "generation": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> filtered_strings;\n    for(string s : strings){\n        if(s.substr(0, prefix.length()) == prefix){\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;\n}"}
{"task_id": "CPP/30", "generation": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> positive_numbers;\n    for(int i=0; i<l.size(); i++){\n        if(l[i] > 0){\n            positive_numbers.push_back(l[i]);\n        }\n    }\n    return positive_numbers;\n}"}
{"task_id": "CPP/31", "generation": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/32", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only one zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    if(xs.size()%2!=0){\n        printf(\"The number of coefficients should be even\\n\");\n        return 0;\n    }\n    double max_coeff=0;\n    for(int i=0;i<xs.size();i++){\n        if(abs(xs[i])>max_coeff){\n            max_coeff=abs(xs[i]);\n        }\n    }\n    double x=0;\n    while(poly(xs,x)!=0){\n        x+=0.1;\n    }\n    return x;\n}\n\n"}
{"task_id": "CPP/33", "generation": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted in ascending order.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> l_prime = l;\n    for(int i=0; i<l.size(); i++){\n        if((i+1)%3 == 0){\n            sort(l_prime.begin() + i, l_prime.begin() + i + 3);\n        }\n    }\n    return l_prime;\n}"}
{"task_id": "CPP/34", "generation": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Remove duplicates\n    l.erase(unique(l.begin(), l.end()), l.end());\n    \n    return l;\n}\n\n"}
{"task_id": "CPP/35", "generation": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n    float max = l[0];\n    for(int i=1; i<l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n} \n\n"}
{"task_id": "CPP/36", "generation": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count = 0;\n    for(int i=0; i<n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            int num = i;\n            while(num > 0){\n                if(num % 10 == 7){\n                    count++;\n                }\n                num = num / 10;\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/37", "generation": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> l_prime = l;\n    vector<float> even_values;\n    \n    // Extract even values from l\n    for(int i=0; i<l.size(); i++){\n        if(i%2 == 0){\n            even_values.push_back(l[i]);\n        }\n    }\n    \n    // Sort even values\n    sort(even_values.begin(), even_values.end());\n    \n    // Replace even values in l_prime with sorted even values\n    int even_index = 0;\n    for(int i=0; i<l.size(); i++){\n        if(i%2 == 0){\n            l_prime[i] = even_values[even_index];\n            even_index++;\n        }\n    }\n    \n    return l_prime;\n}"}
{"task_id": "CPP/38", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\n    int l=s.length();\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(2)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n"}
{"task_id": "CPP/39", "generation": "/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    int first = 1, second = 1, next, count = 2;\n    while(count < n){\n        next = first + second;\n        first = second;\n        second = next;\n        count++;\n    }\n    while(true){\n        next = first + second;\n        first = second;\n        second = next;\n        bool isPrime = true;\n        for(int i=2; i*i<=next; i++){\n            if(next % i == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            return next;\n        }\n    }\n}"}
{"task_id": "CPP/40", "generation": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    int n = l.size();\n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/41", "generation": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    // Each car moving left to right will collide with each car moving right to left\n    // So the total number of collisions will be the product of the number of cars moving left to right and the number of cars moving right to left\n    return n * n;\n}\n\n"}
{"task_id": "CPP/42", "generation": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> result;\n    for(int i=0; i<l.size(); i++){\n        result.push_back(l[i]+1);\n    }\n    return result;\n}"}
{"task_id": "CPP/43", "generation": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    for(int i=0; i<l.size(); i++){\n        for(int j=i+1; j<l.size(); j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/44", "generation": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string result = \"\";\n    while(x > 0){\n        int remainder = x % base;\n        result = to_string(remainder) + result;\n        x = x / base;\n    }\n    return result;\n}"}
{"task_id": "CPP/45", "generation": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/46", "generation": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 2;\n    }\n    if(n == 3){\n        return 0;\n    }\n    \n    int a = 0, b = 0, c = 2, d = 0, e = 0;\n    \n    for(int i = 4; i <= n; i++){\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    \n    return e;\n}\n\n"}
{"task_id": "CPP/47", "generation": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n8.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n % 2 == 0){\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return l[n/2];\n    }\n}"}
{"task_id": "CPP/48", "generation": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/49", "generation": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    if (n == 0) {\n        return 1;\n    }\n    int result = 1;\n    for (int i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/50", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/51", "generation": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string result = \"\";\n    for(char c : text){\n        if(tolower(c) != 'a' && tolower(c) != 'e' && tolower(c) != 'i' && tolower(c) != 'o' && tolower(c) != 'u'){\n            result += c;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/52", "generation": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    for(int i=0; i<l.size(); i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "CPP/53", "generation": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x + y;\n}\n\n"}
{"task_id": "CPP/54", "generation": "/*\nCheck if two words have the same kind of characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n    // Sort the strings\n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    \n    // Check if the sorted strings are equal\n    return s0 == s1;\n}\n\n"}
{"task_id": "CPP/55", "generation": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\n"}
{"task_id": "CPP/56", "generation": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '<'){\n            count++;\n        } else if(bracket == '>'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}"}
{"task_id": "CPP/57", "generation": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    bool increasing = true;\n    bool decreasing = true;\n    \n    for(int i=1; i<l.size(); i++){\n        if(l[i] < l[i-1]){\n            increasing = false;\n        }\n        if(l[i] > l[i-1]){\n            decreasing = false;\n        }\n    }\n    \n    return increasing || decreasing;\n}"}
{"task_id": "CPP/58", "generation": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    \n    int i = 0, j = 0;\n    while(i < l1.size() && j < l2.size()){\n        if(l1[i] == l2[j]){\n            if(result.empty() || result.back() != l1[i]){\n                result.push_back(l1[i]);\n            }\n            i++;\n            j++;\n        }\n        else if(l1[i] < l2[j]){\n            i++;\n        }\n        else{\n            j++;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/59", "generation": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}"}
{"task_id": "CPP/60", "generation": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/61", "generation": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '('){\n            count++;\n        } else if(bracket == ')'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/62", "generation": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result;\n    for(int i=1; i<xs.size(); i++){\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}"}
{"task_id": "CPP/63", "generation": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    \n    int a = 0, b = 0, c = 1, result = 0;\n    \n    for(int i = 3; i <= n; i++){\n        result = a + b + c;\n        a = b;\n        b = c;\n        c = result;\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/64", "generation": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    transform(s.begin(), s.end(), s.begin(), ::tolower); // convert all characters to lowercase\n    int count = 0;\n    for(char c : s){\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n            count++;\n        }\n    }\n    if(s.back() == 'y'){ // check if last character is 'y'\n        count++;\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/65", "generation": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string num = to_string(x);\n    int n = num.size();\n    \n    if(shift > n){\n        reverse(num.begin(), num.end());\n        return num;\n    }\n    \n    shift = shift % n;\n    string result = num.substr(n-shift) + num.substr(0, n-shift);\n    \n    return result;\n}"}
{"task_id": "CPP/66", "generation": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(char c : s){\n        if(isupper(c)){\n            sum += c;\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/67", "generation": "/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n    int apples = 0;\n    int oranges = 0;\n    int mango = 0;\n    \n    // Parse the string to extract the number of apples and oranges\n    int pos = s.find(\"apples\");\n    if(pos != string::npos){\n        apples = stoi(s.substr(0, pos));\n    }\n    \n    pos = s.find(\"oranges\");\n    if(pos != string::npos){\n        oranges = stoi(s.substr(0, pos));\n    }\n    \n    // Calculate the number of mango fruits\n    mango = n - apples - oranges;\n    \n    return mango;\n} \n\n"}
{"task_id": "CPP/68", "generation": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> result;\n    int smallest_even = -1;\n    int smallest_index = -1;\n    \n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] % 2 == 0 && (smallest_even == -1 || arr[i] < smallest_even)){\n            smallest_even = arr[i];\n            smallest_index = i;\n        }\n    }\n    \n    if(smallest_even != -1){\n        result.push_back(smallest_even);\n        result.push_back(smallest_index);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/69", "generation": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int maxFreq = -1;\n    for(int i=0; i<lst.size(); i++){\n        int count = 0;\n        for(int j=0; j<lst.size(); j++){\n            if(lst[j] == lst[i]){\n                count++;\n            }\n        }\n        if(count >= lst[i] && lst[i] > maxFreq){\n            maxFreq = lst[i];\n        }\n    }\n    return maxFreq;\n}"}
{"task_id": "CPP/70", "generation": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_list({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_list({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_list({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> result;\n    sort(lst.begin(), lst.end());\n    int left = 0, right = lst.size() - 1;\n    while(left <= right){\n        if(left == right){\n            result.push_back(lst[left]);\n            break;\n        }\n        result.push_back(lst[left]);\n        result.push_back(lst[right]);\n        left++;\n        right--;\n    }\n    return result;\n}"}
{"task_id": "CPP/71", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n    // Check if the three sides form a valid triangle\n    if(a + b > c && a + c > b && b + c > a){\n        // Calculate the semi-perimeter of the triangle\n        float s = (a + b + c) / 2;\n        // Calculate the area of the triangle using Heron's formula\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        // Round the area to 2 decimal points\n        return round(area * 100) / 100;\n    } else {\n        // Return -1 if the three sides do not form a valid triangle\n        return -1;\n    }\n}\n\n"}
{"task_id": "CPP/72", "generation": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) \u279e false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) \u279e false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) \u279e true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) \u279e true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n    int sum = 0;\n    bool balanced = true;\n    \n    // Calculate the sum of elements in the vector\n    for(int i=0; i<q.size(); i++){\n        sum += q[i];\n    }\n    \n    // Check if the vector is balanced\n    for(int i=0; i<q.size()/2; i++){\n        if(q[i] != q[q.size()-1-i]){\n            balanced = false;\n            break;\n        }\n    }\n    \n    // Check if the sum is less than or equal to the maximum weight\n    if(balanced && sum <= w){\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "CPP/73", "generation": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int count = 0;\n    \n    for(int i=0; i<n/2; i++){\n        if(arr[i] != arr[n-1-i]){\n            count++;\n        }\n    }\n    \n    return count;\n}"}
{"task_id": "CPP/74", "generation": "/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) \u279e {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) \u279e {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) \u279e {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) \u279e {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) \u279e {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    \n    for(string str : lst1){\n        total_chars_lst1 += str.length();\n    }\n    \n    for(string str : lst2){\n        total_chars_lst2 += str.length();\n    }\n    \n    if(total_chars_lst1 < total_chars_lst2){\n        return lst1;\n    } else {\n        return lst2;\n    }\n}"}
{"task_id": "CPP/75", "generation": "#include <iostream>\n\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int num){\n    if(num <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=num; i++){\n        if(num % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nbool is_multiply_prime(int a){\n    // Loop through all prime numbers less than 100\n    for(int i=2; i<100; i++){\n        if(is_prime(i)){\n            for(int j=i+1; j<100; j++){\n                if(is_prime(j)){\n                    for(int k=j+1; k<100; k++){\n                        if(is_prime(k) && i*j*k == a){\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    return false;\n}\n\n"}
{"task_id": "CPP/76", "generation": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n    if(x == 1) {\n        return true;\n    }\n    int power = 0;\n    while(pow(n, power) <= x) {\n        if(pow(n, power) == x) {\n            return true;\n        }\n        power++;\n    }\n    return false;\n}"}
{"task_id": "CPP/77", "generation": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    int cube_root = cbrt(a);\n    return (cube_root * cube_root * cube_root == a);\n}"}
{"task_id": "CPP/78", "generation": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    int count = 0;\n    for(char c : num){\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D'){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/79", "generation": "/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string binary = \"db\";\n    while(decimal > 0){\n        binary = to_string(decimal % 2) + binary;\n        decimal = decimal / 2;\n    }\n    return binary + \"db\";\n}"}
{"task_id": "CPP/80", "generation": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if(s.length() < 3){\n        return false;\n    }\n    \n    for(int i=0; i<s.length()-2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/81", "generation": "/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letter_grades;\n    for(int i=0; i<grades.size(); i++){\n        if(grades[i] == 4.0){\n            letter_grades.push_back(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push_back(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push_back(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push_back(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push_back(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push_back(\"B-\");\n        }\n        else if(grades[i] > 2.0){\n            letter_grades.push_back(\"C+\");\n        }\n        else if(grades[i] > 1.7){\n            letter_grades.push_back(\"C\");\n        }\n        else if(grades[i] > 1.3){\n            letter_grades.push_back(\"C-\");\n        }\n        else if(grades[i] > 1.0){\n            letter_grades.push_back(\"D+\");\n        }\n        else if(grades[i] > 0.7){\n            letter_grades.push_back(\"D\");\n        }\n        else if(grades[i] > 0.0){\n            letter_grades.push_back(\"D-\");\n        }\n        else{\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n} \n\n"}
{"task_id": "CPP/82", "generation": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int length = str.length();\n    if(length <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=length; i++){\n        if(length % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/83", "generation": "/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    int count = 0;\n    if(n == 1){\n        return 1;\n    }\n    // Count of numbers starting with 1\n    count += 9 * pow(10, n-2);\n    // Count of numbers ending with 1\n    count += pow(10, n-1);\n    \n    return count;\n}\n\n"}
{"task_id": "CPP/84", "generation": "/*\nGiven a positive integer N, return in binary the total sum of its digits.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    int sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    string binary = \"\";\n    while (sum > 0) {\n        binary = to_string(sum % 2) + binary;\n        sum /= 2;\n    }\n    return binary;\n}\n\n"}
{"task_id": "CPP/85", "generation": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for(int i=1; i<lst.size(); i+=2){\n        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/86", "generation": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string result = \"\";\n    string word = \"\";\n    \n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            sort(word.begin(), word.end());\n            result += word + \" \";\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    \n    if(word != \"\"){\n        sort(word.begin(), word.end());\n        result += word;\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/87", "generation": "/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == x){\n                result.push_back({i, j});\n            }\n        }\n    }\n    \n    // Sort by rows in ascending order\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b){\n        return a[0] < b[0];\n    });\n    \n    // Sort by columns in descending order\n    for(int i=0; i<result.size(); i++){\n        sort(result[i].begin(), result[i].end(), greater<int>());\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/88", "generation": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    if(array.empty()){\n        return array;\n    }\n    \n    int sum = array[0] + array[array.size()-1];\n    \n    if(sum % 2 == 0){\n        sort(array.begin(), array.end(), greater<int>());\n    } else {\n        sort(array.begin(), array.end());\n    }\n    \n    return array;\n}"}
{"task_id": "CPP/89", "generation": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            char encrypted = 'a' + ((s[i] - 'a' + 2*2) % 26);\n            result += encrypted;\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            char encrypted = 'A' + ((s[i] - 'A' + 2*2) % 26);\n            result += encrypted;\n        }\n        else{\n            result += s[i];\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/90", "generation": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    if(lst.size() < 2){\n        return -1;\n    }\n    \n    sort(lst.begin(), lst.end());\n    \n    int smallest = lst[0];\n    for(int i=1; i<lst.size(); i++){\n        if(lst[i] > smallest){\n            return lst[i];\n        }\n    }\n    \n    return -1;\n}"}
{"task_id": "CPP/91", "generation": "/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int count = 0;\n    bool isI = false;\n    \n    for(int i=0; i<S.length(); i++){\n        if(S[i] == 'I' && (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!')){\n            isI = true;\n        }\n        if(isI && (S[i] == '.' || S[i] == '?' || S[i] == '!')){\n            count++;\n            isI = false;\n        }\n    }\n    \n    return count;\n}"}
{"task_id": "CPP/92", "generation": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e true\n\nany_int(3, 2, 2) \u279e false\n\nany_int(3, -2, 1) \u279e true\n\nany_int(3.6, -2.2, 2) \u279e false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    if((int)a == a && (int)b == b && (int)c == c){\n        if(a == b + c || b == a + c || c == a + b){\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\n"}
{"task_id": "CPP/93", "generation": "/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    string encoded_message = \"\";\n    for(char c : message){\n        if(isalpha(c)){\n            if(islower(c)){\n                c = toupper(c);\n            }else{\n                c = tolower(c);\n            }\n            if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'){\n                c = c + 2;\n            }\n        }\n        encoded_message += c;\n    }\n    return encoded_message;\n}"}
{"task_id": "CPP/94", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nbool isPrime(int num);\n\nint skjkasdkd(vector<int> lst){\n    int maxPrime = 0;\n    for(int num : lst){\n        if(isPrime(num) && num > maxPrime){\n            maxPrime = num;\n        }\n    }\n    int sum = 0;\n    string primeStr = to_string(maxPrime);\n    for(char c : primeStr){\n        sum += c - '0';\n    }\n    return sum;\n}\n\nbool isPrime(int num){\n    if(num <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=num; i++){\n        if(num % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/95", "generation": "/*\nGiven a map, return true if all keys are strings and all keys are in lower case or  in upper case, else return false.\nThe function should return false is the given map is empty.\nExamples:\ncheck_dict_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_dict_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_dict_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    if(dict.empty()){\n        return false;\n    }\n    \n    for(auto const& pair : dict){\n        string key = pair.first;\n        for(char c : key){\n            if(!isalpha(c)){\n                return false;\n            }\n        }\n        \n        bool isLowerCase = true;\n        bool isUpperCase = true;\n        for(char c : key){\n            if(!islower(c)){\n                isLowerCase = false;\n            }\n            if(!isupper(c)){\n                isUpperCase = false;\n            }\n        }\n        \n        if(!(isLowerCase || isUpperCase)){\n            return false;\n        }\n    }\n    \n    return true;\n} \n\n"}
{"task_id": "CPP/96", "generation": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> primes;\n    if(n <= 1){\n        return primes;\n    }\n    for(int i=2; i<n; i++){\n        bool isPrime = true;\n        for(int j=2; j*j<=i; j++){\n            if(i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}"}
{"task_id": "CPP/97", "generation": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int unitA = abs(a) % 10;\n    int unitB = abs(b) % 10;\n    return unitA * unitB;\n}"}
{"task_id": "CPP/98", "generation": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for(int i=0; i<s.length(); i+=2){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/99", "generation": "/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    float num = stof(value);\n    int lower = floor(num);\n    int upper = ceil(num);\n    \n    if (num - lower < upper - num) {\n        return lower;\n    } else {\n        return upper;\n    }\n}"}
{"task_id": "CPP/100", "generation": "/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> result;\n    result.push_back(n);\n    for(int i=1; i<n; i++){\n        if(n%2 == 0){\n            result.push_back(n + 2*i);\n        } else {\n            result.push_back(n + 2*i + 1);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/101", "generation": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n    for(char c : s){\n        if(c == ' ' || c == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}"}
{"task_id": "CPP/102", "generation": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    int max_even = -1;\n    for(int i = y; i >= x; i--){\n        if(i % 2 == 0){\n            max_even = i;\n            break;\n        }\n    }\n    return max_even;\n}\n\n"}
{"task_id": "CPP/103", "generation": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n    if(n > m){\n        return \"-1\";\n    }\n    int sum = 0;\n    for(int i = n; i <= m; i++){\n        sum += i;\n    }\n    int avg = round((double)sum / (m - n + 1));\n    string binary = \"\";\n    while(avg > 0){\n        binary = to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n    return binary;\n}"}
{"task_id": "CPP/104", "generation": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for(int num : x){\n        bool hasEvenDigit = false;\n        int temp = num;\n        while(temp > 0){\n            int digit = temp % 10;\n            if(digit % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if(!hasEvenDigit){\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}"}
{"task_id": "CPP/105", "generation": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    vector<int> sorted_arr;\n    vector<string> result;\n    map<int, string> num_to_name = {\n        {1, \"One\"},\n        {2, \"Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"Nine\"}\n    };\n    \n    for(int num : arr){\n        if(num >= 1 && num <= 9){\n            sorted_arr.push_back(num);\n        }\n    }\n    \n    sort(sorted_arr.begin(), sorted_arr.end());\n    reverse(sorted_arr.begin(), sorted_arr.end());\n    \n    for(int num : sorted_arr){\n        result.push_back(num_to_name[num]);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/106", "generation": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> result;\n    int sum = 0;\n    int factorial = 1;\n    \n    for(int i=1; i<=n; i++){\n        if(i%2 == 0){\n            factorial *= i;\n            result.push_back(factorial);\n        } else {\n            sum += i;\n            result.push_back(sum);\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/107", "generation": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> result = {0, 0};\n    for(int i=1; i<=n; i++){\n        string num = to_string(i);\n        string rev_num = num;\n        reverse(rev_num.begin(), rev_num.end());\n        if(num == rev_num){\n            if(i%2 == 0){\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/108", "generation": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for(int num : n){\n        int sum = 0;\n        int temp = abs(num);\n        while(temp > 0){\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if(num < 0){\n            sum *= -1;\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "CPP/109", "generation": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if(arr.empty()){\n        return true;\n    }\n    \n    int n = arr.size();\n    int minIndex = 0;\n    \n    // Find the index of the minimum element in the vector\n    for(int i=1; i<n; i++){\n        if(arr[i] < arr[minIndex]){\n            minIndex = i;\n        }\n    }\n    \n    // Check if the vector is already sorted in non-decreasing order\n    bool sorted = true;\n    for(int i=0; i<n-1; i++){\n        if(arr[i] > arr[i+1]){\n            sorted = false;\n            break;\n        }\n    }\n    \n    // If the vector is already sorted or the minimum element is at the last index, return true\n    if(sorted || minIndex == n-1){\n        return true;\n    }\n    \n    return false;\n}"}
{"task_id": "CPP/110", "generation": "/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int odd_count = 0;\n    for(int num : lst1){\n        if(num % 2 != 0){\n            odd_count++;\n        }\n    }\n    for(int num : lst2){\n        if(num % 2 != 0){\n            odd_count++;\n        }\n    }\n    if(odd_count % 2 == 0){\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}"}
{"task_id": "CPP/111", "generation": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char, int> result;\n    map<char, int> count;\n    \n    for(char c : test){\n        if(c != ' '){\n            count[c]++;\n        }\n    }\n    \n    int maxCount = 0;\n    for(auto it = count.begin(); it != count.end(); it++){\n        if(it->second > maxCount){\n            maxCount = it->second;\n        }\n    }\n    \n    for(auto it = count.begin(); it != count.end(); it++){\n        if(it->second == maxCount){\n            result[it->first] = it->second;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/112", "generation": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    // Delete characters in s that are equal to any character in c\n    string result = \"\";\n    for(int i=0;i<s.length();i++){\n        if(c.find(s[i]) == string::npos){\n            result += s[i];\n        }\n    }\n    \n    // Check if the result string is palindrome\n    string reversed = result;\n    reverse(reversed.begin(), reversed.end());\n    \n    bool isPalindrome = (result == reversed);\n    \n    // Return the result string and whether it is palindrome or not\n    return {result, isPalindrome ? \"True\" : \"False\"};\n}"}
{"task_id": "CPP/113", "generation": "/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    vector<string> result;\n    for(string s : lst){\n        int count = 0;\n        for(char c : s){\n            if((c - '0') % 2 != 0){\n                count++;\n            }\n        }\n        string res = \"the number of odd elements \" + to_string(count) + \"n the str\" + to_string(count) + \"ng \" + s + \" of the \" + to_string(count) + \"nput.\";\n        result.push_back(res);\n    }\n    return result;\n}"}
{"task_id": "CPP/114", "generation": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    long long currentSum = nums[0];\n    \n    for(int i=1; i<nums.size(); i++){\n        currentSum = min(nums[i], currentSum + nums[i]);\n        minSum = min(minSum, currentSum);\n    }\n    \n    return minSum;\n}\n\n"}
{"task_id": "CPP/115", "generation": "/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity. Can't use buckets from other wells to extract water from one well.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int max_fill = 0;\n    for(int i=0;i<grid.size();i++){\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j] == 1){\n                max_fill++;\n            }\n        }\n    }\n    return max_fill * capacity;\n}"}
{"task_id": "CPP/116", "generation": "/*\nIn this Kata, you have to sort a vector of integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array({1, 5, 2, 3, 4}) == {1, 2, 4, 3, 5}\n>>> sort_array({-2, -3, -4, -5, -6}) == {-4, -2, -6, -5, -3}\n>>> sort_array({1, 0, 2, 3, 4}) == {0, 1, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    // Custom comparator function to sort based on number of ones in binary representation and then decimal value\n    auto cmp = [](int a, int b) {\n        int countA = __builtin_popcount(abs(a));\n        int countB = __builtin_popcount(abs(b));\n        \n        if (countA == countB) {\n            return a < b;\n        }\n        \n        return countA < countB;\n    };\n    \n    // Sort the vector using the custom comparator function\n    sort(arr.begin(), arr.end(), cmp);\n    \n    return arr;\n}"}
{"task_id": "CPP/117", "generation": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    vector<string> result;\n    string word = \"\";\n    int consonant_count = 0;\n    \n    for(int i=0; i<s.length(); i++){\n        if(s[i] != ' '){\n            word += s[i];\n            if(tolower(s[i]) != 'a' && tolower(s[i]) != 'e' && tolower(s[i]) != 'i' && tolower(s[i]) != 'o' && tolower(s[i]) != 'u'){\n                consonant_count++;\n            }\n        } else {\n            if(consonant_count == n){\n                result.push_back(word);\n            }\n            word = \"\";\n            consonant_count = 0;\n        }\n    }\n    \n    if(consonant_count == n){\n        result.push_back(word);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/118", "generation": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n    for(int i=n-2; i>0; i--){\n        if(word[i] != ' ' && vowels.find(word[i]) != string::npos){\n            for(int j=i-1; j>0; j--){\n                if(word[j] != ' ' && vowels.find(word[j]) == string::npos){\n                    for(int k=i+1; k<n-1; k++){\n                        if(word[k] != ' ' && vowels.find(word[k]) == string::npos){\n                            return string(1, word[i]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return \"\";\n}\n\n"}
{"task_id": "CPP/119", "generation": "/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    int balance = 0;\n    for (string s : lst) {\n        for (char c : s) {\n            if (c == '(') {\n                balance++;\n            } else {\n                balance--;\n            }\n            if (balance < 0) {\n                return \"No\";\n            }\n        }\n    }\n    return (balance == 0) ? \"Yes\" : \"No\";\n}"}
{"task_id": "CPP/120", "generation": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr, in ascending order.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    // Sort the vector in ascending order\n    sort(arr.begin(), arr.end());\n    \n    // Create a new vector to store the maximum k numbers\n    vector<int> result;\n    \n    // Iterate through the vector from the end and add the last k numbers to the result vector\n    for(int i = arr.size()-1; i >= arr.size()-k; i--){\n        result.push_back(arr[i]);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/121", "generation": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%2 == 0 && lst[i]%2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/122", "generation": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum = 0;\n    for(int i=0; i<k; i++){\n        if(arr[i] >= 10 && arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n} \n\n"}
{"task_id": "CPP/123", "generation": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> result;\n    result.push_back(1); // Collatz(1) is {1}\n    \n    while(n != 1){\n        result.push_back(n);\n        if(n % 2 == 0){\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    \n    // Filter out the odd numbers\n    vector<int> odd_numbers;\n    for(int num : result){\n        if(num % 2 != 0){\n            odd_numbers.push_back(num);\n        }\n    }\n    \n    // Sort the odd numbers in increasing order\n    sort(odd_numbers.begin(), odd_numbers.end());\n    \n    return odd_numbers;\n}"}
{"task_id": "CPP/124", "generation": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    if(date.empty()){\n        return false;\n    }\n    \n    int month, day, year;\n    if(sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year) != 3){\n        return false;\n    }\n    \n    if(month < 1 || month > 12){\n        return false;\n    }\n    \n    if(month == 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    } else if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n            return false;\n        }\n    } else {\n        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n    \n    return true;\n}"}
{"task_id": "CPP/125", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nint count_odd_lowercase(string txt);\n\nvector<string> split_words(string txt){\n    vector<string> words;\n    string word = \"\";\n    bool hasWhitespace = false;\n    bool hasComma = false;\n    \n    for(char c : txt){\n        if(c == ' '){\n            hasWhitespace = true;\n            if(!word.empty()){\n                words.push_back(word);\n                word = \"\";\n            }\n        } else if(c == ','){\n            hasComma = true;\n            if(!word.empty()){\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    \n    if(!word.empty()){\n        words.push_back(word);\n    }\n    \n    if(words.empty()){\n        if(hasWhitespace){\n            words.push_back(to_string(count_odd_lowercase(txt)));\n        } else if(hasComma){\n            words.push_back(to_string(count_odd_lowercase(txt)));\n        } else {\n            words.push_back(txt);\n        }\n    }\n    \n    return words;\n}\n\nint count_odd_lowercase(string txt){\n    int count = 0;\n    for(char c : txt){\n        if(islower(c)){\n            int ascii = c - 'a';\n            if(ascii % 2 != 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/126", "generation": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If the a number appears more than twice, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) \u279e true\nis_sorted({1, 2, 3, 4, 5}) \u279e true\nis_sorted({1, 3, 2, 4, 5}) \u279e false\nis_sorted({1, 2, 3, 4, 5, 6}) \u279e true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) \u279e true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) \u279e false\nis_sorted({1, 2, 2, 3, 3, 4}) \u279e true\nis_sorted({1, 2, 2, 2, 3, 4}) \u279e false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    for(int i=0; i<lst.size()-1; i++){\n        if(lst[i] >= lst[i+1]){\n            return false;\n        }\n    }\n    for(int i=0; i<lst.size()-2; i++){\n        if(lst[i] == lst[i+1] && lst[i] == lst[i+2]){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/127", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start1 = interval1[0];\n    int end1 = interval1[1];\n    int start2 = interval2[0];\n    int end2 = interval2[1];\n    \n    int intersectionStart = max(start1, start2);\n    int intersectionEnd = min(end1, end2);\n    \n    if (intersectionStart > intersectionEnd) {\n        return \"NO\";\n    }\n    \n    int length = intersectionEnd - intersectionStart;\n    \n    if (isPrime(length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n"}
{"task_id": "CPP/128", "generation": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if(arr.empty()){\n        return -32768;\n    }\n    \n    int product = 1;\n    int sum = 0;\n    \n    for(int num : arr){\n        if(num > 0){\n            product *= 1;\n        } else if(num < 0){\n            product *= -1;\n        } else {\n            product *= 0;\n        }\n        \n        sum += abs(num);\n    }\n    \n    return product * sum;\n}"}
{"task_id": "CPP/129", "generation": "/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    vector<int> path;\n    int n = grid.size();\n    int row = 0, col = 0;\n    \n    for(int i=0; i<k; i++){\n        path.push_back(grid[row][col]);\n        \n        if((row + col) % 2 == 0){\n            if(col == n-1){\n                row++;\n            } else if(row == 0){\n                col++;\n            } else {\n                row--;\n                col++;\n            }\n        } else {\n            if(row == n-1){\n                col++;\n            } else if(col == 0){\n                row++;\n            } else {\n                row++;\n                col--;\n            }\n        }\n    }\n    \n    return path;\n}"}
{"task_id": "CPP/130", "generation": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> result;\n    if(n == 0){\n        return result;\n    }\n    result.push_back(3);\n    if(n == 1){\n        return result;\n    }\n    result.push_back(1);\n    if(n == 2){\n        return result;\n    }\n    result.push_back(2);\n    for(int i = 3; i <= n; i++){\n        if(i % 2 == 0){\n            result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/131", "generation": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int product = 1;\n    while(n > 0){\n        int digit = n % 10;\n        if(digit % 2 != 0){\n            product *= digit;\n        }\n        n /= 10;\n    }\n    if(product == 1){\n        return 0;\n    }\n    return product;\n}\n\n"}
{"task_id": "CPP/132", "generation": "/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") \u279e true\nis_nested(\"[]]]]]]][[[[[]\") \u279e false\nis_nested(\"[][]\") \u279e false\nis_nested(\"[]\") \u279e false\nis_nested(\"[[][]]\") \u279e true\nis_nested(\"[[]][[\") \u279e true\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n    int count = 0;\n    for(int i=0; i<str.length(); i++){\n        if(str[i] == '['){\n            count++;\n        } else if(str[i] == ']' && count > 0){\n            count--;\n        }\n    }\n    return count > 0;\n}\n\n"}
{"task_id": "CPP/133", "generation": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n    return sum;\n} \n\n"}
{"task_id": "CPP/134", "generation": "/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e false\ncheck_if_last_char_is_a_letter(\"apple pi e\") \u279e true\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e false\ncheck_if_last_char_is_a_letter(\"\") \u279e false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if(txt.empty()){\n        return false;\n    }\n    \n    char lastChar = txt.back();\n    \n    if(isalpha(lastChar)){\n        int i = txt.size()-2;\n        while(i >= 0 && txt[i] != ' '){\n            i--;\n        }\n        \n        if(i == -1){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\n"}
{"task_id": "CPP/135", "generation": "/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int index = -1;\n    for(int i=1; i<arr.size(); i++){\n        if(arr[i] < arr[i-1]){\n            index = i-1;\n        }\n    }\n    return index;\n}"}
{"task_id": "CPP/136", "generation": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    vector<int> result = {0, 0};\n    int largest_negative = INT_MIN;\n    int smallest_positive = INT_MAX;\n    \n    for(int num : lst){\n        if(num < 0 && num > largest_negative){\n            largest_negative = num;\n        }\n        if(num > 0 && num < smallest_positive){\n            smallest_positive = num;\n        }\n    }\n    \n    if(largest_negative != INT_MIN){\n        result[0] = largest_negative;\n    }\n    if(smallest_positive != INT_MAX){\n        result[1] = smallest_positive;\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/137", "generation": "/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e \"None\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n    if(a.type() == typeid(int) && b.type() == typeid(int)){\n        int int_a = boost::any_cast<int>(a);\n        int int_b = boost::any_cast<int>(b);\n        if(int_a > int_b){\n            return int_a;\n        } else if(int_b > int_a){\n            return int_b;\n        } else {\n            return \"None\";\n        }\n    } else if(a.type() == typeid(float) && b.type() == typeid(float)){\n        float float_a = boost::any_cast<float>(a);\n        float float_b = boost::any_cast<float>(b);\n        if(float_a > float_b){\n            return float_a;\n        } else if(float_b > float_a){\n            return float_b;\n        } else {\n            return \"None\";\n        }\n    } else if(a.type() == typeid(string) && b.type() == typeid(string)){\n        string string_a = boost::any_cast<string>(a);\n        string string_b = boost::any_cast<string>(b);\n        if(stof(string_a) > stof(string_b)){\n            return string_a;\n        } else if(stof(string_b) > stof(string_a)){\n            return string_b;\n        } else {\n            return \"None\";\n        }\n    } else {\n        return \"None\";\n    }\n}"}
{"task_id": "CPP/138", "generation": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if(n % 2 != 0 || n < 8){\n        return false;\n    }\n    return true;\n} \n\n"}
{"task_id": "CPP/139", "generation": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long result = 1;\n    for(int i = n; i > 0; i--){\n        long long factorial = 1;\n        for(int j = i; j > 0; j--){\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/140", "generation": "/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string result = \"\";\n    int consecutive_spaces = 0;\n    \n    for(char c : text){\n        if(c == ' '){\n            consecutive_spaces++;\n            if(consecutive_spaces > 2){\n                result += \"-\";\n            } else {\n                result += \"_\";\n            }\n        } else {\n            result += c;\n            consecutive_spaces = 0;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/141", "generation": "/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    int digitCount = 0;\n    int dotCount = 0;\n    int dotIndex = -1;\n    string extension;\n\n    // Check conditions\n    for (int i = 0; i < file_name.length(); i++) {\n        if (isdigit(file_name[i])) {\n            digitCount++;\n        } else if (file_name[i] == '.') {\n            dotCount++;\n            dotIndex = i;\n        }\n    }\n\n    if (dotIndex != -1) {\n        extension = file_name.substr(dotIndex + 1);\n    }\n\n    if (digitCount > 3 || dotCount != 1 || dotIndex == 0 || extension != \"txt\" || extension != \"exe\" || extension != \"dll\") {\n        return \"No\";\n    }\n\n    return \"Yes\";\n}\n\n"}
{"task_id": "CPP/142", "generation": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%3 == 0){\n            lst[i] = lst[i]*lst[i]; // square the integer entry if index is multiple of 3\n        }\n        else if(i%4 == 0){\n            lst[i] = lst[i]*lst[i]*lst[i]; // cube the integer entry if index is multiple of 4 and not multiple of 3\n        }\n        sum += lst[i]; // add the modified or unmodified entry to the sum\n    }\n    return sum;\n}"}
{"task_id": "CPP/143", "generation": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    string result = \"\";\n    string word = \"\";\n    int length = sentence.length();\n    \n    for(int i=0; i<length; i++){\n        if(sentence[i] != ' '){\n            word += sentence[i];\n        } else {\n            int word_length = word.length();\n            bool is_prime = true;\n            if(word_length <= 1){\n                is_prime = false;\n            } else {\n                for(int j=2; j*j <= word_length; j++){\n                    if(word_length % j == 0){\n                        is_prime = false;\n                        break;\n                    }\n                }\n            }\n            if(is_prime){\n                result += word + \" \";\n            }\n            word = \"\";\n        }\n    }\n    \n    int last_word_length = word.length();\n    bool is_prime = true;\n    if(last_word_length <= 1){\n        is_prime = false;\n    } else {\n        for(int j=2; j*j <= last_word_length; j++){\n            if(last_word_length % j == 0){\n                is_prime = false;\n                break;\n            }\n        }\n    }\n    if(is_prime){\n        result += word;\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/144", "generation": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n    // Extracting numerator and denominator from x and n\n    int x_num = stoi(x.substr(0, x.find(\"/\")));\n    int x_den = stoi(x.substr(x.find(\"/\") + 1));\n    \n    int n_num = stoi(n.substr(0, n.find(\"/\")));\n    int n_den = stoi(n.substr(n.find(\"/\") + 1));\n    \n    // Calculating the result of x * n\n    double result = (double)x_num / x_den * n_num / n_den;\n    \n    // Checking if the result is a whole number\n    if(result == (int)result){\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "CPP/145", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\n// Function to calculate the sum of digits of a number\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num != 0) {\n        sum += abs(num % 10);\n        num /= 10;\n    }\n    return sum;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    // Custom comparator function for sorting based on sum of digits and index\n    sort(nums.begin(), nums.end(), [&](int a, int b) {\n        int sumA = sumOfDigits(a);\n        int sumB = sumOfDigits(b);\n        if (sumA == sumB) {\n            return find(nums.begin(), nums.end(), a) < find(nums.begin(), nums.end(), b);\n        }\n        return sumA < sumB;\n    });\n\n    return nums;\n}\n\n"}
{"task_id": "CPP/146", "generation": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for(int num : nums){\n        if(num > 10){\n            string numStr = to_string(num);\n            int firstDigit = numStr[0] - '0';\n            int lastDigit = numStr[numStr.length()-1] - '0';\n            if((firstDigit % 2 != 0) && (lastDigit % 2 != 0)){\n                count++;\n            }\n        }\n    }\n    return count;\n} \n\n"}
{"task_id": "CPP/147", "generation": "/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_max_triples(int n){\n    vector<int> a(n);\n    int count = 0;\n    for(int i=0; i<n; i++){\n        a[i] = i*i - i + 1;\n    }\n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "CPP/148", "generation": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    \n    int index1 = -1;\n    int index2 = -1;\n    \n    for(int i=0; i<planets.size(); i++){\n        if(planets[i] == planet1){\n            index1 = i;\n        }\n        if(planets[i] == planet2){\n            index2 = i;\n        }\n    }\n    \n    if(index1 == -1 || index2 == -1){\n        return result;\n    }\n    \n    int start = min(index1, index2);\n    int end = max(index1, index2);\n    \n    for(int i=start+1; i<end; i++){\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/149", "generation": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    // Remove strings with odd lengths\n    vector<string> result;\n    for(string s : lst){\n        if(s.length() % 2 == 0){\n            result.push_back(s);\n        }\n    }\n    \n    // Sort the vector by length and alphabetically\n    sort(result.begin(), result.end(), [](const string &a, const string &b){\n        if(a.length() == b.length()){\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    \n    return result;\n}"}
{"task_id": "CPP/150", "generation": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    if(n <= 1){\n        return y;\n    }\n    for(int i=2; i*i<=n; i++){\n        if(n % i == 0){\n            return y;\n        }\n    }\n    return x;\n}\n\n"}
{"task_id": "CPP/151", "generation": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && (int)lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/152", "generation": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for(int i=0; i<game.size(); i++){\n        if(game[i] == guess[i]){\n            result.push_back(0);\n        }else{\n            result.push_back(abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/153", "generation": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    int max_strength = INT_MIN;\n    string strongest_extension = \"\";\n    \n    for(string extension : extensions){\n        int cap_count = 0;\n        int sm_count = 0;\n        for(char c : extension){\n            if(isupper(c)){\n                cap_count++;\n            } else if(islower(c)){\n                sm_count++;\n            }\n        }\n        int strength = cap_count - sm_count;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n}"}
{"task_id": "CPP/154", "generation": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a,string b){\n    if(a.length() != b.length()){\n        return false;\n    }\n    \n    string combined = a + a;\n    \n    return combined.find(b) != string::npos;\n}\n\n"}
{"task_id": "CPP/155", "generation": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> result = {0, 0};\n    string numStr = to_string(abs(num));\n    \n    for(char c : numStr){\n        if((c - '0') % 2 == 0){\n            result[0]++;\n        } else {\n            result[1]++;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/156", "generation": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_roman(int number){\n    // Define the mapping of roman numerals to integers\n    vector<pair<int, string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n    \n    // Initialize the result string\n    string result = \"\";\n    \n    // Iterate through the roman numerals and build the result string\n    for(auto numeral : roman_numerals){\n        while(number >= numeral.first){\n            result += numeral.second;\n            number -= numeral.first;\n        }\n    }\n    \n    // Convert the result string to lowercase\n    for(int i=0; i<result.size(); i++){\n        result[i] = tolower(result[i]);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/157", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n    // Sort the sides in ascending order\n    if(a > c){\n        float temp = a;\n        a = c;\n        c = temp;\n    }\n    if(b > c){\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    \n    // Check if the sides form a right-angled triangle\n    if(pow(c,2) == pow(a,2) + pow(b,2)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n"}
{"task_id": "CPP/158", "generation": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    string maxWord = \"\";\n    int maxUniqueChars = 0;\n    \n    for(string word : words){\n        int uniqueChars = 0;\n        vector<char> chars;\n        \n        for(char c : word){\n            if(find(chars.begin(), chars.end(), c) == chars.end()){\n                uniqueChars++;\n                chars.push_back(c);\n            }\n        }\n        \n        if(uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word < maxWord)){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        }\n    }\n    \n    return maxWord;\n}"}
{"task_id": "CPP/159", "generation": "/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n    int totalCarrots = number + need;\n    int eatenCarrots = totalCarrots;\n    \n    if (totalCarrots > remaining) {\n        eatenCarrots = remaining;\n    }\n    \n    int carrotsLeft = remaining - eatenCarrots;\n    \n    return {eatenCarrots, carrotsLeft};\n}"}
{"task_id": "CPP/160", "generation": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    // Check if the operator vector is empty or has only one operator\n    if(operato.size() < 1){\n        return -1; // Error: Operator vector should have at least one operator\n    }\n    \n    // Check if the operand vector has at least two operands\n    if(operand.size() < 2){\n        return -1; // Error: Operand vector should have at least two operands\n    }\n    \n    // Initialize result with the first operand\n    int result = operand[0];\n    \n    // Perform algebraic operations based on the operators\n    for(int i=0; i<operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"//\"){\n            if(operand[i+1] != 0){\n                result /= operand[i+1];\n            }\n            else{\n                return -1; // Error: Division by zero\n            }\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n        else{\n            return -1; // Error: Invalid operator\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/161", "generation": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    for(int i=0; i<s.length(); i++){\n        if(isalpha(s[i])){\n            if(islower(s[i])){\n                s[i] = toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n            }\n        }\n    }\n    \n    int left = 0, right = s.length()-1;\n    while(left<right){\n        swap(s[left], s[right]);\n        left++;\n        right--;\n    }\n    \n    return s;\n}"}
{"task_id": "CPP/162", "generation": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    if(text.empty()){\n        return \"None\";\n    }\n    \n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n    \n    char mdString[33];\n    for(int i = 0; i < 16; i++){\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    }\n    \n    return string(mdString);\n}"}
{"task_id": "CPP/163", "generation": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    vector<int> result;\n    if(a > b){\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    for(int i=a; i<=b; i++){\n        if(i%2 == 0 && i < 10){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/0", "generation": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(fabs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/1", "generation": "/*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> result;\n    int count = 0;\n    string group = \"\";\n    for(int i=0; i<paren_string.size(); i++){\n        if(paren_string[i] == '('){\n            count++;\n        }\n        group += paren_string[i];\n        if(paren_string[i] == ')'){\n            count--;\n        }\n        if(count == 0){\n            result.push_back(group);\n            group = \"\";\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/2", "generation": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    int integer_part = floor(number); // Get the integer part of the number\n    float decimal_part = number - integer_part; // Calculate the decimal part\n    return decimal_part; // Return the decimal part\n}\n\n"}
{"task_id": "CPP/3", "generation": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n} \n\n"}
{"task_id": "CPP/4", "generation": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    // Calculate the mean of the input numbers\n    float sum = 0;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    \n    // Calculate the mean absolute deviation\n    float mad = 0;\n    for(int i=0; i<numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n    \n    return mad;\n}\n\n"}
{"task_id": "CPP/5", "generation": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i != numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/6", "generation": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> result;\n    int max_depth = 0;\n    int current_depth = 0;\n    \n    for(int i=0; i<paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            current_depth++;\n            max_depth = max(max_depth, current_depth);\n        }\n        else if(paren_string[i] == ')'){\n            current_depth--;\n        }\n        else if(paren_string[i] == ' '){\n            result.push_back(max_depth);\n            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n    \n    result.push_back(max_depth);\n    \n    return result;\n}"}
{"task_id": "CPP/7", "generation": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filtered_strings;\n    for(string s : strings){\n        if(s.find(substring) != string::npos){\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;\n}"}
{"task_id": "CPP/8", "generation": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    \n    for(int num : numbers){\n        sum += num;\n        product *= num;\n    }\n    \n    return {sum, product};\n}"}
{"task_id": "CPP/9", "generation": "/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> result;\n    int max_num = numbers[0];\n    result.push_back(max_num);\n    \n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n        result.push_back(max_num);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/10", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    int n = str.length();\n    if(n==0){\n        return \"\";\n    }\n    int i = 0;\n    for(i=n-1;i>=0;i--){\n        if(is_palindrome(str.substr(i))){\n            break;\n        }\n    }\n    string prefix = str.substr(0,i);\n    string suffix = str.substr(i);\n    string reverse_prefix(prefix.rbegin(),prefix.rend());\n    return str+reverse_prefix;\n}\n\n"}
{"task_id": "CPP/11", "generation": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result = \"\";\n    for(int i=0; i<a.length(); i++){\n        if(a[i] != b[i]){\n            result += \"1\";\n        } else {\n            result += \"0\";\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if(strings.empty()){\n        return \"None\";\n    }\n    string longestString = strings[0];\n    for(int i=1; i<strings.size(); i++){\n        if(strings[i].length() > longestString.length()){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}"}
{"task_id": "CPP/13", "generation": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    while (a != b) {\n        if (a > b) {\n            a = a - b;\n        } else {\n            b = b - a;\n        }\n    }\n    return a;\n}"}
{"task_id": "CPP/14", "generation": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> result;\n    string prefix = \"\";\n    for(char c : str){\n        prefix += c;\n        result.push_back(prefix);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/15", "generation": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string result = \"\";\n    for(int i=0; i<=n; i++){\n        result += to_string(i) + \" \";\n    }\n    result.pop_back(); // remove the extra space at the end\n    return result;\n}"}
{"task_id": "CPP/16", "generation": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n    // Convert the string to lowercase\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Create a vector to store the distinct characters\n    vector<char> distinct_chars;\n    \n    // Iterate through the string and add distinct characters to the vector\n    for(char c : str){\n        if(find(distinct_chars.begin(), distinct_chars.end(), c) == distinct_chars.end()){\n            distinct_chars.push_back(c);\n        }\n    }\n    \n    // Return the number of distinct characters\n    return distinct_chars.size();\n} \n\n"}
{"task_id": "CPP/17", "generation": "/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n    vector<int> beats;\n    string note = \"\";\n    for(int i=0; i<music_string.length(); i++){\n        if(music_string[i] == 'o'){\n            if(note == \"o\"){\n                beats.push_back(4);\n            }else if(note == \"o|\"){\n                beats.push_back(2);\n            }\n            note = \"o\";\n        }else if(music_string[i] == '|'){\n            if(note == \"o\"){\n                beats.push_back(4);\n            }else if(note == \"o|\"){\n                beats.push_back(2);\n            }else if(note == \".|\"){\n                beats.push_back(1);\n            }\n            note = \"|\";\n        }else if(music_string[i] == '.'){\n            if(note == \"o\"){\n                beats.push_back(4);\n            }else if(note == \"o|\"){\n                beats.push_back(2);\n            }else if(note == \".|\"){\n                beats.push_back(1);\n            }\n            note = \".\";\n        }\n    }\n    if(note == \"o\"){\n        beats.push_back(4);\n    }else if(note == \"o|\"){\n        beats.push_back(2);\n    }else if(note == \".|\"){\n        beats.push_back(1);\n    }\n    return beats;\n}"}
{"task_id": "CPP/18", "generation": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int count = 0;\n    if(substring.empty()){\n        return 0;\n    }\n    size_t pos = str.find(substring, 0);\n    while(pos != string::npos){\n        count++;\n        pos = str.find(substring, pos + 1);\n    }\n    return count;\n}"}
{"task_id": "CPP/19", "generation": "/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<string, int> num_map = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    \n    // Split the input string into individual numbers\n    string result = \"\";\n    string current_num = \"\";\n    for(int i=0; i<numbers.length(); i++){\n        if(numbers[i] != ' '){\n            current_num += numbers[i];\n        } else {\n            result += current_num + \" \";\n            current_num = \"\";\n        }\n    }\n    result += current_num;\n    \n    // Sort the numbers based on their integer values\n    for(int i=0; i<result.length(); i++){\n        if(result[i] == ' '){\n            continue;\n        }\n        string num = \"\";\n        while(result[i] != ' ' && i < result.length()){\n            num += result[i];\n            i++;\n        }\n        int val = num_map[num];\n        for(int j=i+1; j<result.length(); j++){\n            if(result[j] == ' '){\n                continue;\n            }\n            string next_num = \"\";\n            while(result[j] != ' ' && j < result.length()){\n                next_num += result[j];\n                j++;\n            }\n            int next_val = num_map[next_num];\n            if(next_val < val){\n                swap(num, next_num);\n                swap(val, next_val);\n                num_map[num] = val;\n                num_map[next_num] = next_val;\n            }\n        }\n    }\n    \n    // Reconstruct the sorted string\n    string sorted_numbers = \"\";\n    for(auto it=num_map.begin(); it!=num_map.end(); it++){\n        for(int i=0; i<it->second; i++){\n            sorted_numbers += it->first + \" \";\n        }\n    }\n    \n    return sorted_numbers;\n}"}
{"task_id": "CPP/20", "generation": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> result;\n    float min_diff = INFINITY;\n    for(int i=0; i<numbers.size()-1; i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result.clear();\n                result.push_back(min(numbers[i], numbers[j]));\n                result.push_back(max(numbers[i], numbers[j]));\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/21", "generation": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n    // Find the minimum and maximum numbers in the vector\n    float min_num = numbers[0];\n    float max_num = numbers[0];\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] < min_num){\n            min_num = numbers[i];\n        }\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n    }\n    \n    // Apply linear transformation to rescale the numbers\n    vector<float> rescaled_numbers;\n    for(int i=0; i<numbers.size(); i++){\n        float rescaled_num = (numbers[i] - min_num) / (max_num - min_num);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n    \n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/22", "generation": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for(auto val : values){\n        if(val.type() == typeid(int)){\n            result.push_back(boost::any_cast<int>(val));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/23", "generation": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    return str.length();\n}\n\n"}
{"task_id": "CPP/24", "generation": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int largest = 1;\n    for(int i=2; i<n; i++){\n        if(n%i == 0){\n            largest = i;\n        }\n    }\n    return largest;\n}\n\n"}
{"task_id": "CPP/25", "generation": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> factors;\n    for(int i=2; i*i<=n; i++){\n        while(n%i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if(n > 1){\n        factors.push_back(n);\n    }\n    return factors;\n}"}
{"task_id": "CPP/26", "generation": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        if(count(numbers.begin(), numbers.end(), numbers[i]) == 1){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/27", "generation": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    for(int i=0; i<str.length(); i++){\n        if(islower(str[i])){\n            str[i] = toupper(str[i]);\n        }\n        else if(isupper(str[i])){\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;\n}"}
{"task_id": "CPP/28", "generation": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for(string s : strings){\n        result += s;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/29", "generation": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> filtered_strings;\n    for(string str : strings){\n        if(str.substr(0, prefix.length()) == prefix){\n            filtered_strings.push_back(str);\n        }\n    }\n    return filtered_strings;\n}"}
{"task_id": "CPP/30", "generation": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> result;\n    for(int i=0; i<l.size(); i++){\n        if(l[i] > 0){\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/31", "generation": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/32", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only one zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    if(xs.size()%2!=0){\n        printf(\"Error: Coefficients list must have even number of elements\\n\");\n        return 0;\n    }\n    double max_coeff = 0;\n    for(int i=0;i<xs.size();i++){\n        if(abs(xs[i])>max_coeff){\n            max_coeff = abs(xs[i]);\n        }\n    }\n    double epsilon = 0.0001;\n    double x = -max_coeff - 1;\n    while(abs(poly(xs,x))>epsilon){\n        x+=0.1;\n    }\n    return x;\n}\n\n"}
{"task_id": "CPP/33", "generation": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted in ascending order.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> l_prime = l;\n    for(int i=0; i<l.size(); i++){\n        if((i+1)%3 == 0){\n            sort(l_prime.begin() + i, l_prime.begin() + i + 1);\n        }\n    }\n    return l_prime;\n}"}
{"task_id": "CPP/34", "generation": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Remove duplicates\n    l.erase(unique(l.begin(), l.end()), l.end());\n    \n    return l;\n}\n\n"}
{"task_id": "CPP/35", "generation": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n    float max = l[0];\n    for(int i=1; i<l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n} \n\n"}
{"task_id": "CPP/36", "generation": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count = 0;\n    for(int i=1; i<n; i++){\n        if(i%11==0 || i%13==0){\n            int num = i;\n            while(num > 0){\n                if(num%10 == 7){\n                    count++;\n                }\n                num /= 10;\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/37", "generation": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> l_prime = l;\n    vector<float> even_values;\n\n    // Extract even values from l\n    for(int i=0; i<l.size(); i++){\n        if(i%2 == 0){\n            even_values.push_back(l[i]);\n        }\n    }\n\n    // Sort even values\n    sort(even_values.begin(), even_values.end());\n\n    // Replace even values in l_prime with sorted even values\n    int even_index = 0;\n    for(int i=0; i<l_prime.size(); i++){\n        if(i%2 == 0){\n            l_prime[i] = even_values[even_index];\n            even_index++;\n        }\n    }\n\n    return l_prime;\n}"}
{"task_id": "CPP/38", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\n    int l=s.length();\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(2)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n"}
{"task_id": "CPP/39", "generation": "#include <iostream>\n\nbool is_prime(int num);\n\nint prime_fib(int n){\n    int first = 1, second = 1, next, count = 2;\n    while(count < n){\n        next = first + second;\n        first = second;\n        second = next;\n        count++;\n        if(is_prime(next)){\n            n++;\n        }\n    }\n    return next;\n}\n\nbool is_prime(int num){\n    if(num <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=num; i++){\n        if(num % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/40", "generation": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    int n = l.size();\n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/41", "generation": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    return n * (n - 1) / 2;\n}\n\n"}
{"task_id": "CPP/42", "generation": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> result;\n    for(int i=0; i<l.size(); i++){\n        result.push_back(l[i]+1);\n    }\n    return result;\n} \n\n"}
{"task_id": "CPP/43", "generation": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    for(int i=0; i<l.size(); i++){\n        for(int j=i+1; j<l.size(); j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/44", "generation": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string result = \"\";\n    while(x > 0){\n        int remainder = x % base;\n        result = to_string(remainder) + result;\n        x = x / base;\n    }\n    return result;\n}"}
{"task_id": "CPP/45", "generation": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/46", "generation": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 2;\n    }\n    if(n == 3){\n        return 0;\n    }\n    \n    int a = 0, b = 0, c = 2, d = 0, result = 0;\n    \n    for(int i = 4; i <= n; i++){\n        result = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = result;\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/47", "generation": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n8.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n % 2 == 0){\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return l[n/2];\n    }\n}"}
{"task_id": "CPP/48", "generation": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/49", "generation": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    if(n == 0){\n        return 1;\n    }\n    int result = 1;\n    for(int i=0; i<n; i++){\n        result = (result * 2) % p;\n    }\n    return result;\n}"}
{"task_id": "CPP/50", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/51", "generation": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string result = \"\";\n    for(char c : text){\n        if(tolower(c) != 'a' && tolower(c) != 'e' && tolower(c) != 'i' && tolower(c) != 'o' && tolower(c) != 'u'){\n            result += c;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/52", "generation": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    for(int i=0; i<l.size(); i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "CPP/53", "generation": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x + y;\n}\n\n"}
{"task_id": "CPP/54", "generation": "/*\nCheck if two words have the same kind of characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    \n    return s0 == s1;\n}\n\n"}
{"task_id": "CPP/55", "generation": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\n"}
{"task_id": "CPP/56", "generation": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '<'){\n            count++;\n        } else if(bracket == '>'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}"}
{"task_id": "CPP/57", "generation": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    bool increasing = true;\n    bool decreasing = true;\n    \n    for(int i=1; i<l.size(); i++){\n        if(l[i] < l[i-1]){\n            increasing = false;\n        }\n        if(l[i] > l[i-1]){\n            decreasing = false;\n        }\n    }\n    \n    return increasing || decreasing;\n}"}
{"task_id": "CPP/58", "generation": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    \n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            if (result.empty() || result.back() != l1[i]) {\n                result.push_back(l1[i]);\n            }\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/59", "generation": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n\n"}
{"task_id": "CPP/60", "generation": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/61", "generation": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '('){\n            count++;\n        } else if(bracket == ')'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}"}
{"task_id": "CPP/62", "generation": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result;\n    for(int i=1; i<xs.size(); i++){\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}"}
{"task_id": "CPP/63", "generation": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    else if(n == 2){\n        return 1;\n    }\n    \n    int a = 0, b = 0, c = 1, result = 0;\n    \n    for(int i = 3; i <= n; i++){\n        result = a + b + c;\n        a = b;\n        b = c;\n        c = result;\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/64", "generation": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    transform(s.begin(), s.end(), s.begin(), ::tolower); // convert all characters to lowercase\n    int count = 0;\n    for(char c : s){\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n            count++;\n        }\n    }\n    if(s.back() == 'y'){ // check if the last character is 'y'\n        count++;\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/65", "generation": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string num = to_string(x);\n    int n = num.size();\n    \n    if(shift > n){\n        reverse(num.begin(), num.end());\n        return num;\n    }\n    \n    shift = shift % n;\n    string result = num.substr(n-shift) + num.substr(0, n-shift);\n    \n    return result;\n}"}
{"task_id": "CPP/66", "generation": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(char c : s){\n        if(isupper(c)){\n            sum += c;\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/67", "generation": "/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n    int apples = 0;\n    int oranges = 0;\n    int mango = 0;\n    \n    // Parse the string to extract the number of apples and oranges\n    int pos = s.find(\"apples\");\n    if(pos != string::npos){\n        apples = stoi(s.substr(0, pos));\n    }\n    \n    pos = s.find(\"oranges\");\n    if(pos != string::npos){\n        oranges = stoi(s.substr(0, pos));\n    }\n    \n    // Calculate the number of mango fruits\n    mango = n - apples - oranges;\n    \n    return mango;\n} \n\n"}
{"task_id": "CPP/68", "generation": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> result;\n    int smallest_even = -1;\n    int smallest_index = -1;\n    \n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] % 2 == 0 && (smallest_even == -1 || arr[i] < smallest_even)){\n            smallest_even = arr[i];\n            smallest_index = i;\n        }\n    }\n    \n    if(smallest_even != -1){\n        result.push_back(smallest_even);\n        result.push_back(smallest_index);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/69", "generation": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int maxFreq = -1;\n    for(int i=0; i<lst.size(); i++){\n        int count = 0;\n        for(int j=0; j<lst.size(); j++){\n            if(lst[j] == lst[i]){\n                count++;\n            }\n        }\n        if(count >= lst[i] && lst[i] > maxFreq){\n            maxFreq = lst[i];\n        }\n    }\n    return maxFreq;\n}"}
{"task_id": "CPP/70", "generation": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_list({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_list({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_list({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> result;\n    sort(lst.begin(), lst.end());\n    int left = 0;\n    int right = lst.size() - 1;\n    while (left <= right) {\n        if (left == right) {\n            result.push_back(lst[left]);\n        } else {\n            result.push_back(lst[left]);\n            result.push_back(lst[right]);\n        }\n        left++;\n        right--;\n    }\n    return result;\n}"}
{"task_id": "CPP/71", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n    // Check if the sides form a valid triangle\n    if(a + b > c && a + c > b && b + c > a){\n        // Calculate the semi-perimeter\n        float s = (a + b + c) / 2;\n        // Calculate the area using Heron's formula\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        // Round the area to 2 decimal points\n        return round(area * 100) / 100;\n    } else {\n        return -1;\n    }\n}\n\n"}
{"task_id": "CPP/72", "generation": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) \u279e false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) \u279e false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) \u279e true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) \u279e true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n    // Check if the vector q is balanced (palindromic)\n    bool balanced = true;\n    for(int i=0; i<q.size()/2; i++){\n        if(q[i] != q[q.size()-1-i]){\n            balanced = false;\n            break;\n        }\n    }\n    \n    // Check if the sum of elements is less than or equal to the maximum possible weight\n    int sum = 0;\n    for(int i=0; i<q.size(); i++){\n        sum += q[i];\n    }\n    \n    return balanced && sum <= w;\n} \n\n"}
{"task_id": "CPP/73", "generation": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int count = 0;\n    \n    for(int i=0; i<n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            count++;\n        }\n    }\n    \n    return count;\n} \n\n"}
{"task_id": "CPP/74", "generation": "/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) \u279e {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) \u279e {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) \u279e {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) \u279e {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) \u279e {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    \n    for(string s : lst1){\n        total_chars_lst1 += s.length();\n    }\n    \n    for(string s : lst2){\n        total_chars_lst2 += s.length();\n    }\n    \n    if(total_chars_lst1 < total_chars_lst2){\n        return lst1;\n    } else {\n        return lst2;\n    }\n}"}
{"task_id": "CPP/75", "generation": "/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that the prime number is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n    // Check if the number is less than 6, as the smallest prime numbers are 2, 3, and 5\n    if(a < 6){\n        return false;\n    }\n    \n    // Check if the number is divisible by 2, 3, and 5\n    if(a % 2 == 0 && a % 3 == 0 && a % 5 == 0){\n        return true;\n    }\n    \n    // Check if the number is divisible by any combination of prime numbers less than 100\n    for(int i = 2; i < 100; i++){\n        if(a % i == 0){\n            for(int j = i + 1; j < 100; j++){\n                if(a % j == 0){\n                    for(int k = j + 1; k < 100; k++){\n                        if(a % k == 0 && a == i * j * k){\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    return false;\n}\n\n"}
{"task_id": "CPP/76", "generation": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n    if(x == 1) {\n        return true;\n    }\n    int power = 0;\n    while(pow(n, power) <= x) {\n        if(pow(n, power) == x) {\n            return true;\n        }\n        power++;\n    }\n    return false;\n}"}
{"task_id": "CPP/77", "generation": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    int cube_root = round(cbrt(a));\n    return (cube_root * cube_root * cube_root == a);\n}"}
{"task_id": "CPP/78", "generation": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    // Define a variable to store the count of prime hexadecimal digits\n    int count = 0;\n    \n    // Define a string containing the prime hexadecimal digits\n    string primes = \"2357BD\";\n    \n    // Iterate through each character in the input string\n    for(char c : num){\n        // Convert the character to uppercase\n        c = toupper(c);\n        \n        // Check if the character is a prime hexadecimal digit\n        if(primes.find(c) != string::npos){\n            count++;\n        }\n    }\n    \n    // Return the count of prime hexadecimal digits\n    return count;\n}\n\n"}
{"task_id": "CPP/79", "generation": "/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string binary = \"db\";\n    while(decimal > 0){\n        binary = to_string(decimal % 2) + binary;\n        decimal = decimal / 2;\n    }\n    return binary + \"db\";\n}"}
{"task_id": "CPP/80", "generation": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if(s.length() < 3){\n        return false;\n    }\n    \n    for(int i=0; i<s.length()-2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/81", "generation": "/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letter_grades;\n    for(float grade : grades){\n        if(grade == 4.0){\n            letter_grades.push_back(\"A+\");\n        } else if(grade > 3.7){\n            letter_grades.push_back(\"A\");\n        } else if(grade > 3.3){\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 3.0){\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 2.7){\n            letter_grades.push_back(\"B\");\n        } else if(grade > 2.3){\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 2.0){\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 1.7){\n            letter_grades.push_back(\"C\");\n        } else if(grade > 1.3){\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 1.0){\n            letter_grades.push_back(\"D+\");\n        } else if(grade > 0.7){\n            letter_grades.push_back(\"D\");\n        } else if(grade > 0.0){\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}"}
{"task_id": "CPP/82", "generation": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int length = str.length();\n    if(length <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=length; i++){\n        if(length % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/83", "generation": "/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    int count = 0;\n    if(n == 1){\n        return 1;\n    }\n    // Count of numbers starting with 1\n    count += 9 * pow(10, n-2);\n    // Count of numbers ending with 1\n    count += pow(10, n-1);\n    \n    return count;\n}\n\n"}
{"task_id": "CPP/84", "generation": "/*\nGiven a positive integer N, return in binary the total sum of its digits.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    int sum = 0;\n    while(N > 0){\n        sum += N % 10;\n        N /= 10;\n    }\n    string binary = \"\";\n    while(sum > 0){\n        binary = to_string(sum % 2) + binary;\n        sum /= 2;\n    }\n    return binary;\n}"}
{"task_id": "CPP/85", "generation": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for(int i=1; i<lst.size(); i+=2){\n        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/86", "generation": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string result = \"\";\n    string word = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            sort(word.begin(), word.end());\n            result += word + \" \";\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    sort(word.begin(), word.end());\n    result += word;\n    return result;\n} \n\n"}
{"task_id": "CPP/87", "generation": "/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == x){\n                result.push_back({i, j});\n            }\n        }\n    }\n    \n    // Sort by rows in ascending order\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b){\n        return a[0] < b[0];\n    });\n    \n    // Sort by columns in descending order\n    for(int i=0; i<result.size(); i++){\n        sort(result[i].begin(), result[i].end(), greater<int>());\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/88", "generation": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    if(array.empty()){\n        return array;\n    }\n    \n    int sum = array[0] + array[array.size()-1];\n    \n    if(sum % 2 == 0){\n        sort(array.begin(), array.end(), greater<int>());\n    } else {\n        sort(array.begin(), array.end());\n    }\n    \n    return array;\n}"}
{"task_id": "CPP/89", "generation": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        char c = s[i];\n        if(isalpha(c)){\n            char base = islower(c) ? 'a' : 'A';\n            c = base + (c - base + 2*2) % 26;\n        }\n        result += c;\n    }\n    return result;\n}"}
{"task_id": "CPP/90", "generation": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    if(lst.size() < 2){\n        return -1;\n    }\n    sort(lst.begin(), lst.end());\n    int smallest = lst[0];\n    for(int i=1; i<lst.size(); i++){\n        if(lst[i] > smallest){\n            return lst[i];\n        }\n    }\n    return -1;\n}"}
{"task_id": "CPP/91", "generation": "/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int boredom_count = 0;\n    bool is_i = false;\n    \n    for(int i=0; i<S.length(); i++){\n        if(S[i] == 'I' && (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!')){\n            is_i = true;\n        }\n        if((S[i] == '.' || S[i] == '?' || S[i] == '!') && is_i){\n            boredom_count++;\n            is_i = false;\n        }\n    }\n    \n    return boredom_count;\n}"}
{"task_id": "CPP/92", "generation": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e true\n\nany_int(3, 2, 2) \u279e false\n\nany_int(3, -2, 1) \u279e true\n\nany_int(3.6, -2.2, 2) \u279e false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    if(floor(a) == a && floor(b) == b && floor(c) == c){\n        if(a == b + c || b == a + c || c == a + b){\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\n"}
{"task_id": "CPP/93", "generation": "/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    for(int i=0; i<message.length(); i++){\n        if(isalpha(message[i])){\n            if(islower(message[i])){\n                message[i] = toupper(message[i]);\n            } else {\n                message[i] = tolower(message[i]);\n            }\n            if(message[i]=='a' || message[i]=='e' || message[i]=='i' || message[i]=='o' || message[i]=='u'){\n                message[i] = message[i]+2;\n            }\n        }\n    }\n    return message;\n}"}
{"task_id": "CPP/94", "generation": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int maxPrime = 0;\n    for(int num : lst){\n        if(num > 1){\n            bool isPrime = true;\n            for(int i=2; i*i<=num; i++){\n                if(num % i == 0){\n                    isPrime = false;\n                    break;\n                }\n            }\n            if(isPrime && num > maxPrime){\n                maxPrime = num;\n            }\n        }\n    }\n    \n    int sum = 0;\n    string primeStr = to_string(maxPrime);\n    for(char c : primeStr){\n        sum += c - '0';\n    }\n    \n    return sum;\n}"}
{"task_id": "CPP/95", "generation": "#include <iostream>\n#include <string>\n#include <map>\n#include <cctype>\n\nusing namespace std;\n\nbool check_dict_case(map<string, string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n\n    for (auto const& pair : dict) {\n        string key = pair.first;\n        for (char c : key) {\n            if (!isalpha(c)) {\n                return false;\n            }\n        }\n        string lowercase_key = key;\n        string uppercase_key = key;\n        transform(lowercase_key.begin(), lowercase_key.end(), lowercase_key.begin(), ::tolower);\n        transform(uppercase_key.begin(), uppercase_key.end(), uppercase_key.begin(), ::toupper);\n\n        if (key != lowercase_key && key != uppercase_key) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n"}
{"task_id": "CPP/96", "generation": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> primes;\n    if(n <= 1){\n        return primes;\n    }\n    \n    for(int i=2; i<n; i++){\n        bool isPrime = true;\n        for(int j=2; j*j<=i; j++){\n            if(i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    \n    return primes;\n}"}
{"task_id": "CPP/97", "generation": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int unitA = abs(a % 10);\n    int unitB = abs(b % 10);\n    return unitA * unitB;\n}"}
{"task_id": "CPP/98", "generation": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for(int i=0; i<s.length(); i+=2){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/99", "generation": "/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    double num = stod(value);\n    int lower = floor(num);\n    int upper = ceil(num);\n    \n    if (num - lower < upper - num) {\n        return lower;\n    } else {\n        return upper;\n    }\n}"}
{"task_id": "CPP/100", "generation": "/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> result;\n    int stones = n;\n    for(int i=0; i<n; i++){\n        result.push_back(stones);\n        if(stones % 2 == 0){\n            stones += 1;\n        } else {\n            stones += 2;\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/101", "generation": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n    for(char c : s){\n        if(c == ' ' || c == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}"}
{"task_id": "CPP/102", "generation": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    int max_even = -1;\n    for(int i = y; i >= x; i--){\n        if(i % 2 == 0){\n            max_even = i;\n            break;\n        }\n    }\n    return max_even;\n}\n\n"}
{"task_id": "CPP/103", "generation": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n    if(n > m){\n        return \"-1\";\n    }\n    \n    int sum = 0;\n    for(int i = n; i <= m; i++){\n        sum += i;\n    }\n    \n    int avg = round((double)sum / (m - n + 1));\n    \n    string binary = \"\";\n    while(avg > 0){\n        binary = to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n    \n    return binary;\n}"}
{"task_id": "CPP/104", "generation": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for(int num : x){\n        bool hasEvenDigit = false;\n        int temp = num;\n        while(temp > 0){\n            if(temp % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if(!hasEvenDigit){\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}"}
{"task_id": "CPP/105", "generation": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    vector<int> sorted_arr;\n    vector<string> result;\n    map<int, string> num_to_name = {\n        {1, \"One\"},\n        {2, \"Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"Nine\"}\n    };\n    \n    // Sort the integers between 1 and 9\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i]>=1 && arr[i]<=9){\n            sorted_arr.push_back(arr[i]);\n        }\n    }\n    sort(sorted_arr.begin(), sorted_arr.end());\n    \n    // Reverse the sorted array and replace with corresponding names\n    for(int i=sorted_arr.size()-1; i>=0; i--){\n        result.push_back(num_to_name[sorted_arr[i]]);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/106", "generation": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> result;\n    int sum = 0;\n    int factorial = 1;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            factorial *= i;\n            result.push_back(factorial);\n        } else {\n            sum += i;\n            result.push_back(sum);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/107", "generation": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> result = {0, 0};\n    for(int i=1; i<=n; i++){\n        string num = to_string(i);\n        string rev_num = num;\n        reverse(rev_num.begin(), rev_num.end());\n        if(num == rev_num){\n            if(i%2 == 0){\n                result[0]++;\n            }else{\n                result[1]++;\n            }\n        }\n    }\n    return result;\n} \n\n"}
{"task_id": "CPP/108", "generation": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for(int num : n){\n        int sum = 0;\n        int temp = abs(num);\n        while(temp > 0){\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "CPP/109", "generation": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if(arr.empty()){\n        return true;\n    }\n    \n    int n = arr.size();\n    int min_index = 0;\n    \n    for(int i=0; i<n; i++){\n        if(arr[i] < arr[min_index]){\n            min_index = i;\n        }\n    }\n    \n    for(int i=0; i<n; i++){\n        if(arr[(min_index+i)%n] != i+1){\n            return false;\n        }\n    }\n    \n    return true;\n}"}
{"task_id": "CPP/110", "generation": "/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int oddCount = 0;\n    for(int num : lst1){\n        if(num % 2 != 0){\n            oddCount++;\n        }\n    }\n    for(int num : lst2){\n        if(num % 2 != 0){\n            oddCount++;\n        }\n    }\n    if(oddCount % 2 == 0){\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}"}
{"task_id": "CPP/111", "generation": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char, int> result;\n    map<char, int> count;\n\n    // Count the occurrences of each letter\n    for (char c : test) {\n        if (c != ' ') {\n            count[c]++;\n        }\n    }\n\n    // Find the maximum occurrence\n    int max_occurrence = 0;\n    for (auto it : count) {\n        if (it.second > max_occurrence) {\n            max_occurrence = it.second;\n        }\n    }\n\n    // Add letters with maximum occurrence to the result map\n    for (auto it : count) {\n        if (it.second == max_occurrence) {\n            result[it.first] = it.second;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "CPP/112", "generation": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    // Delete characters in s that are equal to any character in c\n    for(int i=0;i<c.length();i++){\n        s.erase(remove(s.begin(), s.end(), c[i]), s.end());\n    }\n    \n    // Check if the result string is palindrome\n    string rev = s;\n    reverse(rev.begin(), rev.end());\n    \n    if(s == rev){\n        return {s, \"True\"};\n    } else {\n        return {s, \"False\"};\n    }\n}"}
{"task_id": "CPP/113", "generation": "/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    vector<string> result;\n    for(string s : lst){\n        int count = 0;\n        for(char c : s){\n            if((c - '0') % 2 != 0){\n                count++;\n            }\n        }\n        string new_str = \"the number of odd elements \" + to_string(count) + \"n the str\" + to_string(count) + \"ng \" + s + \" of the \" + to_string(count) + \"nput.\";\n        result.push_back(new_str);\n    }\n    return result;\n}"}
{"task_id": "CPP/114", "generation": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    long long currentSum = nums[0];\n    \n    for(int i=1; i<nums.size(); i++){\n        currentSum = min(nums[i], currentSum + nums[i]);\n        minSum = min(minSum, currentSum);\n    }\n    \n    return minSum;\n}\n\n"}
{"task_id": "CPP/115", "generation": "/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity. Can't use buckets from other wells to extract water from one well.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int rows = grid.size();\n    int cols = grid[0].size();\n    int total_water = 0;\n    int total_buckets = 0;\n    \n    for(int i=0; i<rows; i++){\n        for(int j=0; j<cols; j++){\n            total_water += grid[i][j];\n        }\n    }\n    \n    total_buckets = total_water / capacity;\n    if(total_water % capacity != 0){\n        total_buckets++;\n    }\n    \n    return total_buckets;\n} \n\n"}
{"task_id": "CPP/116", "generation": "/*\nIn this Kata, you have to sort a vector of integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array({1, 5, 2, 3, 4}) == {1, 2, 4, 3, 5}\n>>> sort_array({-2, -3, -4, -5, -6}) == {-4, -2, -6, -5, -3}\n>>> sort_array({1, 0, 2, 3, 4}) == {0, 1, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    // Custom comparator function to sort based on number of ones in binary representation\n    auto cmp = [](int a, int b) {\n        int countA = __builtin_popcount(abs(a));\n        int countB = __builtin_popcount(abs(b));\n        if (countA == countB) {\n            return a < b;\n        }\n        return countA < countB;\n    };\n    \n    // Sort the vector using custom comparator\n    sort(arr.begin(), arr.end(), cmp);\n    \n    return arr;\n}"}
{"task_id": "CPP/117", "generation": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    vector<string> result;\n    string word = \"\";\n    int consonantCount = 0;\n    \n    for(int i=0; i<s.length(); i++){\n        if(s[i] != ' '){\n            word += s[i];\n            if(tolower(s[i]) != 'a' && tolower(s[i]) != 'e' && tolower(s[i]) != 'i' && tolower(s[i]) != 'o' && tolower(s[i]) != 'u'){\n                consonantCount++;\n            }\n        } else {\n            if(consonantCount == n){\n                result.push_back(word);\n            }\n            word = \"\";\n            consonantCount = 0;\n        }\n    }\n    \n    if(consonantCount == n){\n        result.push_back(word);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/118", "generation": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    string vowels = \"aeiouAEIOU\";\n    int closest_index = -1;\n    \n    for(int i=word.length()-2; i>0; i--){\n        if(word[i] != ' ' && vowels.find(word[i]) != string::npos){\n            closest_index = i;\n            break;\n        }\n    }\n    \n    if(closest_index == -1){\n        return \"\";\n    } else {\n        return string(1, word[closest_index]);\n    }\n}"}
{"task_id": "CPP/119", "generation": "/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    int openCount = 0;\n    int closeCount = 0;\n    \n    for(string s : lst){\n        for(char c : s){\n            if(c == '('){\n                openCount++;\n            } else {\n                if(openCount > 0){\n                    openCount--;\n                } else {\n                    closeCount++;\n                }\n            }\n        }\n    }\n    \n    if(openCount == closeCount){\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}"}
{"task_id": "CPP/120", "generation": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr, in ascending order.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    // Sort the vector in descending order\n    sort(arr.begin(), arr.end(), greater<int>());\n    \n    // Create a new vector to store the maximum k numbers\n    vector<int> result;\n    \n    // Add the first k numbers to the result vector\n    for(int i=0; i<k; i++){\n        result.push_back(arr[i]);\n    }\n    \n    // Sort the result vector in ascending order\n    sort(result.begin(), result.end());\n    \n    return result;\n}"}
{"task_id": "CPP/121", "generation": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/122", "generation": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum = 0;\n    for(int i=0; i<k && i<arr.size(); i++){\n        if(arr[i] >= 10 && arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n} \n\n"}
{"task_id": "CPP/123", "generation": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> result;\n    result.push_back(1); // Collatz(1) is always 1\n    while(n != 1){\n        result.push_back(n);\n        if(n % 2 == 0){\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    result.push_back(1); // Collatz sequence always ends with 1\n    sort(result.begin(), result.end());\n    vector<int> odd_result;\n    for(int num : result){\n        if(num % 2 != 0){\n            odd_result.push_back(num);\n        }\n    }\n    return odd_result;\n}"}
{"task_id": "CPP/124", "generation": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    // Check if the date string is not empty\n    if(date.empty()){\n        return false;\n    }\n    \n    // Split the date string into day, month, and year\n    int day, month, year;\n    sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year);\n    \n    // Check if the month is valid\n    if(month < 1 || month > 12){\n        return false;\n    }\n    \n    // Check if the day is valid based on the month\n    if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)){\n        return false;\n    }\n    else if((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)){\n        return false;\n    }\n    else if(month == 2){\n        if((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)){\n            if(day < 1 || day > 29){\n                return false;\n            }\n        }\n        else{\n            if(day < 1 || day > 28){\n                return false;\n            }\n        }\n    }\n    \n    // Check if the date is in the correct format\n    if(date.length() != 10 || date[2] != '-' || date[5] != '-'){\n        return false;\n    }\n    \n    return true;\n}"}
{"task_id": "CPP/125", "generation": "/*\nGiven a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector with one element, the number of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n    vector<string> result;\n    string word = \"\";\n    for(char c : txt){\n        if(c == ' ' || c == ','){\n            if(word != \"\"){\n                result.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if(word != \"\"){\n        result.push_back(word);\n    }\n    if(result.size() == 0){\n        int count = 0;\n        for(char c : txt){\n            if(islower(c)){\n                int order = c - 'a';\n                if(order % 2 != 0){\n                    count++;\n                }\n            }\n        }\n        result.push_back(to_string(count));\n    }\n    return result;\n}"}
{"task_id": "CPP/126", "generation": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If the a number appears more than twice, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) \u279e true\nis_sorted({1, 2, 3, 4, 5}) \u279e true\nis_sorted({1, 3, 2, 4, 5}) \u279e false\nis_sorted({1, 2, 3, 4, 5, 6}) \u279e true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) \u279e true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) \u279e false\nis_sorted({1, 2, 2, 3, 3, 4}) \u279e true\nis_sorted({1, 2, 2, 2, 3, 4}) \u279e false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    for(int i=0; i<lst.size()-1; i++){\n        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n    \n    for(int i=0; i<lst.size()-2; i++){\n        if(lst[i] == lst[i+1] && lst[i] == lst[i+2]){\n            return false;\n        }\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/127", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nbool isPrime(int n){\n    if(n <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=n; i++){\n        if(n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2){\n    int start1 = interval1[0];\n    int end1 = interval1[1];\n    int start2 = interval2[0];\n    int end2 = interval2[1];\n    \n    int intersectionStart = max(start1, start2);\n    int intersectionEnd = min(end1, end2);\n    \n    if(intersectionStart > intersectionEnd){\n        return \"NO\";\n    }\n    \n    int length = intersectionEnd - intersectionStart;\n    \n    if(isPrime(length)){\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/128", "generation": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if(arr.empty()){\n        return -32768;\n    }\n    \n    int sum = 0;\n    int product = 1;\n    \n    for(int num : arr){\n        if(num > 0){\n            sum += num;\n            product *= 1;\n        } else if(num < 0){\n            sum += abs(num);\n            product *= -1;\n        } else {\n            product *= 0;\n        }\n    }\n    \n    return sum * product;\n}"}
{"task_id": "CPP/129", "generation": "/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    vector<int> result;\n    int n = grid.size();\n    int row = 0, col = 0;\n    \n    for(int i = 0; i < k; i++){\n        result.push_back(grid[row][col]);\n        if((row + col) % 2 == 0){\n            if(col == n - 1){\n                row++;\n            } else if(row == 0){\n                col++;\n            } else {\n                row--;\n                col++;\n            }\n        } else {\n            if(row == n - 1){\n                col++;\n            } else if(col == 0){\n                row++;\n            } else {\n                row++;\n                col--;\n            }\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/130", "generation": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> result;\n    if(n == 0){\n        return result;\n    }\n    result.push_back(3);\n    if(n == 1){\n        return result;\n    }\n    result.push_back(1);\n    if(n == 2){\n        return result;\n    }\n    result.push_back(2);\n    for(int i = 3; i <= n; i++){\n        if(i % 2 == 0){\n            result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i-1] + result[i-2] + result[i-3]);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/131", "generation": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int product = 1;\n    string num = to_string(n);\n    \n    for(char c : num){\n        int digit = c - '0';\n        if(digit % 2 != 0){\n            product *= digit;\n        }\n    }\n    \n    if(product == 1){\n        return 0;\n    }\n    \n    return product;\n}\n\n"}
{"task_id": "CPP/132", "generation": "/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") \u279e true\nis_nested(\"[]]]]]]][[[[[]\") \u279e false\nis_nested(\"[][]\") \u279e false\nis_nested(\"[]\") \u279e false\nis_nested(\"[[][]]\") \u279e true\nis_nested(\"[[]][[\") \u279e true\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n    int count = 0;\n    for(int i=0; i<str.length(); i++){\n        if(str[i] == '['){\n            count++;\n        } else if(str[i] == ']' && count > 0){\n            count--;\n        }\n    }\n    return count > 0;\n}\n\n"}
{"task_id": "CPP/133", "generation": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        int rounded = ceil(lst[i]);\n        sum += rounded * rounded;\n    }\n    return sum;\n} \n\n"}
{"task_id": "CPP/134", "generation": "/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e false\ncheck_if_last_char_is_a_letter(\"apple pi e\") \u279e true\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e false\ncheck_if_last_char_is_a_letter(\"\") \u279e false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if(txt.empty()){\n        return false;\n    }\n    char lastChar = txt.back();\n    if(isalpha(lastChar)){\n        int i = txt.size()-2;\n        while(i >= 0 && txt[i] != ' '){\n            i--;\n        }\n        if(i < 0){\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/135", "generation": "/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int index = -1;\n    for(int i=1; i<arr.size(); i++){\n        if(arr[i] < arr[i-1]){\n            index = i-1;\n        }\n    }\n    return index;\n}\n\n"}
{"task_id": "CPP/136", "generation": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    vector<int> result = {0, 0};\n    int largest_negative = INT_MIN;\n    int smallest_positive = INT_MAX;\n    \n    for(int num : lst){\n        if(num < 0 && num > largest_negative){\n            largest_negative = num;\n        }\n        if(num > 0 && num < smallest_positive){\n            smallest_positive = num;\n        }\n    }\n    \n    if(largest_negative != INT_MIN){\n        result[0] = largest_negative;\n    }\n    if(smallest_positive != INT_MAX){\n        result[1] = smallest_positive;\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/137", "generation": "/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e \"None\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n    if(a.type() == typeid(int) && b.type() == typeid(int)){\n        int int_a = boost::any_cast<int>(a);\n        int int_b = boost::any_cast<int>(b);\n        if(int_a > int_b){\n            return int_a;\n        } else if(int_b > int_a){\n            return int_b;\n        } else {\n            return \"None\";\n        }\n    } else if(a.type() == typeid(float) && b.type() == typeid(float)){\n        float float_a = boost::any_cast<float>(a);\n        float float_b = boost::any_cast<float>(b);\n        if(float_a > float_b){\n            return float_a;\n        } else if(float_b > float_a){\n            return float_b;\n        } else {\n            return \"None\";\n        }\n    } else if(a.type() == typeid(string) && b.type() == typeid(string)){\n        string str_a = boost::any_cast<string>(a);\n        string str_b = boost::any_cast<string>(b);\n        double num_a = stod(str_a);\n        double num_b = stod(str_b);\n        if(num_a > num_b){\n            return str_a;\n        } else if(num_b > num_a){\n            return str_b;\n        } else {\n            return \"None\";\n        }\n    } else if((a.type() == typeid(int) && b.type() == typeid(string)) || (a.type() == typeid(string) && b.type() == typeid(int))){\n        string str_a = to_string(boost::any_cast<int>(a));\n        string str_b = boost::any_cast<string>(b);\n        double num_a = stod(str_a);\n        double num_b = stod(str_b);\n        if(num_a > num_b){\n            return str_a;\n        } else if(num_b > num_a){\n            return str_b;\n        } else {\n            return \"None\";\n        }\n    } else if((a.type() == typeid(float) && b.type() == typeid(string)) || (a.type() == typeid(string) && b.type() == typeid(float))){\n        string str_a = to_string(boost::any_cast<float>(a));\n        string str_b = boost::any_cast<string>(b);\n        double num_a = stod(str_a);\n        double num_b = stod(str_b);\n        if(num_a > num_b){\n            return str_a;\n        } else if(num_b > num_a){\n            return str_b;\n        } else {\n            return \"None\";\n        }\n    }\n    return \"None\";\n}\n\n"}
{"task_id": "CPP/138", "generation": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if(n % 2 != 0 || n < 8){\n        return false;\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/139", "generation": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long result = 1;\n    for(int i = n; i > 0; i--){\n        long long factorial = 1;\n        for(int j = i; j > 0; j--){\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/140", "generation": "/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string result = \"\";\n    int consecutive_spaces = 0;\n    \n    for(int i=0; i<text.length(); i++){\n        if(text[i] == ' '){\n            consecutive_spaces++;\n            if(consecutive_spaces > 2){\n                result += \"-\";\n            } else {\n                result += \"_\";\n            }\n        } else {\n            result += text[i];\n            consecutive_spaces = 0;\n        }\n    }\n    \n    return result;\n} \n\n"}
{"task_id": "CPP/141", "generation": "/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    int digit_count = 0;\n    int dot_count = 0;\n    int dot_index = -1;\n    \n    // Check conditions for valid file name\n    for(int i=0; i<file_name.length(); i++){\n        if(isdigit(file_name[i])){\n            digit_count++;\n        }\n        else if(file_name[i] == '.'){\n            dot_count++;\n            dot_index = i;\n        }\n    }\n    \n    if(digit_count > 3 || dot_count != 1 || dot_index == 0 || dot_index == file_name.length()-1){\n        return \"No\";\n    }\n    \n    string extension = file_name.substr(dot_index+1);\n    if(extension != \"txt\" && extension != \"exe\" && extension != \"dll\"){\n        return \"No\";\n    }\n    \n    return \"Yes\";\n}\n\n"}
{"task_id": "CPP/142", "generation": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%3 == 0){\n            lst[i] = lst[i]*lst[i]; // square the integer entry\n        }\n        else if(i%4 == 0){\n            lst[i] = lst[i]*lst[i]*lst[i]; // cube the integer entry\n        }\n        sum += lst[i]; // add the modified entry to the sum\n    }\n    return sum;\n}"}
{"task_id": "CPP/143", "generation": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    string result = \"\";\n    string word = \"\";\n    int length = sentence.length();\n    \n    for(int i=0; i<length; i++){\n        if(sentence[i] != ' '){\n            word += sentence[i];\n        } else {\n            int word_length = word.length();\n            bool is_prime = true;\n            if(word_length <= 1){\n                is_prime = false;\n            } else {\n                for(int j=2; j*j <= word_length; j++){\n                    if(word_length % j == 0){\n                        is_prime = false;\n                        break;\n                    }\n                }\n            }\n            if(is_prime){\n                result += word + \" \";\n            }\n            word = \"\";\n        }\n    }\n    \n    int last_word_length = word.length();\n    bool is_prime = true;\n    if(last_word_length <= 1){\n        is_prime = false;\n    } else {\n        for(int j=2; j*j <= last_word_length; j++){\n            if(last_word_length % j == 0){\n                is_prime = false;\n                break;\n            }\n        }\n    }\n    if(is_prime){\n        result += word;\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/144", "generation": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n    int num1 = stoi(x.substr(0, x.find(\"/\")));\n    int den1 = stoi(x.substr(x.find(\"/\") + 1));\n    int num2 = stoi(n.substr(0, n.find(\"/\")));\n    int den2 = stoi(n.substr(n.find(\"/\") + 1));\n    \n    if ((num1 * num2) % (den1 * den2) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "CPP/145", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\n// Function to calculate the sum of digits of a number\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num != 0) {\n        sum += abs(num % 10);\n        num /= 10;\n    }\n    return sum;\n}\n\nstd::vector<int> order_by_points(std::vector<int> nums) {\n    // Custom comparator function for sorting based on sum of digits\n    auto cmp = [&](int a, int b) {\n        int sumA = sumOfDigits(a);\n        int sumB = sumOfDigits(b);\n        if (sumA == sumB) {\n            return std::find(nums.begin(), nums.end(), a) < std::find(nums.begin(), nums.end(), b);\n        }\n        return sumA < sumB;\n    };\n\n    // Sorting the vector using custom comparator\n    std::sort(nums.begin(), nums.end(), cmp);\n\n    return nums;\n}\n\n"}
{"task_id": "CPP/146", "generation": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for(int num : nums){\n        string numStr = to_string(num);\n        int firstDigit = numStr[0] - '0';\n        int lastDigit = numStr[numStr.length()-1] - '0';\n        if(num > 10 && (firstDigit % 2 != 0) && (lastDigit % 2 != 0)){\n            count++;\n        }\n    }\n    return count;\n} \n\n"}
{"task_id": "CPP/147", "generation": "/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_max_triples(int n){\n    vector<int> a(n);\n    int count = 0;\n    for(int i=0; i<n; i++){\n        a[i] = i*i - i + 1;\n    }\n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/148", "generation": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    \n    int index1 = -1;\n    int index2 = -1;\n    \n    for(int i=0; i<planets.size(); i++){\n        if(planets[i] == planet1){\n            index1 = i;\n        }\n        if(planets[i] == planet2){\n            index2 = i;\n        }\n    }\n    \n    if(index1 == -1 || index2 == -1){\n        return result;\n    }\n    \n    int start = min(index1, index2);\n    int end = max(index1, index2);\n    \n    for(int i=start+1; i<end; i++){\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/149", "generation": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    // Remove strings with odd lengths\n    vector<string> result;\n    for(string s : lst){\n        if(s.length() % 2 == 0){\n            result.push_back(s);\n        }\n    }\n    \n    // Sort the vector by length and alphabetically\n    sort(result.begin(), result.end(), [](const string& a, const string& b){\n        if(a.length() == b.length()){\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    \n    return result;\n}"}
{"task_id": "CPP/150", "generation": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    if(n<=1){\n        return y;\n    }\n    for(int i=2;i<n;i++){\n        if(n%i==0){\n            return y;\n        }\n    }\n    return x;\n}\n\n"}
{"task_id": "CPP/151", "generation": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && (int)lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/152", "generation": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for(int i=0; i<game.size(); i++){\n        if(game[i] == guess[i]){\n            result.push_back(0);\n        } else {\n            result.push_back(abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/153", "generation": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    int max_strength = INT_MIN;\n    string strongest_extension = \"\";\n    \n    for(string extension : extensions){\n        int CAP = 0, SM = 0;\n        for(char c : extension){\n            if(isupper(c)){\n                CAP++;\n            } else if(islower(c)){\n                SM++;\n            }\n        }\n        int strength = CAP - SM;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n}"}
{"task_id": "CPP/154", "generation": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a,string b){\n    if(a.length() != b.length()){\n        return false;\n    }\n    \n    string temp = b + b;\n    \n    if(temp.find(a) != string::npos){\n        return true;\n    }\n    \n    return false;\n}\n\n"}
{"task_id": "CPP/155", "generation": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> result = {0, 0};\n    string num_str = to_string(abs(num));\n    \n    for(char c : num_str){\n        if((c - '0') % 2 == 0){\n            result[0]++;\n        } else {\n            result[1]++;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/156", "generation": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_roman(int number){\n    // Create vectors to store the roman numeral symbols and their corresponding values\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n    string result = \"\";\n\n    // Iterate through the values and symbols vectors to build the roman numeral string\n    for (int i = 0; i < values.size(); i++) {\n        while (number >= values[i]) {\n            result += symbols[i];\n            number -= values[i];\n        }\n    }\n\n    // Convert the result to lowercase\n    for (int i = 0; i < result.length(); i++) {\n        result[i] = tolower(result[i]);\n    }\n\n    return result;\n}"}
{"task_id": "CPP/157", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n    // Sort the sides in ascending order\n    if(a > c){\n        float temp = a;\n        a = c;\n        c = temp;\n    }\n    if(b > c){\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    \n    // Check if the sides form a right-angled triangle\n    if(pow(c,2) == pow(a,2) + pow(b,2)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n"}
{"task_id": "CPP/158", "generation": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    string maxWord = \"\";\n    int maxUniqueChars = 0;\n    \n    for(string word : words){\n        int uniqueChars = 0;\n        bool charCount[26] = {false};\n        \n        for(char c : word){\n            if(!charCount[c - 'a']){\n                charCount[c - 'a'] = true;\n                uniqueChars++;\n            }\n        }\n        \n        if(uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word < maxWord)){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        }\n    }\n    \n    return maxWord;\n}"}
{"task_id": "CPP/159", "generation": "/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n    int totalCarrots = number + need;\n    int eatenCarrots = totalCarrots;\n    \n    if (totalCarrots > remaining) {\n        eatenCarrots = remaining;\n    }\n    \n    int carrotsLeft = remaining - eatenCarrots;\n    \n    return {eatenCarrots, carrotsLeft};\n}"}
{"task_id": "CPP/160", "generation": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    if(operato.size() != operand.size()-1){\n        return -1; // Invalid input\n    }\n    \n    int result = operand[0]; // Initialize result with the first operand\n    \n    for(int i=0; i<operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"//\"){\n            if(operand[i+1] != 0){\n                result /= operand[i+1];\n            }\n            else{\n                return -1; // Division by zero error\n            }\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n        else{\n            return -1; // Invalid operator\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/161", "generation": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    for(int i=0;i<s.length();i++){\n        if(isalpha(s[i])){\n            if(islower(s[i])){\n                s[i] = toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n            }\n        }\n    }\n    int left = 0, right = s.length()-1;\n    while(left<right){\n        swap(s[left],s[right]);\n        left++;\n        right--;\n    }\n    return s;\n}"}
{"task_id": "CPP/162", "generation": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    if(text.empty()){\n        return \"None\";\n    }\n    \n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n    \n    char mdString[33];\n    for(int i = 0; i < 16; i++){\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    }\n    \n    return string(mdString);\n}"}
{"task_id": "CPP/163", "generation": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    vector<int> result;\n    if(a > b){\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    for(int i=a; i<=b; i++){\n        if(i%2 == 0 && i<10){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/0", "generation": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(fabs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/1", "generation": "/*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> result;\n    int count = 0;\n    string current_group = \"\";\n    \n    for(int i=0; i<paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            count++;\n        }\n        current_group += paren_string[i];\n        \n        if(paren_string[i] == ')'){\n            count--;\n            if(count == 0){\n                result.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/2", "generation": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    int integer_part = (int)number; // Get the integer part of the number\n    float decimal_part = number - integer_part; // Calculate the decimal part\n    return decimal_part; // Return the decimal part of the number\n}\n\n"}
{"task_id": "CPP/3", "generation": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n} \n\n"}
{"task_id": "CPP/4", "generation": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    // Calculate the mean of the dataset\n    float sum = 0.0;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    \n    // Calculate the mean absolute deviation\n    float deviation_sum = 0.0;\n    for(int i=0; i<numbers.size(); i++){\n        deviation_sum += abs(numbers[i] - mean);\n    }\n    float mean_absolute_deviation = deviation_sum / numbers.size();\n    \n    return mean_absolute_deviation;\n}\n\n"}
{"task_id": "CPP/5", "generation": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i != numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/6", "generation": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> result;\n    int max_depth = 0;\n    int current_depth = 0;\n    \n    for(char c : paren_string){\n        if(c == '('){\n            current_depth++;\n            max_depth = max(max_depth, current_depth);\n        } else if(c == ')'){\n            current_depth--;\n        } else if(c == ' '){\n            result.push_back(max_depth);\n            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n    \n    result.push_back(max_depth);\n    \n    return result;\n}"}
{"task_id": "CPP/7", "generation": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filtered_strings;\n    for(string s : strings){\n        if(s.find(substring) != string::npos){\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;\n}"}
{"task_id": "CPP/8", "generation": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    \n    for(int num : numbers){\n        sum += num;\n        product *= num;\n    }\n    \n    return {sum, product};\n}"}
{"task_id": "CPP/9", "generation": "/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> result;\n    int max_num = numbers[0];\n    result.push_back(max_num);\n    \n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n        result.push_back(max_num);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/10", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    if(str.empty()){\n        return \"\";\n    }\n    int n = str.length();\n    int i = 0;\n    for(i=n-1; i>=0; i--){\n        if(is_palindrome(str.substr(i))){\n            break;\n        }\n    }\n    string prefix = str.substr(0,i);\n    string suffix = str.substr(i);\n    string reverse_prefix(prefix.rbegin(),prefix.rend());\n    return str + reverse_prefix;\n}\n\n"}
{"task_id": "CPP/11", "generation": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result = \"\";\n    for(int i=0; i<a.length(); i++){\n        if(a[i] != b[i]){\n            result += \"1\";\n        } else {\n            result += \"0\";\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if(strings.empty()){\n        return \"None\";\n    }\n    \n    string longestString = strings[0];\n    for(int i=1; i<strings.size(); i++){\n        if(strings[i].length() > longestString.length()){\n            longestString = strings[i];\n        }\n    }\n    \n    return longestString;\n}"}
{"task_id": "CPP/13", "generation": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    while (a != b) {\n        if (a > b) {\n            a = a - b;\n        } else {\n            b = b - a;\n        }\n    }\n    return a;\n}\n\n"}
{"task_id": "CPP/14", "generation": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> result;\n    string prefix = \"\";\n    for(char c : str){\n        prefix += c;\n        result.push_back(prefix);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/15", "generation": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string result = \"\";\n    for(int i=0; i<=n; i++){\n        result += to_string(i) + \" \";\n    }\n    result.pop_back(); // remove the extra space at the end\n    return result;\n}"}
{"task_id": "CPP/16", "generation": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n    // Convert the string to lowercase\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Initialize a vector to store the distinct characters\n    vector<char> distinct_chars;\n    \n    // Iterate through the string and add distinct characters to the vector\n    for(char c : str){\n        if(find(distinct_chars.begin(), distinct_chars.end(), c) == distinct_chars.end()){\n            distinct_chars.push_back(c);\n        }\n    }\n    \n    // Return the number of distinct characters\n    return distinct_chars.size();\n}"}
{"task_id": "CPP/17", "generation": "/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n    vector<int> beats;\n    string note = \"\";\n    for(int i=0; i<music_string.length(); i++){\n        if(music_string[i] == 'o'){\n            if(note == \"o\"){\n                beats.push_back(4);\n            }else if(note == \"o|\"){\n                beats.push_back(2);\n            }\n            note = \"o\";\n        }else if(music_string[i] == '|'){\n            if(note == \"o\"){\n                beats.push_back(4);\n            }else if(note == \"o|\"){\n                beats.push_back(2);\n            }else if(note == \".|\"){\n                beats.push_back(1);\n            }\n            note = \"|\";\n        }else if(music_string[i] == '.'){\n            if(note == \"o\"){\n                beats.push_back(4);\n            }else if(note == \"o|\"){\n                beats.push_back(2);\n            }else if(note == \".|\"){\n                beats.push_back(1);\n            }\n            note = \".\";\n        }\n    }\n    if(note == \"o\"){\n        beats.push_back(4);\n    }else if(note == \"o|\"){\n        beats.push_back(2);\n    }else if(note == \".|\"){\n        beats.push_back(1);\n    }\n    return beats;\n}"}
{"task_id": "CPP/18", "generation": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int count = 0;\n    if(substring.empty()){\n        return 0;\n    }\n    for (size_t i = 0; (i = str.find(substring, i)) != string::npos; i += substring.length()) {\n        count++;\n    }\n    return count;\n}"}
{"task_id": "CPP/19", "generation": "/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    // Create a map to store the mapping of number words to their corresponding numerical values\n    map<string, int> numberMap = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    \n    // Split the input string into individual number words\n    string number;\n    string result = \"\";\n    for(int i=0; i<numbers.size(); i++){\n        if(numbers[i] == ' '){\n            // Convert the number word to its numerical value and append it to the result string\n            result += number + \" \";\n            number = \"\";\n        } else {\n            number += numbers[i];\n        }\n    }\n    result += number;\n    \n    // Split the result string into individual number words\n    string sortedResult = \"\";\n    string currentNumber;\n    for(int i=0; i<result.size(); i++){\n        if(result[i] == ' '){\n            // Convert the number word to its numerical value and append it to the sorted result string\n            int num = numberMap[currentNumber];\n            sortedResult += to_string(num) + \" \";\n            currentNumber = \"\";\n        } else {\n            currentNumber += result[i];\n        }\n    }\n    int num = numberMap[currentNumber];\n    sortedResult += to_string(num);\n    \n    return sortedResult;\n} \n\n"}
{"task_id": "CPP/20", "generation": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> result;\n    float min_diff = INFINITY;\n    for(int i=0; i<numbers.size()-1; i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result.clear();\n                result.push_back(min(numbers[i], numbers[j]));\n                result.push_back(max(numbers[i], numbers[j]));\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/21", "generation": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n    // Find the minimum and maximum numbers in the vector\n    float min_num = numbers[0];\n    float max_num = numbers[0];\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] < min_num){\n            min_num = numbers[i];\n        }\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n    }\n    \n    // Apply linear transformation to rescale the numbers\n    vector<float> rescaled_numbers;\n    for(int i=0; i<numbers.size(); i++){\n        float rescaled_num = (numbers[i] - min_num) / (max_num - min_num);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n    \n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/22", "generation": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for(auto val : values){\n        if(val.type() == typeid(int)){\n            result.push_back(boost::any_cast<int>(val));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/23", "generation": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    return str.length();\n}\n\n"}
{"task_id": "CPP/24", "generation": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int largest = 1;\n    for(int i=2; i<n; i++){\n        if(n%i == 0){\n            largest = i;\n        }\n    }\n    return largest;\n}\n\n"}
{"task_id": "CPP/25", "generation": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> factors;\n    for(int i=2; i*i<=n; i++){\n        while(n%i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if(n > 1){\n        factors.push_back(n);\n    }\n    return factors;\n}"}
{"task_id": "CPP/26", "generation": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        if(count(numbers.begin(), numbers.end(), numbers[i]) == 1){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/27", "generation": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    for(int i=0; i<str.length(); i++){\n        if(islower(str[i])){\n            str[i] = toupper(str[i]);\n        }\n        else if(isupper(str[i])){\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;\n}"}
{"task_id": "CPP/28", "generation": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for(string s : strings){\n        result += s;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/29", "generation": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> filtered_strings;\n    for(string str : strings){\n        if(str.substr(0, prefix.length()) == prefix){\n            filtered_strings.push_back(str);\n        }\n    }\n    return filtered_strings;\n}"}
{"task_id": "CPP/30", "generation": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> result;\n    for(int i=0; i<l.size(); i++){\n        if(l[i] > 0){\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/31", "generation": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/32", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only one zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n\n    if(xs.size() % 2 != 0){\n        printf(\"Error: Number of coefficients should be even.\\n\");\n        return 0;\n    }\n    \n    double max_coeff = 0;\n    for(int i=0; i<xs.size(); i++){\n        if(abs(xs[i]) > max_coeff){\n            max_coeff = abs(xs[i]);\n        }\n    }\n    \n    double x = -1;\n    while(poly(xs, x) != 0){\n        x += 0.1;\n    }\n    \n    return x;\n}\n\n"}
{"task_id": "CPP/33", "generation": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted in ascending order.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> l_prime = l;\n    for(int i=0; i<l.size(); i++){\n        if((i+1)%3 == 0){\n            sort(l_prime.begin() + i, l_prime.begin() + i + 1);\n        }\n    }\n    return l_prime;\n}"}
{"task_id": "CPP/34", "generation": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Remove duplicates\n    l.erase(unique(l.begin(), l.end()), l.end());\n    \n    return l;\n}\n\n"}
{"task_id": "CPP/35", "generation": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n    float max = l[0];\n    for(int i=1; i<l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}"}
{"task_id": "CPP/36", "generation": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count = 0;\n    for(int i=1; i<n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            int num = i;\n            while(num > 0){\n                if(num % 10 == 7){\n                    count++;\n                }\n                num = num / 10;\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/37", "generation": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> l_prime = l;\n    vector<float> even_values;\n\n    // Extract even values from l\n    for(int i=0; i<l.size(); i++){\n        if(i%2 == 0){\n            even_values.push_back(l[i]);\n        }\n    }\n\n    // Sort even values\n    sort(even_values.begin(), even_values.end());\n\n    // Replace even values in l_prime with sorted even values\n    int j = 0;\n    for(int i=0; i<l.size(); i++){\n        if(i%2 == 0){\n            l_prime[i] = even_values[j];\n            j++;\n        }\n    }\n\n    return l_prime;\n}"}
{"task_id": "CPP/38", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\n    int l=s.length();\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(2)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n"}
{"task_id": "CPP/39", "generation": "/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    int first = 1, second = 1, next, count = 2;\n    while(count < n){\n        next = first + second;\n        first = second;\n        second = next;\n        count++;\n    }\n    while(true){\n        next = first + second;\n        first = second;\n        second = next;\n        bool isPrime = true;\n        for(int i=2; i*i<=next; i++){\n            if(next % i == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            return next;\n        }\n    }\n}"}
{"task_id": "CPP/40", "generation": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    int n = l.size();\n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/41", "generation": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    // Each car moving left to right will collide with each car moving right to left\n    // So the total number of collisions will be n * n\n    return n * n;\n}\n\n"}
{"task_id": "CPP/42", "generation": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> result;\n    for(int i=0; i<l.size(); i++){\n        result.push_back(l[i]+1);\n    }\n    return result;\n}"}
{"task_id": "CPP/43", "generation": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    for(int i=0; i<l.size(); i++){\n        for(int j=i+1; j<l.size(); j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/44", "generation": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string result = \"\";\n    while(x > 0){\n        int remainder = x % base;\n        result = to_string(remainder) + result;\n        x = x / base;\n    }\n    return result;\n}"}
{"task_id": "CPP/45", "generation": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/46", "generation": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 2;\n    }\n    if(n == 3){\n        return 0;\n    }\n    \n    int a = 0, b = 0, c = 2, d = 0, e = 0;\n    \n    for(int i = 4; i <= n; i++){\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    \n    return e;\n}\n\n"}
{"task_id": "CPP/47", "generation": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n8.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n % 2 == 0){\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return l[n/2];\n    }\n}"}
{"task_id": "CPP/48", "generation": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/49", "generation": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    if (p == 1) {\n        return 0;\n    }\n    int result = 1;\n    n = n % p;\n    while (p > 0) {\n        if (p % 2 == 1) {\n            result = (result * n) % p;\n        }\n        p = p / 2;\n        n = (n * n) % p;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/50", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/51", "generation": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string result = \"\";\n    for(char c : text){\n        if(tolower(c) != 'a' && tolower(c) != 'e' && tolower(c) != 'i' && tolower(c) != 'o' && tolower(c) != 'u'){\n            result += c;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/52", "generation": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    for(int i=0; i<l.size(); i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "CPP/53", "generation": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x + y;\n}\n\n"}
{"task_id": "CPP/54", "generation": "/*\nCheck if two words have the same kind of characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    \n    return s0 == s1;\n}\n\n"}
{"task_id": "CPP/55", "generation": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}"}
{"task_id": "CPP/56", "generation": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '<'){\n            count++;\n        } else if(bracket == '>'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/57", "generation": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    bool increasing = true;\n    bool decreasing = true;\n    \n    for(int i=1; i<l.size(); i++){\n        if(l[i] < l[i-1]){\n            increasing = false;\n        }\n        if(l[i] > l[i-1]){\n            decreasing = false;\n        }\n    }\n    \n    return increasing || decreasing;\n}"}
{"task_id": "CPP/58", "generation": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    \n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            if (result.empty() || result.back() != l1[i]) {\n                result.push_back(l1[i]);\n            }\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/59", "generation": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n\n"}
{"task_id": "CPP/60", "generation": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/61", "generation": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '('){\n            count++;\n        } else if(bracket == ')'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n} \n\n"}
{"task_id": "CPP/62", "generation": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result;\n    for(int i=1; i<xs.size(); i++){\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}"}
{"task_id": "CPP/63", "generation": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    else if(n == 2){\n        return 1;\n    }\n    \n    int a = 0, b = 0, c = 1, result = 0;\n    \n    for(int i = 3; i <= n; i++){\n        result = a + b + c;\n        a = b;\n        b = c;\n        c = result;\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/64", "generation": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    transform(s.begin(), s.end(), s.begin(), ::tolower); // convert all characters to lowercase\n    int count = 0;\n    for(char c : s){\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n            count++;\n        }\n    }\n    if(s.back() == 'y'){ // check if last character is 'y'\n        count++;\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/65", "generation": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string num = to_string(x);\n    int n = num.size();\n    \n    if(shift > n){\n        reverse(num.begin(), num.end());\n        return num;\n    }\n    \n    shift = shift % n;\n    \n    string result = num.substr(n-shift) + num.substr(0, n-shift);\n    \n    return result;\n}"}
{"task_id": "CPP/66", "generation": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(char c : s){\n        if(isupper(c)){\n            sum += c;\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/67", "generation": "/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n    int apples = 0;\n    int oranges = 0;\n    int mango = 0;\n    \n    // Parse the string to get the number of apples and oranges\n    int pos = s.find(\"apples\");\n    if(pos != string::npos){\n        apples = stoi(s.substr(0, pos));\n    }\n    \n    pos = s.find(\"oranges\");\n    if(pos != string::npos){\n        oranges = stoi(s.substr(0, pos));\n    }\n    \n    // Calculate the number of mango fruits\n    mango = n - apples - oranges;\n    \n    return mango;\n} \n\n"}
{"task_id": "CPP/68", "generation": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> result;\n    int smallest_even = -1;\n    int smallest_index = -1;\n    \n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] % 2 == 0 && (smallest_even == -1 || arr[i] < smallest_even)){\n            smallest_even = arr[i];\n            smallest_index = i;\n        }\n    }\n    \n    if(smallest_even != -1){\n        result.push_back(smallest_even);\n        result.push_back(smallest_index);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/69", "generation": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int maxFreq = -1;\n    for(int i=0; i<lst.size(); i++){\n        int count = 0;\n        for(int j=0; j<lst.size(); j++){\n            if(lst[j] == lst[i]){\n                count++;\n            }\n        }\n        if(count >= lst[i] && lst[i] > maxFreq){\n            maxFreq = lst[i];\n        }\n    }\n    return maxFreq;\n}"}
{"task_id": "CPP/70", "generation": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_list({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_list({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_list({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> result;\n    sort(lst.begin(), lst.end());\n    int left = 0, right = lst.size() - 1;\n    while(left <= right){\n        result.push_back(lst[left]);\n        if(left != right){\n            result.push_back(lst[right]);\n        }\n        left++;\n        right--;\n    }\n    return result;\n}"}
{"task_id": "CPP/71", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n    // Check if the three sides form a valid triangle\n    if(a + b > c && a + c > b && b + c > a){\n        // Calculate the semi-perimeter\n        float s = (a + b + c) / 2;\n        // Calculate the area using Heron's formula\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        // Round the area to 2 decimal points\n        return round(area * 100) / 100;\n    } else {\n        return -1; // Invalid triangle\n    }\n}\n\n"}
{"task_id": "CPP/72", "generation": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) \u279e false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) \u279e false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) \u279e true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) \u279e true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n    // Check if the vector q is balanced (palindromic)\n    bool balanced = true;\n    for(int i=0; i<q.size()/2; i++){\n        if(q[i] != q[q.size()-1-i]){\n            balanced = false;\n            break;\n        }\n    }\n    \n    // Check if the sum of elements is less than or equal to the maximum weight\n    int sum = 0;\n    for(int i=0; i<q.size(); i++){\n        sum += q[i];\n    }\n    \n    // Return true if balanced and sum is less than or equal to maximum weight, false otherwise\n    return balanced && sum <= w;\n}\n\n"}
{"task_id": "CPP/73", "generation": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int changes = 0;\n    \n    for(int i=0; i<n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            changes++;\n        }\n    }\n    \n    return changes;\n} \n\n"}
{"task_id": "CPP/74", "generation": "/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) \u279e {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) \u279e {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) \u279e {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) \u279e {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) \u279e {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    \n    for(string str : lst1){\n        total_chars_lst1 += str.length();\n    }\n    \n    for(string str : lst2){\n        total_chars_lst2 += str.length();\n    }\n    \n    if(total_chars_lst1 < total_chars_lst2 || total_chars_lst1 == total_chars_lst2){\n        return lst1;\n    } else {\n        return lst2;\n    }\n}"}
{"task_id": "CPP/75", "generation": "#include <iostream>\n\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int num){\n    if(num <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=num; i++){\n        if(num % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nbool is_multiply_prime(int a){\n    // Loop through all prime numbers less than 100\n    for(int i=2; i<100; i++){\n        if(is_prime(i)){\n            for(int j=i+1; j<100; j++){\n                if(is_prime(j)){\n                    for(int k=j+1; k<100; k++){\n                        if(is_prime(k) && i*j*k == a){\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/76", "generation": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n    if(x == 1) {\n        return true;\n    }\n    int power = 0;\n    while(pow(n, power) <= x) {\n        if(pow(n, power) == x) {\n            return true;\n        }\n        power++;\n    }\n    return false;\n}"}
{"task_id": "CPP/77", "generation": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    int cube_root = cbrt(a);\n    return (cube_root * cube_root * cube_root == a);\n}"}
{"task_id": "CPP/78", "generation": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    int count = 0;\n    for(char c : num){\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D'){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/79", "generation": "/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string binary = \"db\";\n    if(decimal == 0){\n        binary += \"0\";\n    } else {\n        while(decimal > 0){\n            binary = to_string(decimal % 2) + binary;\n            decimal /= 2;\n        }\n    }\n    binary += \"db\";\n    return binary;\n}"}
{"task_id": "CPP/80", "generation": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if(s.length() < 3){\n        return false;\n    }\n    \n    for(int i=0; i<s.length()-2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/81", "generation": "/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letter_grades;\n    for(float grade : grades){\n        if(grade == 4.0){\n            letter_grades.push_back(\"A+\");\n        } else if(grade > 3.7){\n            letter_grades.push_back(\"A\");\n        } else if(grade > 3.3){\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 3.0){\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 2.7){\n            letter_grades.push_back(\"B\");\n        } else if(grade > 2.3){\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 2.0){\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 1.7){\n            letter_grades.push_back(\"C\");\n        } else if(grade > 1.3){\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 1.0){\n            letter_grades.push_back(\"D+\");\n        } else if(grade > 0.7){\n            letter_grades.push_back(\"D\");\n        } else if(grade > 0.0){\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}"}
{"task_id": "CPP/82", "generation": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int length = str.length();\n    if(length <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=length; i++){\n        if(length % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/83", "generation": "/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    int count = 0;\n    if(n == 1){\n        return 1;\n    }\n    count = 9 * pow(10, n-2) + pow(10, n-1) - pow(9, n-1);\n    return count;\n}\n\n"}
{"task_id": "CPP/84", "generation": "/*\nGiven a positive integer N, return in binary the total sum of its digits.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    int sum = 0;\n    while(N > 0){\n        sum += N % 10;\n        N /= 10;\n    }\n    string binary = \"\";\n    while(sum > 0){\n        binary = to_string(sum % 2) + binary;\n        sum /= 2;\n    }\n    return binary;\n}\n\n"}
{"task_id": "CPP/85", "generation": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for(int i=1; i<lst.size(); i+=2){\n        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/86", "generation": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string result = \"\";\n    string word = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            sort(word.begin(), word.end());\n            result += word + \" \";\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    sort(word.begin(), word.end());\n    result += word;\n    return result;\n} \n\n"}
{"task_id": "CPP/87", "generation": "/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == x){\n                result.push_back({i, j});\n            }\n        }\n    }\n    \n    // Sort by rows in ascending order\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b){\n        return a[0] < b[0];\n    });\n    \n    // Sort by columns in descending order\n    for(int i=0; i<result.size(); i++){\n        sort(result[i].begin(), result[i].end(), greater<int>());\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/88", "generation": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    if(array.empty()){\n        return array;\n    }\n    \n    int sum = array[0] + array[array.size()-1];\n    \n    if(sum % 2 == 0){\n        sort(array.begin(), array.end(), greater<int>());\n    } else {\n        sort(array.begin(), array.end());\n    }\n    \n    return array;\n}"}
{"task_id": "CPP/89", "generation": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(isalpha(s[i])){\n            char encryptedChar = s[i] + 2 * 2;\n            if(islower(s[i])){\n                if(encryptedChar > 'z'){\n                    encryptedChar = 'a' + (encryptedChar - 'z') - 1;\n                }\n            } else {\n                if(encryptedChar > 'Z'){\n                    encryptedChar = 'A' + (encryptedChar - 'Z') - 1;\n                }\n            }\n            result += encryptedChar;\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/90", "generation": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    if(lst.size() < 2){\n        return -1;\n    }\n    \n    sort(lst.begin(), lst.end());\n    \n    int smallest = lst[0];\n    \n    for(int i=1; i<lst.size(); i++){\n        if(lst[i] > smallest){\n            return lst[i];\n        }\n    }\n    \n    return -1;\n}"}
{"task_id": "CPP/91", "generation": "/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int count = 0;\n    int i = 0;\n    while(i < S.length()){\n        if(S[i] == 'I' && (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!')){\n            count++;\n        }\n        i++;\n    }\n    return count;\n}"}
{"task_id": "CPP/92", "generation": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e true\n\nany_int(3, 2, 2) \u279e false\n\nany_int(3, -2, 1) \u279e true\n\nany_int(3.6, -2.2, 2) \u279e false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    if(floor(a) == a && floor(b) == b && floor(c) == c){\n        if(a == b + c || b == a + c || c == a + b){\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\n"}
{"task_id": "CPP/93", "generation": "/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    for(int i=0; i<message.length(); i++){\n        if(isalpha(message[i])){\n            if(isupper(message[i])){\n                message[i] = tolower(message[i]);\n            }else{\n                message[i] = toupper(message[i]);\n            }\n            if(message[i]=='a' || message[i]=='e' || message[i]=='i' || message[i]=='o' || message[i]=='u'){\n                message[i] = message[i]+2;\n            }\n        }\n    }\n    return message;\n}"}
{"task_id": "CPP/94", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nbool isPrime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint skjkasdkd(vector<int> lst){\n    int maxPrime = 0;\n    for (int num : lst) {\n        if (isPrime(num) && num > maxPrime) {\n            maxPrime = num;\n        }\n    }\n    int sum = 0;\n    string primeStr = to_string(maxPrime);\n    for (char c : primeStr) {\n        sum += c - '0';\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "/*\nGiven a map, return true if all keys are strings and all keys are in lower case or  in upper case, else return false.\nThe function should return false is the given map is empty.\nExamples:\ncheck_dict_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_dict_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_dict_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    if(dict.empty()){\n        return false;\n    }\n    \n    for(auto const& pair : dict){\n        string key = pair.first;\n        for(char c : key){\n            if(!islower(c) && !isupper(c)){\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}"}
{"task_id": "CPP/96", "generation": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> primes;\n    if(n <= 1){\n        return primes;\n    }\n    \n    for(int i=2; i<n; i++){\n        bool isPrime = true;\n        for(int j=2; j*j<=i; j++){\n            if(i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    \n    return primes;\n}"}
{"task_id": "CPP/97", "generation": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int unitA = abs(a) % 10;\n    int unitB = abs(b) % 10;\n    return unitA * unitB;\n}"}
{"task_id": "CPP/98", "generation": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for(int i=0; i<s.length(); i+=2){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/99", "generation": "/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    float num = stof(value);\n    int floor_num = floor(num);\n    int ceil_num = ceil(num);\n    \n    if (num - floor_num < ceil_num - num) {\n        return floor_num;\n    } else {\n        return ceil_num;\n    }\n}"}
{"task_id": "CPP/100", "generation": "/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> result;\n    result.push_back(n);\n    for(int i=1; i<n; i++){\n        if(n%2 == 0){\n            result.push_back(n + 2*i);\n        } else {\n            result.push_back(n + 2*i + 1);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/101", "generation": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n    for(char c : s){\n        if(c == ' ' || c == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}"}
{"task_id": "CPP/102", "generation": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    int max_even = -1;\n    for(int i = y; i >= x; i--){\n        if(i % 2 == 0){\n            max_even = i;\n            break;\n        }\n    }\n    return max_even;\n}\n\n"}
{"task_id": "CPP/103", "generation": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n    if(n > m){\n        return \"-1\";\n    }\n    int sum = 0;\n    for(int i = n; i <= m; i++){\n        sum += i;\n    }\n    int avg = round((double)sum / (m - n + 1));\n    string binary = \"\";\n    while(avg > 0){\n        binary = to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n    return binary;\n}"}
{"task_id": "CPP/104", "generation": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for(int num : x){\n        bool hasEvenDigit = false;\n        int temp = num;\n        while(temp > 0){\n            int digit = temp % 10;\n            if(digit % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if(!hasEvenDigit){\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}"}
{"task_id": "CPP/105", "generation": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    vector<int> sorted_arr;\n    vector<string> result;\n    map<int, string> num_to_name = {\n        {1, \"One\"},\n        {2, \"Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"Nine\"}\n    };\n\n    for(int num : arr){\n        if(num >= 1 && num <= 9){\n            sorted_arr.push_back(num);\n        }\n    }\n\n    sort(sorted_arr.begin(), sorted_arr.end());\n\n    reverse(sorted_arr.begin(), sorted_arr.end());\n\n    for(int num : sorted_arr){\n        result.push_back(num_to_name[num]);\n    }\n\n    return result;\n}"}
{"task_id": "CPP/106", "generation": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> result;\n    int factorial = 1;\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        if(i%2 == 0){\n            factorial *= i;\n            result.push_back(factorial);\n        } else {\n            sum += i;\n            result.push_back(sum);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/107", "generation": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> result = {0, 0};\n    for(int i=1; i<=n; i++){\n        string num = to_string(i);\n        string rev_num = num;\n        reverse(rev_num.begin(), rev_num.end());\n        if(num == rev_num){\n            if(i % 2 == 0){\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/108", "generation": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for(int num : n){\n        int sum = 0;\n        int temp = abs(num);\n        while(temp != 0){\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if(num < 0){\n            sum *= -1;\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "CPP/109", "generation": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if(arr.empty()){\n        return true;\n    }\n    \n    int n = arr.size();\n    int minIndex = 0;\n    \n    // Find the index of the minimum element in the vector\n    for(int i=1; i<n; i++){\n        if(arr[i] < arr[minIndex]){\n            minIndex = i;\n        }\n    }\n    \n    // Check if the vector is already sorted in non-decreasing order\n    bool sorted = true;\n    for(int i=0; i<n-1; i++){\n        if(arr[i] > arr[i+1]){\n            sorted = false;\n            break;\n        }\n    }\n    \n    // If the minimum element is at the beginning of the vector, return true\n    if(minIndex == 0){\n        return true;\n    }\n    \n    // If the vector is already sorted, return true\n    if(sorted){\n        return true;\n    }\n    \n    return false;\n}"}
{"task_id": "CPP/110", "generation": "/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int oddCount = 0;\n    for(int num : lst1){\n        if(num % 2 != 0){\n            oddCount++;\n        }\n    }\n    for(int num : lst2){\n        if(num % 2 != 0){\n            oddCount++;\n        }\n    }\n    if(oddCount % 2 == 0){\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}"}
{"task_id": "CPP/111", "generation": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char, int> result;\n    map<char, int> count;\n    \n    // Count the occurrences of each letter\n    for(char c : test){\n        if(c != ' '){\n            count[c]++;\n        }\n    }\n    \n    // Find the maximum occurrence\n    int max_occurrence = 0;\n    for(auto it : count){\n        max_occurrence = max(max_occurrence, it.second);\n    }\n    \n    // Add letters with maximum occurrence to the result map\n    for(auto it : count){\n        if(it.second == max_occurrence){\n            result[it.first] = it.second;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/112", "generation": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    // Delete characters in s that are equal to any character in c\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(c.find(s[i]) == string::npos){\n            result += s[i];\n        }\n    }\n    \n    // Check if the result string is palindrome\n    string reverse_result = result;\n    reverse(reverse_result.begin(), reverse_result.end());\n    \n    string is_palindrome = (result == reverse_result) ? \"True\" : \"False\";\n    \n    return {result, is_palindrome};\n}"}
{"task_id": "CPP/113", "generation": "/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    vector<string> result;\n    for(string s : lst){\n        int count = 0;\n        for(char c : s){\n            if((c - '0') % 2 != 0){\n                count++;\n            }\n        }\n        string res = \"the number of odd elements \" + to_string(count) + \"n the str\" + to_string(count) + \"ng \" + s + \" of the \" + to_string(count) + \"nput.\";\n        result.push_back(res);\n    }\n    return result;\n}"}
{"task_id": "CPP/114", "generation": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    long long currentSum = nums[0];\n    \n    for(int i=1; i<nums.size(); i++){\n        currentSum = min(nums[i], currentSum + nums[i]);\n        minSum = min(minSum, currentSum);\n    }\n    \n    return minSum;\n}\n\n"}
{"task_id": "CPP/115", "generation": "/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity. Can't use buckets from other wells to extract water from one well.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int rows = grid.size();\n    int cols = grid[0].size();\n    int total_water = 0;\n    int buckets = 0;\n    \n    for(int i=0; i<rows; i++){\n        for(int j=0; j<cols; j++){\n            total_water += grid[i][j];\n        }\n    }\n    \n    while(total_water > 0){\n        total_water -= capacity;\n        buckets++;\n    }\n    \n    return buckets;\n}"}
{"task_id": "CPP/116", "generation": "/*\nIn this Kata, you have to sort a vector of integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array({1, 5, 2, 3, 4}) == {1, 2, 4, 3, 5}\n>>> sort_array({-2, -3, -4, -5, -6}) == {-4, -2, -6, -5, -3}\n>>> sort_array({1, 0, 2, 3, 4}) == {0, 1, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    // Custom comparator function to sort based on number of ones in binary representation\n    auto cmp = [](int a, int b) {\n        int countA = __builtin_popcount(a);\n        int countB = __builtin_popcount(b);\n        if (countA == countB) {\n            return a < b;\n        }\n        return countA < countB;\n    };\n    \n    // Sort the vector using the custom comparator\n    sort(arr.begin(), arr.end(), cmp);\n    \n    return arr;\n}"}
{"task_id": "CPP/117", "generation": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    vector<string> result;\n    string word = \"\";\n    int consonant_count = 0;\n    \n    for(int i=0; i<s.length(); i++){\n        if(s[i] != ' '){\n            word += s[i];\n            if(tolower(s[i]) != 'a' && tolower(s[i]) != 'e' && tolower(s[i]) != 'i' && tolower(s[i]) != 'o' && tolower(s[i]) != 'u'){\n                consonant_count++;\n            }\n        } else {\n            if(consonant_count == n){\n                result.push_back(word);\n            }\n            word = \"\";\n            consonant_count = 0;\n        }\n    }\n    \n    if(consonant_count == n){\n        result.push_back(word);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/118", "generation": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n    for(int i=n-2; i>0; i--){\n        if(word[i] != ' ' && vowels.find(word[i]) != string::npos){\n            for(int j=i-1; j>0; j--){\n                if(word[j] != ' ' && vowels.find(word[j]) == string::npos){\n                    for(int k=i+1; k<n-1; k++){\n                        if(word[k] != ' ' && vowels.find(word[k]) == string::npos){\n                            return string(1, word[i]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return \"\";\n}"}
{"task_id": "CPP/119", "generation": "/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    int openCount = 0;\n    int closeCount = 0;\n    for (string s : lst) {\n        for (char c : s) {\n            if (c == '(') {\n                openCount++;\n            } else {\n                if (openCount > 0) {\n                    openCount--;\n                } else {\n                    closeCount++;\n                }\n            }\n        }\n    }\n    return (openCount == closeCount) ? \"Yes\" : \"No\";\n}"}
{"task_id": "CPP/120", "generation": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr, in ascending order.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    // Sort the vector in ascending order\n    sort(arr.begin(), arr.end());\n    \n    // Create a new vector to store the maximum k numbers\n    vector<int> result;\n    \n    // Iterate from the end of the sorted vector and add the last k elements to the result vector\n    for(int i=arr.size()-1; i>=arr.size()-k; i--){\n        result.push_back(arr[i]);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/121", "generation": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%2 == 0 && lst[i]%2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/122", "generation": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum = 0;\n    for(int i=0; i<k && i<arr.size(); i++){\n        if(arr[i] >= 10 && arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n} \n\n"}
{"task_id": "CPP/123", "generation": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> result;\n    result.push_back(1); // Collatz(1) is {1}\n    \n    while(n != 1){\n        if(n % 2 == 1){ // if n is odd\n            result.push_back(n);\n        }\n        n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n}"}
{"task_id": "CPP/124", "generation": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    if(date.empty()){\n        return false;\n    }\n    \n    int month, day, year;\n    sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year);\n    \n    if(month < 1 || month > 12){\n        return false;\n    }\n    \n    if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)){\n        return false;\n    }\n    \n    if((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)){\n        return false;\n    }\n    \n    if(month == 2){\n        if((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)){\n            if(day < 1 || day > 29){\n                return false;\n            }\n        } else {\n            if(day < 1 || day > 28){\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}"}
{"task_id": "CPP/125", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nint countLowercaseOdd(string txt);\n\nvector<string> split_words(string txt){\n    vector<string> words;\n    string word = \"\";\n    bool hasWhitespace = false;\n    bool hasComma = false;\n    \n    for(char c : txt){\n        if(c == ' '){\n            hasWhitespace = true;\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        } else if(c == ','){\n            hasComma = true;\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    \n    if(word != \"\"){\n        words.push_back(word);\n    }\n    \n    if(words.empty()){\n        if(hasWhitespace){\n            words.push_back(to_string(countLowercaseOdd(txt)));\n        } else if(hasComma){\n            words.push_back(to_string(countLowercaseOdd(txt)));\n        } else {\n            words.push_back(to_string(countLowercaseOdd(txt)));\n        }\n    }\n    \n    return words;\n}\n\nint countLowercaseOdd(string txt){\n    int count = 0;\n    for(char c : txt){\n        if(islower(c) && (c - 'a') % 2 != 0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/126", "generation": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If the a number appears more than twice, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) \u279e true\nis_sorted({1, 2, 3, 4, 5}) \u279e true\nis_sorted({1, 3, 2, 4, 5}) \u279e false\nis_sorted({1, 2, 3, 4, 5, 6}) \u279e true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) \u279e true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) \u279e false\nis_sorted({1, 2, 2, 3, 3, 4}) \u279e true\nis_sorted({1, 2, 2, 2, 3, 4}) \u279e false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    for(int i=0; i<lst.size()-1; i++){\n        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n    for(int i=0; i<lst.size()-2; i++){\n        if(lst[i] == lst[i+1] && lst[i] == lst[i+2]){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/127", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nbool isPrime(int n);\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start1 = interval1[0];\n    int end1 = interval1[1];\n    int start2 = interval2[0];\n    int end2 = interval2[1];\n    \n    int intersectionStart = max(start1, start2);\n    int intersectionEnd = min(end1, end2);\n    \n    if (intersectionStart > intersectionEnd) {\n        return \"NO\";\n    }\n    \n    int length = intersectionEnd - intersectionStart;\n    \n    if (isPrime(length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/128", "generation": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if(arr.empty()){\n        return -32768;\n    }\n    \n    int product = 1;\n    int sum = 0;\n    \n    for(int num : arr){\n        if(num > 0){\n            product *= 1;\n        } else if(num < 0){\n            product *= -1;\n        } else {\n            product *= 0;\n        }\n        \n        sum += abs(num);\n    }\n    \n    return product * sum;\n}"}
{"task_id": "CPP/129", "generation": "/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int n = grid.size();\n    vector<int> path;\n    \n    // Find the starting cell with the minimum value\n    int minVal = n * n + 1;\n    int startRow, startCol;\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n; j++){\n            if(grid[i][j] < minVal){\n                minVal = grid[i][j];\n                startRow = i;\n                startCol = j;\n            }\n        }\n    }\n    \n    // Add the starting cell value to the path\n    path.push_back(minVal);\n    \n    // Move k-1 steps to find the minimum path\n    int currRow = startRow, currCol = startCol;\n    for(int step=1; step<k; step++){\n        int minNeighbor = n * n + 1;\n        int nextRow, nextCol;\n        // Find the neighbor cell with the minimum value\n        for(int i=-1; i<=1; i++){\n            for(int j=-1; j<=1; j++){\n                if(i == 0 && j == 0) continue;\n                int newRow = currRow + i;\n                int newCol = currCol + j;\n                if(newRow >= 0 && newRow < n && newCol >= 0 && newCol < n){\n                    if(grid[newRow][newCol] < minNeighbor){\n                        minNeighbor = grid[newRow][newCol];\n                        nextRow = newRow;\n                        nextCol = newCol;\n                    }\n                }\n            }\n        }\n        // Move to the neighbor cell with the minimum value\n        path.push_back(minNeighbor);\n        currRow = nextRow;\n        currCol = nextCol;\n    }\n    \n    return path;\n}"}
{"task_id": "CPP/130", "generation": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> result;\n    if(n == 0){\n        return result;\n    }\n    result.push_back(3);\n    if(n == 1){\n        return result;\n    }\n    result.push_back(1);\n    if(n == 2){\n        return result;\n    }\n    result.push_back(2);\n    for(int i = 3; i <= n; i++){\n        if(i % 2 == 0){\n            result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i-1] + result[i-2] + result[i-3]);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/131", "generation": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int product = 1;\n    while(n > 0){\n        int digit = n % 10;\n        if(digit % 2 != 0){\n            product *= digit;\n        }\n        n /= 10;\n    }\n    if(product == 1){\n        return 0;\n    }\n    return product;\n}\n\n"}
{"task_id": "CPP/132", "generation": "/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") \u279e true\nis_nested(\"[]]]]]]][[[[[]\") \u279e false\nis_nested(\"[][]\") \u279e false\nis_nested(\"[]\") \u279e false\nis_nested(\"[[][]]\") \u279e true\nis_nested(\"[[]][[\") \u279e true\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n    int count = 0;\n    for(int i=0; i<str.length(); i++){\n        if(str[i] == '['){\n            count++;\n        }\n        else if(str[i] == ']' && count > 0){\n            count--;\n        }\n    }\n    return count > 0;\n}\n\n"}
{"task_id": "CPP/133", "generation": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n    return sum;\n}"}
{"task_id": "CPP/134", "generation": "/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e false\ncheck_if_last_char_is_a_letter(\"apple pi e\") \u279e true\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e false\ncheck_if_last_char_is_a_letter(\"\") \u279e false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if(txt.empty()){\n        return false;\n    }\n    \n    char lastChar = txt.back();\n    \n    if(isalpha(lastChar)){\n        int i = txt.size()-2;\n        while(i >= 0 && txt[i] != ' '){\n            i--;\n        }\n        \n        if(i < 0){\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\n"}
{"task_id": "CPP/135", "generation": "/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int index = -1;\n    for(int i=1; i<arr.size(); i++){\n        if(arr[i] < arr[i-1]){\n            index = i-1;\n        }\n    }\n    return index;\n}"}
{"task_id": "CPP/136", "generation": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    vector<int> result = {0, 0};\n    int largest_negative = INT_MIN;\n    int smallest_positive = INT_MAX;\n    \n    for(int num : lst){\n        if(num < 0 && num > largest_negative){\n            largest_negative = num;\n        }\n        if(num > 0 && num < smallest_positive){\n            smallest_positive = num;\n        }\n    }\n    \n    if(largest_negative != INT_MIN){\n        result[0] = largest_negative;\n    }\n    if(smallest_positive != INT_MAX){\n        result[1] = smallest_positive;\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/137", "generation": "/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e \"None\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n    if(a.type() == typeid(int) && b.type() == typeid(int)){\n        int num1 = boost::any_cast<int>(a);\n        int num2 = boost::any_cast<int>(b);\n        if(num1 > num2){\n            return num1;\n        } else if(num2 > num1){\n            return num2;\n        } else {\n            return \"None\";\n        }\n    } else if(a.type() == typeid(float) && b.type() == typeid(float)){\n        float num1 = boost::any_cast<float>(a);\n        float num2 = boost::any_cast<float>(b);\n        if(num1 > num2){\n            return num1;\n        } else if(num2 > num1){\n            return num2;\n        } else {\n            return \"None\";\n        }\n    } else if(a.type() == typeid(string) && b.type() == typeid(string)){\n        string str1 = boost::any_cast<string>(a);\n        string str2 = boost::any_cast<string>(b);\n        if(str1.find(\".\") != string::npos){\n            replace(str1.begin(), str1.end(), ',', '.');\n        }\n        if(str2.find(\".\") != string::npos){\n            replace(str2.begin(), str2.end(), ',', '.');\n        }\n        if(stof(str1) > stof(str2)){\n            return str1;\n        } else if(stof(str2) > stof(str1)){\n            return str2;\n        } else {\n            return \"None\";\n        }\n    } else {\n        return \"Invalid input types\";\n    }\n}\n\n"}
{"task_id": "CPP/138", "generation": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if(n % 2 != 0 || n < 8){\n        return false;\n    }\n    return true;\n}"}
{"task_id": "CPP/139", "generation": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long result = 1;\n    for(int i = n; i > 0; i--){\n        long long factorial = 1;\n        for(int j = i; j > 0; j--){\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/140", "generation": "/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string result = \"\";\n    int consecutive_spaces = 0;\n    \n    for(int i=0; i<text.length(); i++){\n        if(text[i] == ' '){\n            consecutive_spaces++;\n            if(consecutive_spaces > 2){\n                result += \"-\";\n            } else {\n                result += \"_\";\n            }\n        } else {\n            result += text[i];\n            consecutive_spaces = 0;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/141", "generation": "/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    int digits = 0;\n    int dot = 0;\n    int dot_index = -1;\n    \n    // Check conditions\n    for(int i=0; i<file_name.length(); i++){\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            digits++;\n        }\n        else if(file_name[i] == '.'){\n            dot++;\n            dot_index = i;\n        }\n    }\n    \n    if(digits > 3 || dot != 1 || dot_index == 0 || dot_index == file_name.length()-1){\n        return \"No\";\n    }\n    \n    string extension = file_name.substr(dot_index+1);\n    if(extension != \"txt\" && extension != \"exe\" && extension != \"dll\"){\n        return \"No\";\n    }\n    \n    return \"Yes\";\n}\n\n"}
{"task_id": "CPP/142", "generation": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%3 == 0){\n            lst[i] = lst[i]*lst[i]; // square the integer entry\n        }\n        else if(i%4 == 0){\n            lst[i] = lst[i]*lst[i]*lst[i]; // cube the integer entry\n        }\n        sum += lst[i];\n    }\n    return sum;\n}"}
{"task_id": "CPP/143", "generation": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    string result = \"\";\n    string word = \"\";\n    int length = sentence.length();\n    \n    for(int i=0; i<length; i++){\n        if(sentence[i] != ' '){\n            word += sentence[i];\n        } else {\n            int word_length = word.length();\n            bool is_prime = true;\n            if(word_length <= 1){\n                is_prime = false;\n            } else {\n                for(int j=2; j*j <= word_length; j++){\n                    if(word_length % j == 0){\n                        is_prime = false;\n                        break;\n                    }\n                }\n            }\n            if(is_prime){\n                result += word + \" \";\n            }\n            word = \"\";\n        }\n    }\n    \n    int last_word_length = word.length();\n    bool is_prime = true;\n    if(last_word_length <= 1){\n        is_prime = false;\n    } else {\n        for(int j=2; j*j <= last_word_length; j++){\n            if(last_word_length % j == 0){\n                is_prime = false;\n                break;\n            }\n        }\n    }\n    if(is_prime){\n        result += word;\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/144", "generation": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n    // Extracting numerator and denominator from x and n\n    int x_num = stoi(x.substr(0, x.find('/')));\n    int x_den = stoi(x.substr(x.find('/') + 1));\n    int n_num = stoi(n.substr(0, n.find('/')));\n    int n_den = stoi(n.substr(n.find('/') + 1));\n    \n    // Calculating the result of x * n\n    double result = (double)x_num / x_den * n_num / n_den;\n    \n    // Checking if the result is a whole number\n    if(result == (int)result){\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "CPP/145", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\n// Function to calculate the sum of digits of a number\nint sum_of_digits(int num) {\n    int sum = 0;\n    while (num != 0) {\n        sum += abs(num % 10);\n        num /= 10;\n    }\n    return sum;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    // Custom comparator function for sorting based on sum of digits\n    auto cmp = [&](int a, int b) {\n        int sum_a = sum_of_digits(a);\n        int sum_b = sum_of_digits(b);\n        if (sum_a == sum_b) {\n            return find(nums.begin(), nums.end(), a) < find(nums.begin(), nums.end(), b);\n        }\n        return sum_a < sum_b;\n    };\n\n    // Sorting the vector using the custom comparator\n    sort(nums.begin(), nums.end(), cmp);\n\n    return nums;\n}\n\n"}
{"task_id": "CPP/146", "generation": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for(int num : nums){\n        string numStr = to_string(num);\n        int firstDigit = numStr[0] - '0';\n        int lastDigit = numStr[numStr.length()-1] - '0';\n        if(num > 10 && (firstDigit % 2 != 0) && (lastDigit % 2 != 0)){\n            count++;\n        }\n    }\n    return count;\n} \n\n"}
{"task_id": "CPP/147", "generation": "/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_max_triples(int n){\n    vector<int> a(n);\n    int count = 0;\n    for(int i=0; i<n; i++){\n        a[i] = i*i - i + 1;\n    }\n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/148", "generation": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    \n    int index1 = -1;\n    int index2 = -1;\n    \n    for(int i=0; i<planets.size(); i++){\n        if(planets[i] == planet1){\n            index1 = i;\n        }\n        if(planets[i] == planet2){\n            index2 = i;\n        }\n    }\n    \n    if(index1 == -1 || index2 == -1){\n        return result;\n    }\n    \n    int start = min(index1, index2);\n    int end = max(index1, index2);\n    \n    for(int i=start+1; i<end; i++){\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/149", "generation": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> result;\n    for(string s : lst){\n        if(s.length() % 2 == 0){\n            result.push_back(s);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string &a, const string &b){\n        if(a.length() == b.length()){\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return result;\n}"}
{"task_id": "CPP/150", "generation": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    if(n<=1){\n        return y;\n    }\n    for(int i=2;i<n;i++){\n        if(n%i==0){\n            return y;\n        }\n    }\n    return x;\n}\n\n"}
{"task_id": "CPP/151", "generation": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && (int)lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/152", "generation": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for(int i=0; i<game.size(); i++){\n        if(game[i] == guess[i]){\n            result.push_back(0);\n        }else{\n            result.push_back(abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/153", "generation": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    int max_strength = INT_MIN;\n    string strongest_extension = \"\";\n    \n    for(string extension : extensions){\n        int CAP = 0, SM = 0;\n        for(char c : extension){\n            if(isupper(c)){\n                CAP++;\n            } else if(islower(c)){\n                SM++;\n            }\n        }\n        int strength = CAP - SM;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n}"}
{"task_id": "CPP/154", "generation": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a,string b){\n    if(a.length() != b.length()){\n        return false;\n    }\n    \n    string temp = b + b;\n    \n    if(temp.find(a) != string::npos){\n        return true;\n    }\n    \n    return false;\n}\n\n"}
{"task_id": "CPP/155", "generation": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> result = {0, 0};\n    string str_num = to_string(abs(num));\n    \n    for(char c : str_num){\n        if((c - '0') % 2 == 0){\n            result[0]++;\n        } else {\n            result[1]++;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/156", "generation": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_roman(int number){\n    // Define the symbols and their corresponding values in a vector\n    vector<string> symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\n    string roman = \"\";\n    int i = 0;\n\n    // Iterate through the symbols and values vector\n    while (number > 0) {\n        // Check if the current value is less than the number\n        if (number >= values[i]) {\n            // Append the corresponding symbol to the roman string\n            roman += symbols[i];\n            // Subtract the value from the number\n            number -= values[i];\n        } else {\n            // Move to the next symbol and value\n            i++;\n        }\n    }\n\n    return roman;\n}"}
{"task_id": "CPP/157", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n    // Sort the sides in ascending order\n    if(a > c){\n        float temp = a;\n        a = c;\n        c = temp;\n    }\n    if(b > c){\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    \n    // Check if it is a right-angled triangle using Pythagoras theorem\n    if(pow(c,2) == pow(a,2) + pow(b,2)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n"}
{"task_id": "CPP/158", "generation": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    string maxWord = \"\";\n    int maxUniqueChars = 0;\n    \n    for(string word : words){\n        int uniqueChars = 0;\n        vector<char> chars;\n        \n        for(char c : word){\n            if(find(chars.begin(), chars.end(), c) == chars.end()){\n                chars.push_back(c);\n                uniqueChars++;\n            }\n        }\n        \n        if(uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word < maxWord)){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        }\n    }\n    \n    return maxWord;\n}"}
{"task_id": "CPP/159", "generation": "/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n    int totalCarrots = number + need;\n    int eatenCarrots = totalCarrots;\n    \n    if (totalCarrots > remaining) {\n        eatenCarrots = remaining;\n    }\n    \n    int carrotsLeft = remaining - eatenCarrots;\n    \n    return {eatenCarrots, carrotsLeft};\n}"}
{"task_id": "CPP/160", "generation": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    if(operato.size() != operand.size()-1){\n        return -1; //error: operator vector length is not equal to operand vector length minus one\n    }\n    \n    int result = operand[0]; //initialize result with the first operand\n    \n    for(int i=0; i<operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"//\"){\n            if(operand[i+1] != 0){\n                result /= operand[i+1];\n            }\n            else{\n                return -1; //error: division by zero\n            }\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n        else{\n            return -1; //error: invalid operator\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/161", "generation": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    string result = \"\";\n    bool hasLetter = false;\n    \n    for(char c : s){\n        if(isalpha(c)){\n            hasLetter = true;\n            if(islower(c)){\n                result += toupper(c);\n            } else {\n                result += tolower(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n    \n    if(!hasLetter){\n        reverse(result.begin(), result.end());\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/162", "generation": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    if(text.empty()){\n        return \"None\";\n    }\n    \n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n    \n    char mdString[33];\n    for(int i = 0; i < 16; i++){\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    }\n    \n    return string(mdString);\n}"}
{"task_id": "CPP/163", "generation": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    vector<int> result;\n    if(a > b){\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    for(int i=a; i<=b; i++){\n        if(i%2 == 0 && i < 10){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/0", "generation": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/1", "generation": "/*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> result;\n    int count = 0;\n    string group = \"\";\n    for(int i=0; i<paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            count++;\n        }\n        group += paren_string[i];\n        if(paren_string[i] == ')'){\n            count--;\n        }\n        if(count == 0){\n            result.push_back(group);\n            group = \"\";\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/2", "generation": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\n"}
{"task_id": "CPP/3", "generation": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/4", "generation": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    // Calculate the mean of the input numbers\n    float sum = 0;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    \n    // Calculate the mean absolute deviation\n    float mad = 0;\n    for(int i=0; i<numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n    \n    return mad;\n}\n\n"}
{"task_id": "CPP/5", "generation": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i != numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/6", "generation": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> result;\n    int max_depth = 0;\n    int current_depth = 0;\n    \n    for(int i=0; i<paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            current_depth++;\n            max_depth = max(max_depth, current_depth);\n        }\n        else if(paren_string[i] == ')'){\n            current_depth--;\n        }\n        else if(paren_string[i] == ' '){\n            result.push_back(max_depth);\n            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n    \n    result.push_back(max_depth);\n    \n    return result;\n}"}
{"task_id": "CPP/7", "generation": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filtered_strings;\n    for(string s : strings){\n        if(s.find(substring) != string::npos){\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;\n}"}
{"task_id": "CPP/8", "generation": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    \n    for(int num : numbers){\n        sum += num;\n        product *= num;\n    }\n    \n    return {sum, product};\n}"}
{"task_id": "CPP/9", "generation": "/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> result;\n    int max = numbers[0];\n    result.push_back(max);\n    \n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/10", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    string palindrome = str;\n    int n = str.length();\n    for(int i=n-1;i>=0;i--){\n        if(is_palindrome(str.substr(i))){\n            palindrome += str.substr(0,i);\n            break;\n        }\n    }\n    return palindrome;\n}\n\n"}
{"task_id": "CPP/11", "generation": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result = \"\";\n    for(int i=0; i<a.length(); i++){\n        if(a[i] != b[i]){\n            result += \"1\";\n        }else{\n            result += \"0\";\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if(strings.empty()){\n        return \"None\";\n    }\n    \n    string longestString = strings[0];\n    for(int i=1; i<strings.size(); i++){\n        if(strings[i].length() > longestString.length()){\n            longestString = strings[i];\n        }\n    }\n    \n    return longestString;\n}"}
{"task_id": "CPP/13", "generation": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    while (a != b) {\n        if (a > b) {\n            a = a - b;\n        } else {\n            b = b - a;\n        }\n    }\n    return a;\n}\n\n"}
{"task_id": "CPP/14", "generation": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> result;\n    string prefix = \"\";\n    for(int i=0; i<str.length(); i++){\n        prefix += str[i];\n        result.push_back(prefix);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/15", "generation": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string result = \"\";\n    for(int i=0; i<=n; i++){\n        result += to_string(i) + \" \";\n    }\n    result.pop_back(); // remove the extra space at the end\n    return result;\n}"}
{"task_id": "CPP/16", "generation": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n    // Convert the string to lowercase\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Initialize a vector to store distinct characters\n    vector<char> distinct_chars;\n    \n    // Iterate through the string and add distinct characters to the vector\n    for(char c : str){\n        if(find(distinct_chars.begin(), distinct_chars.end(), c) == distinct_chars.end()){\n            distinct_chars.push_back(c);\n        }\n    }\n    \n    // Return the number of distinct characters\n    return distinct_chars.size();\n} \n\n"}
{"task_id": "CPP/17", "generation": "/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n    vector<int> beats;\n    string note = \"\";\n    for(int i=0; i<music_string.length(); i++){\n        if(music_string[i] == 'o'){\n            note += 'o';\n        } else if(music_string[i] == '|'){\n            if(note == \"o\"){\n                beats.push_back(4);\n            } else if(note == \"o|\"){\n                beats.push_back(2);\n            } else if(note == \".|\"){\n                beats.push_back(1);\n            }\n            note = \"\";\n        } else if(music_string[i] == '.'){\n            note += '.';\n        }\n    }\n    if(note == \"o\"){\n        beats.push_back(4);\n    } else if(note == \"o|\"){\n        beats.push_back(2);\n    } else if(note == \".|\"){\n        beats.push_back(1);\n    }\n    return beats;\n}"}
{"task_id": "CPP/18", "generation": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int count = 0;\n    if(substring.length() == 0){\n        return 0;\n    }\n    for(int i=0; i<=str.length()-substring.length(); i++){\n        if(str.substr(i, substring.length()) == substring){\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "CPP/19", "generation": "/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    // Create a map to store the mapping of number words to their corresponding numerical values\n    map<string, int> numberMap = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    \n    // Split the input string into individual number words\n    string number;\n    string result = \"\";\n    for(int i=0; i<numbers.size(); i++){\n        if(numbers[i] != ' '){\n            number += numbers[i];\n        } else {\n            // Convert the number word to its numerical value and append it to the result string\n            result += to_string(numberMap[number]) + \" \";\n            number = \"\";\n        }\n    }\n    \n    // Append the last number word to the result string\n    result += to_string(numberMap[number]);\n    \n    // Sort the numerical values in the result string\n    string sortedResult = \"\";\n    for(int i=0; i<=9; i++){\n        for(int j=0; j<result.size(); j++){\n            if(result[j] == i + '0'){\n                sortedResult += to_string(i) + \" \";\n            }\n        }\n    }\n    \n    // Remove the extra space at the end of the sorted result string\n    sortedResult.pop_back();\n    \n    return sortedResult;\n}"}
{"task_id": "CPP/20", "generation": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> result;\n    float min_diff = INFINITY;\n    for(int i=0; i<numbers.size()-1; i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result.clear();\n                result.push_back(min(numbers[i], numbers[j]));\n                result.push_back(max(numbers[i], numbers[j]));\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/21", "generation": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n    // Find the minimum and maximum numbers in the vector\n    float min_num = numbers[0];\n    float max_num = numbers[0];\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] < min_num){\n            min_num = numbers[i];\n        }\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n    }\n    \n    // Apply linear transform to rescale the numbers\n    vector<float> rescaled_numbers;\n    for(int i=0; i<numbers.size(); i++){\n        float rescaled_num = (numbers[i] - min_num) / (max_num - min_num);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n    \n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/22", "generation": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for(auto val : values){\n        if(val.type() == typeid(int)){\n            result.push_back(boost::any_cast<int>(val));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/23", "generation": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    return str.length();\n}\n\n"}
{"task_id": "CPP/24", "generation": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int largest = 1;\n    for(int i=2; i<n; i++){\n        if(n%i == 0){\n            largest = i;\n        }\n    }\n    return largest;\n}\n\n"}
{"task_id": "CPP/25", "generation": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> factors;\n    for(int i=2; i*i<=n; i++){\n        while(n%i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if(n > 1){\n        factors.push_back(n);\n    }\n    return factors;\n}"}
{"task_id": "CPP/26", "generation": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        if(count(numbers.begin(), numbers.end(), numbers[i]) == 1){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/27", "generation": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    for(int i=0; i<str.length(); i++){\n        if(islower(str[i])){\n            str[i] = toupper(str[i]);\n        }\n        else if(isupper(str[i])){\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;\n}"}
{"task_id": "CPP/28", "generation": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for(string s : strings){\n        result += s;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/29", "generation": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> filtered_strings;\n    for(string str : strings){\n        if(str.substr(0, prefix.length()) == prefix){\n            filtered_strings.push_back(str);\n        }\n    }\n    return filtered_strings;\n}"}
{"task_id": "CPP/30", "generation": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> result;\n    for(int i=0; i<l.size(); i++){\n        if(l[i] > 0){\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/31", "generation": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/32", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only one zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    if(xs.size() % 2 != 0){\n        printf(\"Error: Coefficients list must have even number of elements.\\n\");\n        return 0;\n    }\n    \n    double max_coeff = xs[xs.size()-1];\n    double x = -1;\n    while(poly(xs, x) != 0){\n        x++;\n    }\n    return x;\n}\n\n"}
{"task_id": "CPP/33", "generation": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted in ascending order.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> l_prime = l;\n    for(int i=0; i<l.size(); i++){\n        if((i+1)%3 == 0){\n            sort(l_prime.begin() + i, l_prime.begin() + i + 1);\n        }\n    }\n    return l_prime;\n}"}
{"task_id": "CPP/34", "generation": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Remove duplicates\n    l.erase(unique(l.begin(), l.end()), l.end());\n    \n    return l;\n}\n\n"}
{"task_id": "CPP/35", "generation": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n    float max = l[0];\n    for(int i=1; i<l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n} \n\n"}
{"task_id": "CPP/36", "generation": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count = 0;\n    for(int i=1; i<n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            int num = i;\n            while(num > 0){\n                if(num % 10 == 7){\n                    count++;\n                }\n                num = num / 10;\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/37", "generation": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> l_prime = l;\n    vector<float> even_values;\n    \n    // Extract even values from l\n    for(int i=0; i<l.size(); i+=2){\n        even_values.push_back(l[i]);\n    }\n    \n    // Sort even values\n    sort(even_values.begin(), even_values.end());\n    \n    // Replace even values in l_prime with sorted even values\n    int j = 0;\n    for(int i=0; i<l_prime.size(); i+=2){\n        l_prime[i] = even_values[j];\n        j++;\n    }\n    \n    return l_prime;\n}"}
{"task_id": "CPP/38", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\n    int l=s.length();\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(2)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n"}
{"task_id": "CPP/39", "generation": "#include <iostream>\n\nbool is_prime(int num);\n\nint prime_fib(int n){\n    int first = 1, second = 1, next, count = 2;\n    while(count < n){\n        next = first + second;\n        first = second;\n        second = next;\n        count++;\n        if(is_prime(next)){\n            n++;\n        }\n    }\n    return next;\n}\n\nbool is_prime(int num){\n    if(num <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=num; i++){\n        if(num % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/40", "generation": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    int n = l.size();\n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/41", "generation": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    // Each car moving left to right will collide with each car moving right to left\n    // Therefore, the total number of collisions will be the product of the number of cars moving left to right and the number of cars moving right to left\n    return n * n;\n}\n\n"}
{"task_id": "CPP/42", "generation": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> result;\n    for(int i=0; i<l.size(); i++){\n        result.push_back(l[i]+1);\n    }\n    return result;\n}"}
{"task_id": "CPP/43", "generation": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    for(int i=0; i<l.size(); i++){\n        for(int j=i+1; j<l.size(); j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/44", "generation": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string result = \"\";\n    while(x > 0){\n        int remainder = x % base;\n        result = to_string(remainder) + result;\n        x = x / base;\n    }\n    return result;\n}"}
{"task_id": "CPP/45", "generation": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/46", "generation": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 2;\n    }\n    if(n == 3){\n        return 0;\n    }\n    \n    int a = 0, b = 0, c = 2, d = 0, e = 0;\n    \n    for(int i = 4; i <= n; i++){\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    \n    return e;\n}\n\n"}
{"task_id": "CPP/47", "generation": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n8.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n % 2 == 0){\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return l[n/2];\n    }\n}"}
{"task_id": "CPP/48", "generation": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/49", "generation": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    if (n == 0) {\n        return 1;\n    }\n    int result = 1;\n    for (int i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/50", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/51", "generation": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string result = \"\";\n    for(char c : text){\n        if(tolower(c) != 'a' && tolower(c) != 'e' && tolower(c) != 'i' && tolower(c) != 'o' && tolower(c) != 'u'){\n            result += c;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/52", "generation": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    for(int i=0; i<l.size(); i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "CPP/53", "generation": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x + y;\n}\n\n"}
{"task_id": "CPP/54", "generation": "/*\nCheck if two words have the same kind of characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    \n    return s0 == s1;\n}\n\n"}
{"task_id": "CPP/55", "generation": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}"}
{"task_id": "CPP/56", "generation": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '<'){\n            count++;\n        } else if(bracket == '>'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}"}
{"task_id": "CPP/57", "generation": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    bool increasing = true;\n    bool decreasing = true;\n    \n    for(int i=1; i<l.size(); i++){\n        if(l[i] < l[i-1]){\n            increasing = false;\n        }\n        if(l[i] > l[i-1]){\n            decreasing = false;\n        }\n    }\n    \n    return increasing || decreasing;\n}"}
{"task_id": "CPP/58", "generation": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    \n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            if (result.empty() || result.back() != l1[i]) {\n                result.push_back(l1[i]);\n            }\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/59", "generation": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n\n"}
{"task_id": "CPP/60", "generation": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        sum += i;\n    }\n    return sum;\n}"}
{"task_id": "CPP/61", "generation": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '('){\n            count++;\n        } else if(bracket == ')'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}"}
{"task_id": "CPP/62", "generation": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result;\n    for(int i=1; i<xs.size(); i++){\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}"}
{"task_id": "CPP/63", "generation": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    else if(n == 2){\n        return 1;\n    }\n    int a = 0, b = 0, c = 1, d;\n    for(int i = 3; i <= n; i++){\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\n"}
{"task_id": "CPP/64", "generation": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    transform(s.begin(), s.end(), s.begin(), ::tolower); // convert all characters to lowercase\n    int count = 0;\n    for(char c : s){\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n            count++;\n        }\n    }\n    if(s.back() == 'y'){ // check if the last character is 'y'\n        count++;\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/65", "generation": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string num = to_string(x);\n    int n = num.size();\n    \n    if(shift > n){\n        reverse(num.begin(), num.end());\n        return num;\n    }\n    \n    shift = shift % n;\n    string result = num.substr(n-shift) + num.substr(0, n-shift);\n    \n    return result;\n}"}
{"task_id": "CPP/66", "generation": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(char c : s){\n        if(isupper(c)){\n            sum += c;\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/67", "generation": "/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n    int apples = 0;\n    int oranges = 0;\n    int mango = 0;\n    \n    // Parse the string to extract the number of apples and oranges\n    int pos = s.find(\"apples\");\n    if(pos != string::npos){\n        apples = stoi(s.substr(0, pos));\n    }\n    \n    pos = s.find(\"oranges\");\n    if(pos != string::npos){\n        oranges = stoi(s.substr(0, pos));\n    }\n    \n    // Calculate the number of mango fruits\n    mango = n - apples - oranges;\n    \n    return mango;\n} \n\n"}
{"task_id": "CPP/68", "generation": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> result;\n    int smallestValue = -1;\n    int smallestIndex = -1;\n    \n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] % 2 == 0 && (smallestValue == -1 || arr[i] < smallestValue)){\n            smallestValue = arr[i];\n            smallestIndex = i;\n        }\n    }\n    \n    if(smallestValue != -1){\n        result.push_back(smallestValue);\n        result.push_back(smallestIndex);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/69", "generation": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int maxFreq = -1;\n    for(int i=0; i<lst.size(); i++){\n        int count = 0;\n        for(int j=0; j<lst.size(); j++){\n            if(lst[j] == lst[i]){\n                count++;\n            }\n        }\n        if(count >= lst[i] && lst[i] > maxFreq){\n            maxFreq = lst[i];\n        }\n    }\n    return maxFreq;\n} \n\n"}
{"task_id": "CPP/70", "generation": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_list({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_list({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_list({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> result;\n    sort(lst.begin(), lst.end());\n    int left = 0, right = lst.size() - 1;\n    while (left <= right) {\n        if (left == right) {\n            result.push_back(lst[left]);\n            break;\n        }\n        result.push_back(lst[left]);\n        result.push_back(lst[right]);\n        left++;\n        right--;\n    }\n    return result;\n}"}
{"task_id": "CPP/71", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n    // Check if the three sides form a valid triangle\n    if(a + b > c && a + c > b && b + c > a){\n        // Calculate the semi-perimeter\n        float s = (a + b + c) / 2;\n        // Calculate the area using Heron's formula\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100; // Round to 2 decimal points\n    } else {\n        return -1; // Invalid triangle\n    }\n}\n\n"}
{"task_id": "CPP/72", "generation": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) \u279e false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) \u279e false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) \u279e true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) \u279e true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n    // Check if the vector q is balanced (palindromic)\n    bool balanced = true;\n    for(int i=0; i<q.size()/2; i++){\n        if(q[i] != q[q.size()-1-i]){\n            balanced = false;\n            break;\n        }\n    }\n    \n    // Check if the sum of elements is less than or equal to the maximum weight\n    int sum = 0;\n    for(int i=0; i<q.size(); i++){\n        sum += q[i];\n    }\n    \n    return balanced && sum <= w;\n}\n\n"}
{"task_id": "CPP/73", "generation": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int changes = 0;\n    \n    for(int i=0; i<n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            changes++;\n        }\n    }\n    \n    return changes;\n}"}
{"task_id": "CPP/74", "generation": "/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) \u279e {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) \u279e {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) \u279e {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) \u279e {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) \u279e {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    \n    for(string str : lst1){\n        total_chars_lst1 += str.length();\n    }\n    \n    for(string str : lst2){\n        total_chars_lst2 += str.length();\n    }\n    \n    if(total_chars_lst1 < total_chars_lst2){\n        return lst1;\n    } else {\n        return lst2;\n    }\n}"}
{"task_id": "CPP/75", "generation": "#include <iostream>\n\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int num){\n    if(num <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=num; i++){\n        if(num % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nbool is_multiply_prime(int a){\n    // Loop through all prime numbers less than 100\n    for(int i=2; i<100; i++){\n        if(is_prime(i)){\n            for(int j=i+1; j<100; j++){\n                if(is_prime(j)){\n                    for(int k=j+1; k<100; k++){\n                        if(is_prime(k) && i*j*k == a){\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/76", "generation": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n    if(x == 1) {\n        return true;\n    }\n    int power = 0;\n    while(pow(n, power) <= x) {\n        if(pow(n, power) == x) {\n            return true;\n        }\n        power++;\n    }\n    return false;\n}"}
{"task_id": "CPP/77", "generation": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    int cube_root = cbrt(a);\n    return (cube_root * cube_root * cube_root == a);\n}"}
{"task_id": "CPP/78", "generation": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    int count = 0;\n    string primes = \"2357BD\";\n    \n    for(int i=0; i<num.length(); i++){\n        if(primes.find(num[i]) != string::npos){\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n"}
{"task_id": "CPP/79", "generation": "/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string binary = \"db\";\n    while(decimal > 0){\n        binary = to_string(decimal % 2) + binary;\n        decimal /= 2;\n    }\n    return binary + \"db\";\n}"}
{"task_id": "CPP/80", "generation": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if(s.length() < 3){\n        return false;\n    }\n    \n    for(int i=0; i<s.length()-2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/81", "generation": "/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letter_grades;\n    for(float grade : grades){\n        if(grade == 4.0){\n            letter_grades.push_back(\"A+\");\n        } else if(grade > 3.7){\n            letter_grades.push_back(\"A\");\n        } else if(grade > 3.3){\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 3.0){\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 2.7){\n            letter_grades.push_back(\"B\");\n        } else if(grade > 2.3){\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 2.0){\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 1.7){\n            letter_grades.push_back(\"C\");\n        } else if(grade > 1.3){\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 1.0){\n            letter_grades.push_back(\"D+\");\n        } else if(grade > 0.7){\n            letter_grades.push_back(\"D\");\n        } else if(grade > 0.0){\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}"}
{"task_id": "CPP/82", "generation": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int length = str.length();\n    if(length <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=length; i++){\n        if(length % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/83", "generation": "/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    int count = 0;\n    if(n == 1){\n        return 1;\n    }\n    count = 9 * (n-1) + 1; // Numbers starting with 1\n    count += 9 * (n-1) + 1; // Numbers ending with 1\n    return count;\n}\n\n"}
{"task_id": "CPP/84", "generation": "/*\nGiven a positive integer N, return in binary the total sum of its digits.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    int sum = 0;\n    while(N > 0){\n        sum += N % 10;\n        N /= 10;\n    }\n    string binary = \"\";\n    while(sum > 0){\n        binary = to_string(sum % 2) + binary;\n        sum /= 2;\n    }\n    return binary;\n}"}
{"task_id": "CPP/85", "generation": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for(int i=1; i<lst.size(); i+=2){\n        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/86", "generation": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string result = \"\";\n    string word = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            sort(word.begin(), word.end());\n            result += word + \" \";\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    sort(word.begin(), word.end());\n    result += word;\n    return result;\n}"}
{"task_id": "CPP/87", "generation": "/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == x){\n                result.push_back({i, j});\n            }\n        }\n    }\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b){\n        if(a[0] == b[0]){\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    return result;\n}"}
{"task_id": "CPP/88", "generation": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    if(array.size() == 0){\n        return array;\n    }\n    \n    int sum = array[0] + array[array.size()-1];\n    \n    if(sum % 2 == 0){\n        sort(array.begin(), array.end(), greater<int>());\n    } else {\n        sort(array.begin(), array.end());\n    }\n    \n    return array;\n}"}
{"task_id": "CPP/89", "generation": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        char c = s[i];\n        if(isalpha(c)){\n            char base = islower(c) ? 'a' : 'A';\n            c = base + (c - base + 2*2) % 26;\n        }\n        result += c;\n    }\n    return result;\n}"}
{"task_id": "CPP/90", "generation": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    if(lst.size() < 2){\n        return NULL;\n    }\n    \n    sort(lst.begin(), lst.end());\n    \n    int smallest = lst[0];\n    for(int i=1; i<lst.size(); i++){\n        if(lst[i] > smallest){\n            return lst[i];\n        }\n    }\n    \n    return NULL;\n}"}
{"task_id": "CPP/91", "generation": "/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int count = 0;\n    bool isI = false;\n    \n    for(int i=0; i<S.length(); i++){\n        if(S[i] == 'I' && (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!')){\n            isI = true;\n        }\n        if((S[i] == '.' || S[i] == '?' || S[i] == '!') && isI){\n            count++;\n            isI = false;\n        }\n    }\n    \n    return count;\n} \n\n"}
{"task_id": "CPP/92", "generation": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e true\n\nany_int(3, 2, 2) \u279e false\n\nany_int(3, -2, 1) \u279e true\n\nany_int(3.6, -2.2, 2) \u279e false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    if(floor(a)==a && floor(b)==b && floor(c)==c){\n        if(a==b+c || b==a+c || c==a+b){\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/93", "generation": "/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    string encoded_message = \"\";\n    for(char c : message){\n        if(isalpha(c)){\n            if(islower(c)){\n                c = toupper(c);\n            }else{\n                c = tolower(c);\n            }\n            if(c == 'A'){\n                encoded_message += 'C';\n            }else if(c == 'E'){\n                encoded_message += 'G';\n            }else if(c == 'I'){\n                encoded_message += 'K';\n            }else if(c == 'O'){\n                encoded_message += 'Q';\n            }else if(c == 'U'){\n                encoded_message += 'W';\n            }else{\n                encoded_message += c;\n            }\n        }else{\n            encoded_message += c;\n        }\n    }\n    return encoded_message;\n}\n\n"}
{"task_id": "CPP/94", "generation": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int maxPrime = 0;\n    for(int num : lst){\n        if(num > 1){\n            bool isPrime = true;\n            for(int i = 2; i*i <= num; i++){\n                if(num % i == 0){\n                    isPrime = false;\n                    break;\n                }\n            }\n            if(isPrime && num > maxPrime){\n                maxPrime = num;\n            }\n        }\n    }\n    \n    int sum = 0;\n    string primeStr = to_string(maxPrime);\n    for(char c : primeStr){\n        sum += c - '0';\n    }\n    \n    return sum;\n}"}
{"task_id": "CPP/95", "generation": "#include <iostream>\n#include <string>\n#include <map>\n#include <algorithm>\n\nusing namespace std;\n\nbool check_dict_case(map<string, string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n\n    for (auto const& pair : dict) {\n        string key = pair.first;\n        for (char c : key) {\n            if (!isalpha(c)) {\n                return false;\n            }\n        }\n\n        string lowerKey = key;\n        transform(lowerKey.begin(), lowerKey.end(), lowerKey.begin(), ::tolower);\n\n        string upperKey = key;\n        transform(upperKey.begin(), upperKey.end(), upperKey.begin(), ::toupper);\n\n        if (key != lowerKey && key != upperKey) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n"}
{"task_id": "CPP/96", "generation": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> primes;\n    if(n <= 1){\n        return primes;\n    }\n    \n    for(int i=2; i<n; i++){\n        bool isPrime = true;\n        for(int j=2; j*j<=i; j++){\n            if(i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    \n    return primes;\n}"}
{"task_id": "CPP/97", "generation": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int unitA = abs(a) % 10;\n    int unitB = abs(b) % 10;\n    return unitA * unitB;\n}"}
{"task_id": "CPP/98", "generation": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for(int i=0; i<s.length(); i+=2){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/99", "generation": "/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    float num = stof(value);\n    int lower = floor(num);\n    int upper = ceil(num);\n    \n    if (abs(num - lower) < abs(num - upper)) {\n        return lower;\n    } else {\n        return upper;\n    }\n}"}
{"task_id": "CPP/100", "generation": "/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> result;\n    result.push_back(n);\n    for(int i=1; i<n; i++){\n        if(n%2 == 0){\n            n += 2;\n        } else {\n            n += 1;\n        }\n        result.push_back(n);\n    }\n    return result;\n}"}
{"task_id": "CPP/101", "generation": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n    \n    for(char c : s){\n        if(c == ' ' || c == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    \n    if(word != \"\"){\n        words.push_back(word);\n    }\n    \n    return words;\n}"}
{"task_id": "CPP/102", "generation": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    int max_even = -1;\n    for(int i = y; i >= x; i--){\n        if(i % 2 == 0){\n            max_even = i;\n            break;\n        }\n    }\n    return max_even;\n}\n\n"}
{"task_id": "CPP/103", "generation": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n    if(n > m){\n        return \"-1\";\n    }\n    int sum = 0;\n    for(int i = n; i <= m; i++){\n        sum += i;\n    }\n    int avg = round((double)sum / (m - n + 1));\n    string binary = \"\";\n    while(avg > 0){\n        binary = to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n    return binary;\n}"}
{"task_id": "CPP/104", "generation": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for(int num : x){\n        bool hasEvenDigit = false;\n        int temp = num;\n        while(temp > 0){\n            int digit = temp % 10;\n            if(digit % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if(!hasEvenDigit){\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}"}
{"task_id": "CPP/105", "generation": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    vector<string> result;\n    map<int, string> num_to_name = {\n        {1, \"One\"},\n        {2, \"Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"Nine\"}\n    };\n\n    vector<int> filtered_arr;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered_arr.push_back(num);\n        }\n    }\n\n    sort(filtered_arr.begin(), filtered_arr.end());\n\n    reverse(filtered_arr.begin(), filtered_arr.end());\n\n    for (int num : filtered_arr) {\n        result.push_back(num_to_name[num]);\n    }\n\n    return result;\n}"}
{"task_id": "CPP/106", "generation": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> result;\n    int sum = 0;\n    int factorial = 1;\n    for(int i=1; i<=n; i++){\n        if(i%2 == 0){\n            factorial *= i;\n            result.push_back(factorial);\n        } else {\n            sum += i;\n            result.push_back(sum);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/107", "generation": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> result = {0, 0};\n    for(int i=1; i<=n; i++){\n        string num = to_string(i);\n        string rev_num = num;\n        reverse(rev_num.begin(), rev_num.end());\n        if(num == rev_num){\n            if(i%2 == 0){\n                result[0]++;\n            }else{\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/108", "generation": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for(int num : n){\n        int sum = 0;\n        int temp = abs(num);\n        while(temp > 0){\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "CPP/109", "generation": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if(arr.empty()){\n        return true;\n    }\n    \n    int n = arr.size();\n    int minIndex = 0;\n    for(int i=0; i<n; i++){\n        if(arr[i] < arr[minIndex]){\n            minIndex = i;\n        }\n    }\n    \n    for(int i=0; i<n; i++){\n        if(arr[(minIndex+i)%n] != arr[i]){\n            return false;\n        }\n    }\n    \n    return true;\n}"}
{"task_id": "CPP/110", "generation": "/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n    // Count the number of odd elements in lst1\n    int oddCount = 0;\n    for(int num : lst1){\n        if(num % 2 != 0){\n            oddCount++;\n        }\n    }\n    \n    // If there are no odd elements in lst1, return \"YES\"\n    if(oddCount == 0){\n        return \"YES\";\n    }\n    \n    // If there are odd elements in lst1, check if there are enough even elements in lst2 to exchange\n    int evenCount = 0;\n    for(int num : lst2){\n        if(num % 2 == 0){\n            evenCount++;\n        }\n    }\n    \n    // If there are enough even elements in lst2 to exchange with odd elements in lst1, return \"YES\"\n    if(evenCount >= oddCount){\n        return \"YES\";\n    }\n    \n    // Otherwise, return \"NO\"\n    return \"NO\";\n}"}
{"task_id": "CPP/111", "generation": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char, int> result;\n    map<char, int> count;\n\n    // Count the occurrences of each letter\n    for (char c : test) {\n        if (c != ' ') {\n            count[c]++;\n        }\n    }\n\n    // Find the maximum occurrence\n    int max_occurrence = 0;\n    for (auto it : count) {\n        max_occurrence = max(max_occurrence, it.second);\n    }\n\n    // Add letters with maximum occurrence to the result map\n    for (auto it : count) {\n        if (it.second == max_occurrence) {\n            result[it.first] = it.second;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "CPP/112", "generation": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    // Delete characters in s that are equal to any character in c\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(c.find(s[i]) == string::npos){\n            result += s[i];\n        }\n    }\n    \n    // Check if the result string is palindrome\n    string reversed = result;\n    reverse(reversed.begin(), reversed.end());\n    bool isPalindrome = (result == reversed);\n    \n    // Return the result string and whether it is palindrome or not\n    return {result, isPalindrome ? \"True\" : \"False\"};\n}"}
{"task_id": "CPP/113", "generation": "/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    vector<string> result;\n    for(string s : lst){\n        int count = 0;\n        for(char c : s){\n            if((c - '0') % 2 != 0){\n                count++;\n            }\n        }\n        string res = \"the number of odd elements \" + to_string(count) + \"n the str\" + to_string(count) + \"ng \" + s + \" of the \" + to_string(count) + \"nput.\";\n        result.push_back(res);\n    }\n    return result;\n}"}
{"task_id": "CPP/114", "generation": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    long long currentSum = nums[0];\n    \n    for(int i=1; i<nums.size(); i++){\n        currentSum = min(nums[i], currentSum + nums[i]);\n        minSum = min(minSum, currentSum);\n    }\n    \n    return minSum;\n}\n\n"}
{"task_id": "CPP/115", "generation": "/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity. Can't use buckets from other wells to extract water from one well.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int rows = grid.size();\n    int cols = grid[0].size();\n    int total_water = 0;\n    int buckets = 0;\n    \n    for(int i=0;i<rows;i++){\n        for(int j=0;j<cols;j++){\n            total_water += grid[i][j];\n        }\n    }\n    \n    while(total_water > 0){\n        total_water -= capacity;\n        buckets++;\n    }\n    \n    return buckets;\n}"}
{"task_id": "CPP/116", "generation": "/*\nIn this Kata, you have to sort a vector of integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array({1, 5, 2, 3, 4}) == {1, 2, 4, 3, 5}\n>>> sort_array({-2, -3, -4, -5, -6}) == {-4, -2, -6, -5, -3}\n>>> sort_array({1, 0, 2, 3, 4}) == {0, 1, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    // Custom comparator function to sort based on number of ones in binary representation\n    auto cmp = [](int a, int b) {\n        int countA = __builtin_popcount(abs(a));\n        int countB = __builtin_popcount(abs(b));\n        if (countA == countB) {\n            return a < b;\n        }\n        return countA < countB;\n    };\n    \n    // Sort the vector using the custom comparator function\n    sort(arr.begin(), arr.end(), cmp);\n    \n    return arr;\n}"}
{"task_id": "CPP/117", "generation": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    vector<string> result;\n    if(s.empty()){\n        return result;\n    }\n    string word = \"\";\n    int consonant_count = 0;\n    for(int i=0; i<s.length(); i++){\n        if(s[i] != ' '){\n            if(s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u'){\n                consonant_count++;\n            }\n            word += s[i];\n        } else {\n            if(consonant_count == n){\n                result.push_back(word);\n            }\n            word = \"\";\n            consonant_count = 0;\n        }\n    }\n    if(consonant_count == n){\n        result.push_back(word);\n    }\n    return result;\n}"}
{"task_id": "CPP/118", "generation": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    // Initialize variables to store the closest vowel and its distance from the right side\n    char closest_vowel = '\\0';\n    int min_distance = INT_MAX;\n    \n    // Iterate through the word from right to left\n    for(int i = word.length()-2; i > 0; i--){\n        if(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u'){\n            // If the character is a consonant, check if the previous and next characters are vowels\n            if((word[i-1] == 'a' || word[i-1] == 'e' || word[i-1] == 'i' || word[i-1] == 'o' || word[i-1] == 'u') &&\n               (word[i+1] == 'a' || word[i+1] == 'e' || word[i+1] == 'i' || word[i+1] == 'o' || word[i+1] == 'u')){\n                // Calculate the distance from the right side\n                int distance = word.length() - 1 - i;\n                // Update the closest vowel if the distance is smaller\n                if(distance < min_distance){\n                    closest_vowel = word[i];\n                    min_distance = distance;\n                }\n            }\n        }\n    }\n    \n    // Return the closest vowel found\n    if(closest_vowel != '\\0'){\n        string result(1, closest_vowel);\n        return result;\n    } else {\n        return \"\";\n    }\n}\n\n"}
{"task_id": "CPP/119", "generation": "/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    int openCount = 0;\n    for (string s : lst) {\n        for (char c : s) {\n            if (c == '(') {\n                openCount++;\n            } else {\n                if (openCount == 0) {\n                    return \"No\";\n                }\n                openCount--;\n            }\n        }\n    }\n    return openCount == 0 ? \"Yes\" : \"No\";\n}"}
{"task_id": "CPP/120", "generation": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr, in ascending order.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    // Sort the vector in ascending order\n    sort(arr.begin(), arr.end());\n    \n    // Create a new vector to store the maximum k numbers\n    vector<int> result;\n    \n    // Iterate from the end of the sorted vector and add the maximum k numbers to the result vector\n    for(int i=arr.size()-1; i>=arr.size()-k; i--){\n        result.push_back(arr[i]);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/121", "generation": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%2 == 0 && lst[i]%2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/122", "generation": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum = 0;\n    for(int i=0; i<k && i<arr.size(); i++){\n        if(arr[i] >= 10 && arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/123", "generation": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> result;\n    while(n != 1){\n        result.push_back(n);\n        if(n % 2 == 0){\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    result.push_back(1);\n    \n    vector<int> odd_numbers;\n    for(int num : result){\n        if(num % 2 != 0){\n            odd_numbers.push_back(num);\n        }\n    }\n    \n    sort(odd_numbers.begin(), odd_numbers.end());\n    \n    return odd_numbers;\n}"}
{"task_id": "CPP/124", "generation": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    if(date.empty()){\n        return false;\n    }\n    \n    int month = stoi(date.substr(0,2));\n    int day = stoi(date.substr(3,2));\n    int year = stoi(date.substr(6,4));\n    \n    if(month < 1 || month > 12){\n        return false;\n    }\n    \n    if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)){\n        return false;\n    }\n    \n    if((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)){\n        return false;\n    }\n    \n    if(month == 2){\n        if((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)){\n            if(day < 1 || day > 29){\n                return false;\n            }\n        } else {\n            if(day < 1 || day > 28){\n                return false;\n            }\n        }\n    }\n    \n    if(date.length() != 10 || date[2] != '-' || date[5] != '-'){\n        return false;\n    }\n    \n    return true;\n}"}
{"task_id": "CPP/125", "generation": "/*\nGiven a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector with one element, the number of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n    vector<string> result;\n    string word = \"\";\n    bool hasWhitespace = false;\n    bool hasComma = false;\n    \n    for(char c : txt){\n        if(c == ' '){\n            hasWhitespace = true;\n            if(word != \"\"){\n                result.push_back(word);\n                word = \"\";\n            }\n        } else if(c == ','){\n            hasComma = true;\n            if(word != \"\"){\n                result.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    \n    if(word != \"\"){\n        result.push_back(word);\n    }\n    \n    if(!hasWhitespace && !hasComma){\n        int count = 0;\n        for(char c : txt){\n            if(islower(c)){\n                int order = c - 'a';\n                if(order % 2 != 0){\n                    count++;\n                }\n            }\n        }\n        result.clear();\n        result.push_back(to_string(count));\n    }\n    \n    return result;\n} \n\n"}
{"task_id": "CPP/126", "generation": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If the a number appears more than twice, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) \u279e true\nis_sorted({1, 2, 3, 4, 5}) \u279e true\nis_sorted({1, 3, 2, 4, 5}) \u279e false\nis_sorted({1, 2, 3, 4, 5, 6}) \u279e true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) \u279e true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) \u279e false\nis_sorted({1, 2, 2, 3, 3, 4}) \u279e true\nis_sorted({1, 2, 2, 2, 3, 4}) \u279e false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]){\n            return false;\n        }\n    }\n    for(int i=0;i<lst.size()-2;i++){\n        if(lst[i]==lst[i+1] && lst[i]==lst[i+2]){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/127", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start1 = interval1[0];\n    int end1 = interval1[1];\n    int start2 = interval2[0];\n    int end2 = interval2[1];\n    \n    int intersectionStart = max(start1, start2);\n    int intersectionEnd = min(end1, end2);\n    \n    if (intersectionStart > intersectionEnd) {\n        return \"NO\";\n    }\n    \n    int length = intersectionEnd - intersectionStart;\n    \n    if (isPrime(length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n"}
{"task_id": "CPP/128", "generation": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if(arr.empty()){\n        return -32768;\n    }\n    \n    int product = 1;\n    int sum = 0;\n    \n    for(int num : arr){\n        if(num > 0){\n            product *= 1;\n        } else if(num < 0){\n            product *= -1;\n        } else {\n            product *= 0;\n        }\n        \n        sum += abs(num);\n    }\n    \n    return product * sum;\n}"}
{"task_id": "CPP/129", "generation": "/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    // Find the starting cell with the minimum value\n    int minVal = grid[0][0];\n    int startRow = 0, startCol = 0;\n    for(int i=0; i<grid.size(); i++){\n        for(int j=0; j<grid[i].size(); j++){\n            if(grid[i][j] < minVal){\n                minVal = grid[i][j];\n                startRow = i;\n                startCol = j;\n            }\n        }\n    }\n    \n    // Initialize the path vector with the starting cell value\n    vector<int> path;\n    path.push_back(minVal);\n    \n    // Move k-1 steps to find the minimum path\n    int currentRow = startRow, currentCol = startCol;\n    for(int step=1; step<k; step++){\n        // Find the neighbor cell with the minimum value\n        int minNeighbor = INT_MAX;\n        int nextRow = -1, nextCol = -1;\n        for(int i=-1; i<=1; i++){\n            for(int j=-1; j<=1; j++){\n                if(i == 0 && j == 0) continue;\n                int newRow = currentRow + i;\n                int newCol = currentCol + j;\n                if(newRow >= 0 && newRow < grid.size() && newCol >= 0 && newCol < grid[newRow].size()){\n                    if(grid[newRow][newCol] < minNeighbor){\n                        minNeighbor = grid[newRow][newCol];\n                        nextRow = newRow;\n                        nextCol = newCol;\n                    }\n                }\n            }\n        }\n        \n        // Move to the neighbor cell with the minimum value\n        path.push_back(minNeighbor);\n        currentRow = nextRow;\n        currentCol = nextCol;\n    }\n    \n    return path;\n}"}
{"task_id": "CPP/130", "generation": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> result;\n    if(n == 0){\n        return result;\n    }\n    result.push_back(3);\n    if(n == 1){\n        return result;\n    }\n    result.push_back(1);\n    if(n == 2){\n        return result;\n    }\n    result.push_back(2);\n    for(int i = 3; i <= n; i++){\n        if(i % 2 == 0){\n            result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/131", "generation": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int product = 1;\n    while(n > 0){\n        int digit = n % 10;\n        if(digit % 2 != 0){\n            product *= digit;\n        }\n        n /= 10;\n    }\n    if(product == 1){\n        return 0;\n    }\n    return product;\n}\n\n"}
{"task_id": "CPP/132", "generation": "/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") \u279e true\nis_nested(\"[]]]]]]][[[[[]\") \u279e false\nis_nested(\"[][]\") \u279e false\nis_nested(\"[]\") \u279e false\nis_nested(\"[[][]]\") \u279e true\nis_nested(\"[[]][[\") \u279e true\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n    int count = 0;\n    for(char c : str){\n        if(c == '['){\n            count++;\n        }\n        else if(c == ']' && count > 0){\n            count--;\n        }\n    }\n    return count < 0;\n}\n\n"}
{"task_id": "CPP/133", "generation": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n    return sum;\n}"}
{"task_id": "CPP/134", "generation": "/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e false\ncheck_if_last_char_is_a_letter(\"apple pi e\") \u279e true\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e false\ncheck_if_last_char_is_a_letter(\"\") \u279e false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if(txt.empty()){\n        return false;\n    }\n    \n    char lastChar = txt.back();\n    \n    if(isalpha(lastChar)){\n        size_t found = txt.find_last_of(\" \");\n        if(found == string::npos || found == txt.length()-1){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\n"}
{"task_id": "CPP/135", "generation": "/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int index = -1;\n    for(int i=1; i<arr.size(); i++){\n        if(arr[i] < arr[i-1]){\n            index = i-1;\n        }\n    }\n    return index;\n}"}
{"task_id": "CPP/136", "generation": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    vector<int> result = {0, 0};\n    int largest_negative = INT_MIN;\n    int smallest_positive = INT_MAX;\n    \n    for(int num : lst){\n        if(num < 0 && num > largest_negative){\n            largest_negative = num;\n        }\n        if(num > 0 && num < smallest_positive){\n            smallest_positive = num;\n        }\n    }\n    \n    if(largest_negative != INT_MIN){\n        result[0] = largest_negative;\n    }\n    if(smallest_positive != INT_MAX){\n        result[1] = smallest_positive;\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/137", "generation": "/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e \"None\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n    if(a.type() == typeid(int) && b.type() == typeid(int)){\n        int int_a = boost::any_cast<int>(a);\n        int int_b = boost::any_cast<int>(b);\n        if(int_a > int_b){\n            return int_a;\n        } else if(int_b > int_a){\n            return int_b;\n        } else {\n            return \"None\";\n        }\n    } else if(a.type() == typeid(float) && b.type() == typeid(float)){\n        float float_a = boost::any_cast<float>(a);\n        float float_b = boost::any_cast<float>(b);\n        if(float_a > float_b){\n            return float_a;\n        } else if(float_b > float_a){\n            return float_b;\n        } else {\n            return \"None\";\n        }\n    } else if(a.type() == typeid(string) && b.type() == typeid(string)){\n        string string_a = boost::any_cast<string>(a);\n        string string_b = boost::any_cast<string>(b);\n        if(string_a.find_first_of(\",.\") != string::npos){\n            replace(string_a.begin(), string_a.end(), ',', '.');\n        }\n        if(string_b.find_first_of(\",.\") != string::npos){\n            replace(string_b.begin(), string_b.end(), ',', '.');\n        }\n        if(stof(string_a) > stof(string_b)){\n            return string_a;\n        } else if(stof(string_b) > stof(string_a)){\n            return string_b;\n        } else {\n            return \"None\";\n        }\n    } else if((a.type() == typeid(int) && b.type() == typeid(string)) || (a.type() == typeid(string) && b.type() == typeid(int))){\n        if(a.type() == typeid(int)){\n            int int_a = boost::any_cast<int>(a);\n            string string_b = boost::any_cast<string>(b);\n            if(string_b.find_first_of(\",.\") != string::npos){\n                replace(string_b.begin(), string_b.end(), ',', '.');\n            }\n            if(int_a > stof(string_b)){\n                return int_a;\n            } else if(stof(string_b) > int_a){\n                return string_b;\n            } else {\n                return \"None\";\n            }\n        } else {\n            string string_a = boost::any_cast<string>(a);\n            int int_b = boost::any_cast<int>(b);\n            if(string_a.find_first_of(\",.\") != string::npos){\n                replace(string_a.begin(), string_a.end(), ',', '.');\n            }\n            if(stof(string_a) > int_b){\n                return string_a;\n            } else if(int_b > stof(string_a)){\n                return int_b;\n            } else {\n                return \"None\";\n            }\n        }\n    } else {\n        return \"Invalid input types\";\n    }\n}"}
{"task_id": "CPP/138", "generation": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    // Check if n is less than 8 or odd\n    if(n < 8 || n % 2 != 0){\n        return false;\n    }\n    \n    // Check if n can be written as the sum of 4 positive even numbers\n    for(int i=2; i<=n/2; i+=2){\n        for(int j=2; j<=n/2; j+=2){\n            for(int k=2; k<=n/2; k+=2){\n                for(int l=2; l<=n/2; l+=2){\n                    if(i + j + k + l == n){\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    \n    return false;\n}\n\n"}
{"task_id": "CPP/139", "generation": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long result = 1;\n    for(int i = n; i > 0; i--){\n        long long factorial = 1;\n        for(int j = i; j > 0; j--){\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/140", "generation": "/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string result = \"\";\n    int consecutive_spaces = 0;\n    \n    for(int i=0; i<text.length(); i++){\n        if(text[i] == ' '){\n            consecutive_spaces++;\n            if(consecutive_spaces > 2){\n                result += \"-\";\n            } else {\n                result += \"_\";\n            }\n        } else {\n            result += text[i];\n            consecutive_spaces = 0;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/141", "generation": "/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    int digits = 0;\n    int dot = 0;\n    int letter = 0;\n    string extension;\n    \n    for(char c : file_name){\n        if(isdigit(c)){\n            digits++;\n        }\n        else if(c == '.'){\n            dot++;\n        }\n        else if(isalpha(c)){\n            letter++;\n        }\n    }\n    \n    if(digits > 3 || dot != 1 || letter != 1){\n        return \"No\";\n    }\n    \n    extension = file_name.substr(file_name.find('.') + 1);\n    \n    if(extension != \"txt\" && extension != \"exe\" && extension != \"dll\"){\n        return \"No\";\n    }\n    \n    return \"Yes\";\n}\n\n"}
{"task_id": "CPP/142", "generation": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%3 == 0){\n            lst[i] = lst[i]*lst[i]; // square the integer entry if index is a multiple of 3\n        } else if(i%4 == 0 && i%3 != 0){\n            lst[i] = lst[i]*lst[i]*lst[i]; // cube the integer entry if index is a multiple of 4 and not a multiple of 3\n        }\n        sum += lst[i]; // add the modified or unmodified entry to the sum\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/143", "generation": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    string result = \"\";\n    string word = \"\";\n    int length = sentence.length();\n    \n    for(int i=0; i<length; i++){\n        if(sentence[i] != ' '){\n            word += sentence[i];\n        } else {\n            int word_length = word.length();\n            bool is_prime = true;\n            if(word_length <= 1){\n                is_prime = false;\n            } else {\n                for(int j=2; j*j<=word_length; j++){\n                    if(word_length % j == 0){\n                        is_prime = false;\n                        break;\n                    }\n                }\n            }\n            if(is_prime){\n                result += word + \" \";\n            }\n            word = \"\";\n        }\n    }\n    \n    int last_word_length = word.length();\n    bool is_prime = true;\n    if(last_word_length <= 1){\n        is_prime = false;\n    } else {\n        for(int j=2; j*j<=last_word_length; j++){\n            if(last_word_length % j == 0){\n                is_prime = false;\n                break;\n            }\n        }\n    }\n    if(is_prime){\n        result += word;\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/144", "generation": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n    // Extracting the numerators and denominators from the input strings\n    int x_num = stoi(x.substr(0, x.find(\"/\")));\n    int x_den = stoi(x.substr(x.find(\"/\") + 1));\n    \n    int n_num = stoi(n.substr(0, n.find(\"/\")));\n    int n_den = stoi(n.substr(n.find(\"/\") + 1));\n    \n    // Checking if x * n evaluates to a whole number\n    if((x_num * n_num) % (x_den * n_den) == 0){\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "CPP/145", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\n// Function to calculate the sum of digits of a number\nint sum_of_digits(int num) {\n    int sum = 0;\n    while (num != 0) {\n        sum += abs(num % 10);\n        num /= 10;\n    }\n    return sum;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    // Custom comparator function for sorting based on sum of digits and index\n    sort(nums.begin(), nums.end(), [&](int a, int b) {\n        int sum_a = sum_of_digits(a);\n        int sum_b = sum_of_digits(b);\n        if (sum_a == sum_b) {\n            return find(nums.begin(), nums.end(), a) < find(nums.begin(), nums.end(), b);\n        }\n        return sum_a < sum_b;\n    });\n\n    return nums;\n}\n\n"}
{"task_id": "CPP/146", "generation": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for(int num : nums){\n        if(num > 10){\n            string numStr = to_string(num);\n            int firstDigit = numStr[0] - '0';\n            int lastDigit = numStr[numStr.length()-1] - '0';\n            if((firstDigit % 2 != 0) && (lastDigit % 2 != 0)){\n                count++;\n            }\n        }\n    }\n    return count;\n} \n\n"}
{"task_id": "CPP/147", "generation": "/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_max_triples(int n){\n    vector<int> a(n);\n    int count = 0;\n    for(int i=0; i<n; i++){\n        a[i] = i*i - i + 1;\n    }\n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/148", "generation": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    int start = -1;\n    int end = -1;\n    \n    for(int i=0; i<planets.size(); i++){\n        if(planets[i] == planet1){\n            start = i;\n        }\n        if(planets[i] == planet2){\n            end = i;\n        }\n    }\n    \n    if(start == -1 || end == -1){\n        return result;\n    }\n    \n    if(start < end){\n        for(int i=start+1; i<end; i++){\n            result.push_back(planets[i]);\n        }\n    } else {\n        for(int i=end+1; i<start; i++){\n            result.push_back(planets[i]);\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/149", "generation": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    // Remove strings with odd lengths\n    vector<string> result;\n    for(string s : lst){\n        if(s.length() % 2 == 0){\n            result.push_back(s);\n        }\n    }\n    \n    // Sort the vector by length and alphabetically\n    sort(result.begin(), result.end(), [](const string& a, const string& b){\n        if(a.length() == b.length()){\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    \n    return result;\n}"}
{"task_id": "CPP/150", "generation": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    if(n <= 1){\n        return y;\n    }\n    for(int i=2; i*i<=n; i++){\n        if(n % i == 0){\n            return y;\n        }\n    }\n    return x;\n}\n\n"}
{"task_id": "CPP/151", "generation": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && (int)lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/152", "generation": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for(int i=0; i<game.size(); i++){\n        if(game[i] == guess[i]){\n            result.push_back(0);\n        }else{\n            result.push_back(abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/153", "generation": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    int max_strength = INT_MIN;\n    string strongest_extension = \"\";\n    \n    for(string extension : extensions){\n        int CAP = 0, SM = 0;\n        for(char c : extension){\n            if(isupper(c)){\n                CAP++;\n            } else if(islower(c)){\n                SM++;\n            }\n        }\n        int strength = CAP - SM;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n}"}
{"task_id": "CPP/154", "generation": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a,string b){\n    if(a.length() != b.length()){\n        return false;\n    }\n    \n    string temp = b + b;\n    \n    if(temp.find(a) != string::npos){\n        return true;\n    }\n    \n    return false;\n}\n\n"}
{"task_id": "CPP/155", "generation": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> result = {0, 0};\n    string num_str = to_string(abs(num));\n    \n    for(char c : num_str){\n        if((c - '0') % 2 == 0){\n            result[0]++;\n        } else {\n            result[1]++;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/156", "generation": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_roman(int number){\n    // Define the symbols and their corresponding values in a vector\n    vector<pair<int, string>> romanSymbols = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n    \n    // Initialize an empty string to store the roman numeral equivalent\n    string romanNumeral = \"\";\n    \n    // Iterate through the symbols and their values\n    for(auto symbol : romanSymbols){\n        // While the number is greater than or equal to the current symbol's value\n        while(number >= symbol.first){\n            // Append the symbol to the roman numeral string\n            romanNumeral += symbol.second;\n            // Subtract the symbol's value from the number\n            number -= symbol.first;\n        }\n    }\n    \n    // Return the lowercase roman numeral string\n    for(int i=0;i<romanNumeral.size();i++){\n        romanNumeral[i] = tolower(romanNumeral[i]);\n    }\n    return romanNumeral;\n}"}
{"task_id": "CPP/157", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n    // Sort the sides in ascending order\n    if(a > c){\n        float temp = a;\n        a = c;\n        c = temp;\n    }\n    if(b > c){\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    \n    // Check if it forms a right-angled triangle\n    if(pow(c,2) == pow(a,2) + pow(b,2)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n"}
{"task_id": "CPP/158", "generation": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    string maxWord = \"\";\n    int maxUniqueChars = 0;\n    \n    for(string word : words){\n        int uniqueChars = 0;\n        bool visited[26] = {false};\n        \n        for(char c : word){\n            if(!visited[c - 'a']){\n                uniqueChars++;\n                visited[c - 'a'] = true;\n            }\n        }\n        \n        if(uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word < maxWord)){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        }\n    }\n    \n    return maxWord;\n}"}
{"task_id": "CPP/159", "generation": "/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n    int totalCarrots = number + need;\n    int eatenCarrots = totalCarrots;\n    if (totalCarrots > remaining) {\n        eatenCarrots = remaining;\n    }\n    int carrotsLeft = remaining - eatenCarrots;\n    return {eatenCarrots, carrotsLeft};\n}"}
{"task_id": "CPP/160", "generation": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    if(operato.size() != operand.size()-1){\n        return -1; // invalid input\n    }\n    \n    int result = operand[0]; // initialize result with first operand\n    \n    for(int i=0; i<operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"//\"){\n            if(operand[i+1] != 0){\n                result /= operand[i+1];\n            }\n            else{\n                return -1; // division by zero error\n            }\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n        else{\n            return -1; // invalid operator\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/161", "generation": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    for(int i=0; i<s.length(); i++){\n        if(isalpha(s[i])){\n            if(islower(s[i])){\n                s[i] = toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n            }\n        }\n    }\n    \n    int left = 0, right = s.length()-1;\n    while(left < right){\n        swap(s[left], s[right]);\n        left++;\n        right--;\n    }\n    \n    return s;\n}"}
{"task_id": "CPP/162", "generation": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    if(text.empty()){\n        return \"None\";\n    }\n    \n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n    \n    char mdString[33];\n    for(int i = 0; i < 16; i++){\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    }\n    \n    return string(mdString);\n}"}
{"task_id": "CPP/163", "generation": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    vector<int> result;\n    if(a > b){\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    for(int i = a; i <= b; i++){\n        if(i % 2 == 0 && i < 10){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/0", "generation": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(fabs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/1", "generation": "/*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> result;\n    int count = 0;\n    string group = \"\";\n    \n    for(char c : paren_string){\n        if(c == '('){\n            count++;\n        }\n        group += c;\n        if(c == ')'){\n            count--;\n        }\n        if(count == 0){\n            result.push_back(group);\n            group = \"\";\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/2", "generation": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    int integer_part = (int)number; // Get the integer part of the number\n    float decimal_part = number - integer_part; // Calculate the decimal part\n    return decimal_part; // Return the decimal part\n}\n\n"}
{"task_id": "CPP/3", "generation": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/4", "generation": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    // Calculate the mean of the dataset\n    float sum = 0;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    \n    // Calculate the mean absolute deviation\n    float mad = 0;\n    for(int i=0; i<numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n    \n    return mad;\n}\n\n"}
{"task_id": "CPP/5", "generation": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i != numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/6", "generation": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> result;\n    int max_depth = 0;\n    int current_depth = 0;\n    \n    for(int i=0; i<paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            current_depth++;\n            max_depth = max(max_depth, current_depth);\n        }\n        else if(paren_string[i] == ')'){\n            current_depth--;\n        }\n        else if(paren_string[i] == ' '){\n            result.push_back(max_depth);\n            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n    \n    result.push_back(max_depth);\n    \n    return result;\n}"}
{"task_id": "CPP/7", "generation": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filtered_strings;\n    for(string s : strings){\n        if(s.find(substring) != string::npos){\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;\n}"}
{"task_id": "CPP/8", "generation": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    \n    for(int num : numbers){\n        sum += num;\n        product *= num;\n    }\n    \n    return {sum, product};\n}"}
{"task_id": "CPP/9", "generation": "/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> result;\n    int max_num = numbers[0];\n    result.push_back(max_num);\n    \n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n        result.push_back(max_num);\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/10", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    int n = str.length();\n    if(n==0){\n        return \"\";\n    }\n    for(int i=n-1;i>=0;i--){\n        if(is_palindrome(str.substr(i))){\n            string prefix = str.substr(0,i);\n            string suffix = str.substr(i);\n            string reverse_prefix(prefix.rbegin(),prefix.rend());\n            return str + reverse_prefix;\n        }\n    }\n    return \"\";\n}\n\n"}
{"task_id": "CPP/11", "generation": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result = \"\";\n    for(int i=0; i<a.length(); i++){\n        if(a[i] != b[i]){\n            result += \"1\";\n        } else {\n            result += \"0\";\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if(strings.empty()){\n        return \"None\";\n    }\n    \n    string longestString = strings[0];\n    for(int i=1; i<strings.size(); i++){\n        if(strings[i].length() > longestString.length()){\n            longestString = strings[i];\n        }\n    }\n    \n    return longestString;\n}"}
{"task_id": "CPP/13", "generation": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    while (a != b) {\n        if (a > b) {\n            a = a - b;\n        } else {\n            b = b - a;\n        }\n    }\n    return a;\n}"}
{"task_id": "CPP/14", "generation": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> result;\n    string prefix = \"\";\n    for(char c : str){\n        prefix += c;\n        result.push_back(prefix);\n    }\n    return result;\n}"}
{"task_id": "CPP/15", "generation": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string result = \"\";\n    for(int i=0; i<=n; i++){\n        result += to_string(i) + \" \";\n    }\n    result.pop_back(); // remove the extra space at the end\n    return result;\n}"}
{"task_id": "CPP/16", "generation": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n    // Convert the string to lowercase\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Initialize a vector to store distinct characters\n    vector<char> distinct_chars;\n    \n    // Iterate through the string and add distinct characters to the vector\n    for(char c : str){\n        if(find(distinct_chars.begin(), distinct_chars.end(), c) == distinct_chars.end()){\n            distinct_chars.push_back(c);\n        }\n    }\n    \n    // Return the size of the vector, which represents the number of distinct characters\n    return distinct_chars.size();\n}"}
{"task_id": "CPP/17", "generation": "/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n    vector<int> beats;\n    string note = \"\";\n    for(int i=0; i<music_string.length(); i++){\n        if(music_string[i] == 'o'){\n            if(note == \"o\"){\n                beats.push_back(4);\n            } else if(note == \"o|\"){\n                beats.push_back(2);\n            }\n            note = \"o\";\n        } else if(music_string[i] == '|'){\n            if(note == \"o\"){\n                beats.push_back(4);\n            } else if(note == \"o|\"){\n                beats.push_back(2);\n            } else if(note == \".|\"){\n                beats.push_back(1);\n            }\n            note = \"|\";\n        } else if(music_string[i] == '.'){\n            if(note == \"o\"){\n                beats.push_back(4);\n            } else if(note == \"o|\"){\n                beats.push_back(2);\n            } else if(note == \".|\"){\n                beats.push_back(1);\n            }\n            note = \".\";\n        }\n    }\n    if(note == \"o\"){\n        beats.push_back(4);\n    } else if(note == \"o|\"){\n        beats.push_back(2);\n    } else if(note == \".|\"){\n        beats.push_back(1);\n    }\n    return beats;\n}"}
{"task_id": "CPP/18", "generation": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int count = 0;\n    if(substring.empty()){\n        return 0;\n    }\n    for(int i=0; i<=str.length()-substring.length(); i++){\n        if(str.substr(i, substring.length()) == substring){\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "CPP/19", "generation": "/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<string, int> num_map = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    \n    // Split the input string into individual numbers\n    string result = \"\";\n    string temp = \"\";\n    for(int i=0; i<numbers.length(); i++){\n        if(numbers[i] == ' '){\n            result += to_string(num_map[temp]) + \" \";\n            temp = \"\";\n        } else {\n            temp += numbers[i];\n        }\n    }\n    result += to_string(num_map[temp]);\n    \n    // Sort the numbers\n    vector<int> sorted_nums;\n    temp = \"\";\n    for(int i=0; i<result.length(); i++){\n        if(result[i] == ' '){\n            sorted_nums.push_back(stoi(temp));\n            temp = \"\";\n        } else {\n            temp += result[i];\n        }\n    }\n    sorted_nums.push_back(stoi(temp));\n    sort(sorted_nums.begin(), sorted_nums.end());\n    \n    // Construct the final sorted string\n    result = \"\";\n    for(int i=0; i<sorted_nums.size(); i++){\n        for(auto it=num_map.begin(); it!=num_map.end(); it++){\n            if(it->second == sorted_nums[i]){\n                result += it->first + \" \";\n                break;\n            }\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/20", "generation": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> result;\n    float min_diff = INFINITY;\n    for(int i=0; i<numbers.size()-1; i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result.clear();\n                result.push_back(min(numbers[i], numbers[j]));\n                result.push_back(max(numbers[i], numbers[j]));\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/21", "generation": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n    // Find the smallest and largest numbers in the vector\n    float min_num = numbers[0];\n    float max_num = numbers[0];\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] < min_num){\n            min_num = numbers[i];\n        }\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n    }\n    \n    // Apply linear transformation to rescale the numbers\n    vector<float> rescaled_numbers;\n    for(int i=0; i<numbers.size(); i++){\n        float rescaled_num = (numbers[i] - min_num) / (max_num - min_num);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n    \n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/22", "generation": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for(auto val : values){\n        if(val.type() == typeid(int)){\n            result.push_back(boost::any_cast<int>(val));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/23", "generation": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    return str.length();\n}\n\n"}
{"task_id": "CPP/24", "generation": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int largest = 1;\n    for(int i=2; i<n; i++){\n        if(n%i == 0){\n            largest = i;\n        }\n    }\n    return largest;\n}\n\n"}
{"task_id": "CPP/25", "generation": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> factors;\n    for(int i=2; i*i<=n; i++){\n        while(n%i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if(n > 1){\n        factors.push_back(n);\n    }\n    return factors;\n}"}
{"task_id": "CPP/26", "generation": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        if(count(numbers.begin(), numbers.end(), numbers[i]) == 1){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/27", "generation": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    for(int i=0; i<str.length(); i++){\n        if(islower(str[i])){\n            str[i] = toupper(str[i]);\n        }\n        else if(isupper(str[i])){\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;\n}"}
{"task_id": "CPP/28", "generation": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for(string s : strings){\n        result += s;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/29", "generation": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> result;\n    for(string s : strings){\n        if(s.substr(0, prefix.length()) == prefix){\n            result.push_back(s);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/30", "generation": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> positive_nums;\n    for(int i=0; i<l.size(); i++){\n        if(l[i] > 0){\n            positive_nums.push_back(l[i]);\n        }\n    }\n    return positive_nums;\n}"}
{"task_id": "CPP/31", "generation": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if(n <= 1){\n        return false;\n    }\n    for(long long i=2; i*i<=n; i++){\n        if(n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/32", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only one zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    if(xs.size() % 2 != 0){\n        printf(\"Number of coefficients should be even\\n\");\n        return 0;\n    }\n    double max_coeff = xs[xs.size()-1];\n    double x = -1;\n    while(poly(xs, x) != 0){\n        x++;\n    }\n    return x;\n}\n\n"}
{"task_id": "CPP/33", "generation": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted in ascending order.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> l_prime = l;\n    for(int i=0; i<l.size(); i++){\n        if((i+1)%3 == 0){\n            sort(l_prime.begin() + i, l_prime.begin() + i + 1);\n        }\n    }\n    return l_prime;\n}"}
{"task_id": "CPP/34", "generation": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Remove duplicates\n    l.erase(unique(l.begin(), l.end()), l.end());\n    \n    return l;\n}\n\n"}
{"task_id": "CPP/35", "generation": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n    float max = l[0];\n    for(int i=1; i<l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}"}
{"task_id": "CPP/36", "generation": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count = 0;\n    for(int i=0; i<n; i++){\n        if(i%11==0 || i%13==0){\n            int num = i;\n            while(num>0){\n                if(num%10 == 7){\n                    count++;\n                }\n                num = num/10;\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/37", "generation": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> even_values;\n    vector<float> sorted_even_values;\n    vector<float> result;\n\n    // Extract even values from l\n    for(int i=0; i<l.size(); i++){\n        if(i%2 == 0){\n            even_values.push_back(l[i]);\n        }\n    }\n\n    // Sort even values\n    sorted_even_values = even_values;\n    sort(sorted_even_values.begin(), sorted_even_values.end());\n\n    // Construct result vector\n    int even_index = 0;\n    int odd_index = 0;\n    for(int i=0; i<l.size(); i++){\n        if(i%2 == 0){\n            result.push_back(sorted_even_values[even_index]);\n            even_index++;\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n\n    return result;\n}"}
{"task_id": "CPP/38", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\n    int l=s.length();\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(2)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n"}
{"task_id": "CPP/39", "generation": "/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    int first = 1, second = 1, next, count = 2;\n    while(count < n){\n        next = first + second;\n        first = second;\n        second = next;\n        count++;\n    }\n    while(true){\n        bool isPrime = true;\n        for(int i=2; i*i<=next; i++){\n            if(next % i == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            return next;\n        }\n        next = first + second;\n        first = second;\n        second = next;\n    }\n}"}
{"task_id": "CPP/40", "generation": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    int n = l.size();\n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/41", "generation": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    // Each car moving left to right will collide with each car moving right to left\n    // So the total number of collisions will be n * n\n    return n * n;\n}\n\n"}
{"task_id": "CPP/42", "generation": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> result;\n    for(int i=0; i<l.size(); i++){\n        result.push_back(l[i]+1);\n    }\n    return result;\n}"}
{"task_id": "CPP/43", "generation": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    for(int i=0; i<l.size(); i++){\n        for(int j=i+1; j<l.size(); j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/44", "generation": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string result = \"\";\n    while(x > 0){\n        int remainder = x % base;\n        result = to_string(remainder) + result;\n        x = x / base;\n    }\n    return result;\n}"}
{"task_id": "CPP/45", "generation": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/46", "generation": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 2;\n    }\n    if(n == 3){\n        return 0;\n    }\n    \n    int a = 0, b = 0, c = 2, d = 0, e = 0;\n    \n    for(int i = 4; i <= n; i++){\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    \n    return e;\n}\n\n"}
{"task_id": "CPP/47", "generation": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n8.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n % 2 == 0){\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return l[n/2];\n    }\n}"}
{"task_id": "CPP/48", "generation": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/49", "generation": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    if (n == 0) {\n        return 1;\n    }\n    int result = 1;\n    for (int i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n    return result;\n}"}
{"task_id": "CPP/50", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/51", "generation": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string result = \"\";\n    for(char c : text){\n        if(tolower(c) != 'a' && tolower(c) != 'e' && tolower(c) != 'i' && tolower(c) != 'o' && tolower(c) != 'u'){\n            result += c;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/52", "generation": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    for(int i=0; i<l.size(); i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "CPP/53", "generation": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x + y;\n}\n\n"}
{"task_id": "CPP/54", "generation": "/*\nCheck if two words have the same kind of characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n    // Sort both strings\n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    \n    // Check if both strings are equal\n    if(s0 == s1){\n        return true;\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/55", "generation": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\n"}
{"task_id": "CPP/56", "generation": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '<'){\n            count++;\n        } else if(bracket == '>'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/57", "generation": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    bool increasing = true;\n    bool decreasing = true;\n    \n    for(int i=1; i<l.size(); i++){\n        if(l[i] < l[i-1]){\n            increasing = false;\n        }\n        if(l[i] > l[i-1]){\n            decreasing = false;\n        }\n    }\n    \n    return increasing || decreasing;\n}"}
{"task_id": "CPP/58", "generation": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    \n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            if (result.empty() || result.back() != l1[i]) {\n                result.push_back(l1[i]);\n            }\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/59", "generation": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n\n"}
{"task_id": "CPP/60", "generation": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/61", "generation": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char c : brackets){\n        if(c == '('){\n            count++;\n        } else if(c == ')'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/62", "generation": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result;\n    for(int i=1; i<xs.size(); i++){\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}"}
{"task_id": "CPP/63", "generation": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    \n    int a = 0, b = 0, c = 1, d;\n    for(int i = 3; i <= n; i++){\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    \n    return d;\n}\n\n"}
{"task_id": "CPP/64", "generation": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    transform(s.begin(), s.end(), s.begin(), ::tolower); // convert string to lowercase\n    int count = 0;\n    for(char c : s){\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n            count++;\n        }\n    }\n    if(s.back() == 'y'){ // check if last character is 'y'\n        count++;\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/65", "generation": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string num = to_string(x);\n    int n = num.size();\n    \n    if(shift > n){\n        reverse(num.begin(), num.end());\n        return num;\n    }\n    \n    shift = shift % n;\n    string result = num.substr(n-shift) + num.substr(0, n-shift);\n    \n    return result;\n}"}
{"task_id": "CPP/66", "generation": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(char c : s){\n        if(isupper(c)){\n            sum += c;\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/67", "generation": "/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n    int apples = 0;\n    int oranges = 0;\n    int mango = 0;\n    \n    // Parse the string to find the number of apples and oranges\n    for(int i=0; i<s.length(); i++){\n        if(s[i] >= '0' && s[i] <= '9'){\n            int num = 0;\n            while(s[i] >= '0' && s[i] <= '9'){\n                num = num*10 + (s[i] - '0');\n                i++;\n            }\n            if(s[i] == 'a'){\n                apples = num;\n            } else if(s[i] == 'o'){\n                oranges = num;\n            }\n        }\n    }\n    \n    // Calculate the number of mango fruits\n    mango = n - apples - oranges;\n    \n    return mango;\n}\n\n"}
{"task_id": "CPP/68", "generation": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> result;\n    int smallest_even = -1;\n    int smallest_index = -1;\n    \n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] % 2 == 0 && (smallest_even == -1 || arr[i] < smallest_even)){\n            smallest_even = arr[i];\n            smallest_index = i;\n        }\n    }\n    \n    if(smallest_even != -1){\n        result.push_back(smallest_even);\n        result.push_back(smallest_index);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/69", "generation": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int maxFreq = -1;\n    for(int i=0; i<lst.size(); i++){\n        int count = 0;\n        for(int j=0; j<lst.size(); j++){\n            if(lst[j] == lst[i]){\n                count++;\n            }\n        }\n        if(count >= lst[i] && lst[i] > maxFreq){\n            maxFreq = lst[i];\n        }\n    }\n    return maxFreq;\n}"}
{"task_id": "CPP/70", "generation": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_list({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_list({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_list({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> result;\n    sort(lst.begin(), lst.end());\n    int left = 0, right = lst.size() - 1;\n    while (left <= right) {\n        result.push_back(lst[left]);\n        if (left != right) {\n            result.push_back(lst[right]);\n        }\n        left++;\n        right--;\n    }\n    return result;\n}"}
{"task_id": "CPP/71", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n    // Check if the three sides form a valid triangle\n    if(a + b > c && a + c > b && b + c > a){\n        // Calculate the semi-perimeter\n        float s = (a + b + c) / 2;\n        // Calculate the area using Heron's formula\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        // Round the area to 2 decimal points\n        return roundf(area * 100) / 100;\n    } else {\n        return -1; // Invalid triangle\n    }\n}\n\n"}
{"task_id": "CPP/72", "generation": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) \u279e false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) \u279e false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) \u279e true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) \u279e true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n    // Check if the vector q is balanced (palindromic)\n    bool balanced = true;\n    int n = q.size();\n    for(int i=0; i<n/2; i++){\n        if(q[i] != q[n-i-1]){\n            balanced = false;\n            break;\n        }\n    }\n    \n    // Check if the sum of elements is less than or equal to the maximum weight\n    int sum = 0;\n    for(int i=0; i<n; i++){\n        sum += q[i];\n    }\n    \n    return balanced && sum <= w;\n}"}
{"task_id": "CPP/73", "generation": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int changes = 0;\n    \n    for(int i=0; i<n/2; i++){\n        if(arr[i] != arr[n-1-i]){\n            changes++;\n        }\n    }\n    \n    return changes;\n}"}
{"task_id": "CPP/74", "generation": "/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) \u279e {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) \u279e {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) \u279e {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) \u279e {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) \u279e {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    \n    for(string s : lst1){\n        total_chars_lst1 += s.length();\n    }\n    \n    for(string s : lst2){\n        total_chars_lst2 += s.length();\n    }\n    \n    if(total_chars_lst1 < total_chars_lst2){\n        return lst1;\n    } else {\n        return lst2;\n    }\n}"}
{"task_id": "CPP/75", "generation": "#include <iostream>\n\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int num){\n    if(num <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=num; i++){\n        if(num % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nbool is_multiply_prime(int a){\n    // Check for all possible combinations of 3 prime numbers less than 100\n    for(int i=2; i<100; i++){\n        if(is_prime(i)){\n            for(int j=i+1; j<100; j++){\n                if(is_prime(j)){\n                    for(int k=j+1; k<100; k++){\n                        if(is_prime(k) && i*j*k == a){\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/76", "generation": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n    if(x == 1){\n        return true;\n    }\n    int power = 0;\n    while(pow(n, power) <= x){\n        if(pow(n, power) == x){\n            return true;\n        }\n        power++;\n    }\n    return false;\n}"}
{"task_id": "CPP/77", "generation": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    int cube_root = cbrt(a); // calculate the cube root of the input integer\n    return (cube_root * cube_root * cube_root == a); // check if the cube of the cube root is equal to the input integer\n}"}
{"task_id": "CPP/78", "generation": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    int count = 0;\n    string primes = \"2357BD\";\n    \n    for(int i=0; i<num.length(); i++){\n        if(primes.find(num[i]) != string::npos){\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n"}
{"task_id": "CPP/79", "generation": "/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string binary = \"db\";\n    while(decimal > 0){\n        binary = to_string(decimal % 2) + binary;\n        decimal = decimal / 2;\n    }\n    return binary + \"db\";\n}"}
{"task_id": "CPP/80", "generation": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if(s.length() < 3){\n        return false;\n    }\n    \n    for(int i=0; i<s.length()-2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/81", "generation": "/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letter_grades;\n    for(float grade : grades){\n        if(grade == 4.0){\n            letter_grades.push_back(\"A+\");\n        } else if(grade > 3.7){\n            letter_grades.push_back(\"A\");\n        } else if(grade > 3.3){\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 3.0){\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 2.7){\n            letter_grades.push_back(\"B\");\n        } else if(grade > 2.3){\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 2.0){\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 1.7){\n            letter_grades.push_back(\"C\");\n        } else if(grade > 1.3){\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 1.0){\n            letter_grades.push_back(\"D+\");\n        } else if(grade > 0.7){\n            letter_grades.push_back(\"D\");\n        } else if(grade > 0.0){\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}"}
{"task_id": "CPP/82", "generation": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int length = str.length();\n    if(length <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=length; i++){\n        if(length % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/83", "generation": "/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    int count = 0;\n    if(n == 1){\n        return 1;\n    }\n    count = 9 * (n-1) + 1;\n    return count;\n}\n\n"}
{"task_id": "CPP/84", "generation": "/*\nGiven a positive integer N, return in binary the total sum of its digits.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    int sum = 0;\n    while(N > 0){\n        sum += N % 10;\n        N /= 10;\n    }\n    string binary = \"\";\n    while(sum > 0){\n        binary = to_string(sum % 2) + binary;\n        sum /= 2;\n    }\n    return binary;\n}"}
{"task_id": "CPP/85", "generation": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for(int i=1; i<lst.size(); i+=2){\n        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/86", "generation": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string result = \"\";\n    string word = \"\";\n    \n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            sort(word.begin(), word.end());\n            result += word + \" \";\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    \n    sort(word.begin(), word.end());\n    result += word;\n    \n    return result;\n} \n\n"}
{"task_id": "CPP/87", "generation": "/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == x){\n                result.push_back({i, j});\n            }\n        }\n    }\n    \n    // Sort by rows in ascending order\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b){\n        return a[0] < b[0];\n    });\n    \n    // Sort by columns in descending order\n    for(int i=0; i<result.size(); i++){\n        sort(result[i].begin(), result[i].end(), greater<int>());\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/88", "generation": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    // Calculate the sum of first and last index values\n    int sum = array[0] + array[array.size()-1];\n    \n    // Sort the array in ascending order if sum is odd, else sort in descending order\n    if(sum % 2 == 1){\n        sort(array.begin(), array.end());\n    } else {\n        sort(array.rbegin(), array.rend());\n    }\n    \n    return array;\n}"}
{"task_id": "CPP/89", "generation": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(isalpha(s[i])){\n            char c = s[i];\n            if(islower(c)){\n                c = 'a' + (c - 'a' + 2*2) % 26;\n            } else {\n                c = 'A' + (c - 'A' + 2*2) % 26;\n            }\n            result += c;\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/90", "generation": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    if(lst.size() < 2){\n        return -1;\n    }\n    \n    sort(lst.begin(), lst.end());\n    \n    int smallest = lst[0];\n    for(int i=1; i<lst.size(); i++){\n        if(lst[i] > smallest){\n            return lst[i];\n        }\n    }\n    \n    return -1;\n}"}
{"task_id": "CPP/91", "generation": "/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int count = 0;\n    bool isI = false;\n    \n    for(int i=0; i<S.length(); i++){\n        if(S[i] == 'I' && (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!')){\n            isI = true;\n        }\n        if((S[i] == '.' || S[i] == '?' || S[i] == '!') && isI){\n            count++;\n            isI = false;\n        }\n    }\n    \n    return count;\n} \n\n"}
{"task_id": "CPP/92", "generation": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e true\n\nany_int(3, 2, 2) \u279e false\n\nany_int(3, -2, 1) \u279e true\n\nany_int(3.6, -2.2, 2) \u279e false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    if(floor(a)==a && floor(b)==b && floor(c)==c){\n        if(a==b+c || b==a+c || c==a+b){\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/93", "generation": "/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    string encodedMessage = \"\";\n    for(char c : message){\n        if(isalpha(c)){\n            if(islower(c)){\n                c = toupper(c);\n            }else{\n                c = tolower(c);\n            }\n            if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'){\n                c += 2;\n            }\n        }\n        encodedMessage += c;\n    }\n    return encodedMessage;\n}"}
{"task_id": "CPP/94", "generation": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int maxPrime = 0;\n    for(int num : lst){\n        if(num > 1){\n            bool isPrime = true;\n            for(int i=2; i*i<=num; i++){\n                if(num % i == 0){\n                    isPrime = false;\n                    break;\n                }\n            }\n            if(isPrime && num > maxPrime){\n                maxPrime = num;\n            }\n        }\n    }\n    \n    int sum = 0;\n    string primeStr = to_string(maxPrime);\n    for(char c : primeStr){\n        sum += c - '0';\n    }\n    \n    return sum;\n}"}
{"task_id": "CPP/95", "generation": "/*\nGiven a map, return true if all keys are strings and all keys are in lower case or  in upper case, else return false.\nThe function should return false is the given map is empty.\nExamples:\ncheck_dict_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_dict_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_dict_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    if(dict.empty()){\n        return false;\n    }\n    \n    for(auto const &pair : dict){\n        string key = pair.first;\n        for(char c : key){\n            if(!isalpha(c)){\n                return false;\n            }\n        }\n        \n        bool isLowerCase = true;\n        bool isUpperCase = true;\n        \n        for(char c : key){\n            if(islower(c)){\n                isUpperCase = false;\n            } else if(isupper(c)){\n                isLowerCase = false;\n            }\n        }\n        \n        if(!isLowerCase && !isUpperCase){\n            return false;\n        }\n    }\n    \n    return true;\n}"}
{"task_id": "CPP/96", "generation": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> primes;\n    if(n <= 1){\n        return primes;\n    }\n    \n    for(int i=2; i<n; i++){\n        bool isPrime = true;\n        for(int j=2; j*j<=i; j++){\n            if(i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    \n    return primes;\n}"}
{"task_id": "CPP/97", "generation": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int unitA = abs(a) % 10;\n    int unitB = abs(b) % 10;\n    return unitA * unitB;\n}"}
{"task_id": "CPP/98", "generation": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for(int i=0; i<s.length(); i+=2){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/99", "generation": "/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    double num = stod(value);\n    int lower = floor(num);\n    int upper = ceil(num);\n    \n    if (abs(num - lower) < abs(num - upper)) {\n        return lower;\n    } else {\n        return upper;\n    }\n}"}
{"task_id": "CPP/100", "generation": "/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> result;\n    result.push_back(n);\n    for(int i=1; i<n; i++){\n        if(n%2 == 0){\n            n += 2;\n        } else {\n            n += 1;\n        }\n        result.push_back(n);\n    }\n    return result;\n}"}
{"task_id": "CPP/101", "generation": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n    \n    for(char c : s){\n        if(c == ' ' || c == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    \n    if(word != \"\"){\n        words.push_back(word);\n    }\n    \n    return words;\n}"}
{"task_id": "CPP/102", "generation": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    int max_even = -1;\n    for(int i = y; i >= x; i--){\n        if(i % 2 == 0){\n            max_even = i;\n            break;\n        }\n    }\n    return max_even;\n}\n\n"}
{"task_id": "CPP/103", "generation": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n    if(n > m){\n        return \"-1\";\n    }\n    int sum = 0;\n    for(int i = n; i <= m; i++){\n        sum += i;\n    }\n    int avg = round((double)sum / (m - n + 1));\n    string binary = \"\";\n    while(avg > 0){\n        binary = to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n    return binary;\n} \n\n"}
{"task_id": "CPP/104", "generation": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for(int num : x){\n        bool hasEvenDigit = false;\n        int temp = num;\n        while(temp > 0){\n            int digit = temp % 10;\n            if(digit % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if(!hasEvenDigit){\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}"}
{"task_id": "CPP/105", "generation": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    vector<int> sorted_arr;\n    vector<string> result;\n    map<int, string> num_to_name = {\n        {1, \"One\"},\n        {2, \"Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"Nine\"}\n    };\n    \n    for(int num : arr){\n        if(num >= 1 && num <= 9){\n            sorted_arr.push_back(num);\n        }\n    }\n    \n    sort(sorted_arr.begin(), sorted_arr.end());\n    reverse(sorted_arr.begin(), sorted_arr.end());\n    \n    for(int num : sorted_arr){\n        result.push_back(num_to_name[num]);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/106", "generation": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> result;\n    int factorial = 1;\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        if(i%2 == 0){\n            factorial *= i;\n            result.push_back(factorial);\n        } else {\n            sum += i;\n            result.push_back(sum);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/107", "generation": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> result = {0, 0};\n    for(int i=1; i<=n; i++){\n        string num = to_string(i);\n        string rev_num = num;\n        reverse(rev_num.begin(), rev_num.end());\n        if(num == rev_num){\n            if(i % 2 == 0){\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/108", "generation": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for(int num : n){\n        int sum = 0;\n        int temp = abs(num);\n        while(temp > 0){\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if(num < 0){\n            sum *= -1;\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "CPP/109", "generation": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if(arr.empty()){\n        return true;\n    }\n    \n    int n = arr.size();\n    int minIndex = 0;\n    for(int i=0; i<n; i++){\n        if(arr[i] < arr[minIndex]){\n            minIndex = i;\n        }\n    }\n    \n    for(int i=0; i<n; i++){\n        if(arr[(minIndex+i)%n] != arr[i]){\n            return false;\n        }\n    }\n    \n    return true;\n}"}
{"task_id": "CPP/110", "generation": "/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int oddCount = 0;\n    for(int num : lst1){\n        if(num % 2 != 0){\n            oddCount++;\n        }\n    }\n    if(oddCount > lst2.size()){\n        return \"NO\";\n    }\n    return \"YES\";\n}"}
{"task_id": "CPP/111", "generation": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char, int> result;\n    map<char, int> count;\n    \n    // Count the occurrences of each letter\n    for(char c : test){\n        if(c != ' '){\n            count[c]++;\n        }\n    }\n    \n    // Find the maximum occurrence\n    int max_occurrence = 0;\n    for(auto it : count){\n        max_occurrence = max(max_occurrence, it.second);\n    }\n    \n    // Add letters with maximum occurrence to the result map\n    for(auto it : count){\n        if(it.second == max_occurrence){\n            result[it.first] = it.second;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/112", "generation": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    // Delete characters in s that are equal to any character in c\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(c.find(s[i]) == string::npos){\n            result += s[i];\n        }\n    }\n    \n    // Check if the result string is palindrome\n    string reversed = result;\n    reverse(reversed.begin(), reversed.end());\n    \n    string isPalindrome = (result == reversed) ? \"True\" : \"False\";\n    \n    return {result, isPalindrome};\n}"}
{"task_id": "CPP/113", "generation": "/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    vector<string> result;\n    for(string s : lst){\n        int count = 0;\n        for(char c : s){\n            if((c - '0') % 2 != 0){\n                count++;\n            }\n        }\n        string res = \"the number of odd elements \" + to_string(count) + \"n the str\" + to_string(count) + \"ng \" + s + \" of the \" + to_string(count) + \"nput.\";\n        result.push_back(res);\n    }\n    return result;\n}"}
{"task_id": "CPP/114", "generation": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    long long currentSum = nums[0];\n    \n    for(int i=1; i<nums.size(); i++){\n        currentSum = min(nums[i], currentSum + nums[i]);\n        minSum = min(minSum, currentSum);\n    }\n    \n    return minSum;\n}\n\n"}
{"task_id": "CPP/115", "generation": "/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity. Can't use buckets from other wells to extract water from one well.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int rows = grid.size();\n    int cols = grid[0].size();\n    int total_water = 0;\n    \n    for(int i=0; i<rows; i++){\n        for(int j=0; j<cols; j++){\n            total_water += grid[i][j];\n        }\n    }\n    \n    int buckets_needed = total_water / capacity;\n    if(total_water % capacity != 0){\n        buckets_needed++;\n    }\n    \n    return buckets_needed;\n} \n\n"}
{"task_id": "CPP/116", "generation": "/*\nIn this Kata, you have to sort a vector of integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array({1, 5, 2, 3, 4}) == {1, 2, 4, 3, 5}\n>>> sort_array({-2, -3, -4, -5, -6}) == {-4, -2, -6, -5, -3}\n>>> sort_array({1, 0, 2, 3, 4}) == {0, 1, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    // Custom comparator function to sort based on number of ones in binary representation\n    auto cmp = [](int a, int b) {\n        int countA = __builtin_popcount(abs(a));\n        int countB = __builtin_popcount(abs(b));\n        if (countA == countB) {\n            return a < b;\n        }\n        return countA < countB;\n    };\n    \n    // Sort the vector using the custom comparator function\n    sort(arr.begin(), arr.end(), cmp);\n    \n    return arr;\n}"}
{"task_id": "CPP/117", "generation": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    vector<string> result;\n    string word = \"\";\n    int consonant_count = 0;\n    \n    for(int i=0; i<s.length(); i++){\n        if(s[i] != ' '){\n            word += s[i];\n            if(tolower(s[i]) != 'a' && tolower(s[i]) != 'e' && tolower(s[i]) != 'i' && tolower(s[i]) != 'o' && tolower(s[i]) != 'u'){\n                consonant_count++;\n            }\n        }\n        else{\n            if(consonant_count == n){\n                result.push_back(word);\n            }\n            word = \"\";\n            consonant_count = 0;\n        }\n    }\n    \n    if(consonant_count == n){\n        result.push_back(word);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/118", "generation": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n    for(int i=n-2; i>0; i--){\n        if(word[i] != ' ' && vowels.find(word[i]) != string::npos){\n            if(word[i-1] != ' ' && word[i+1] != ' ' && vowels.find(word[i-1]) == string::npos && vowels.find(word[i+1]) == string::npos){\n                return string(1, word[i]);\n            }\n        }\n    }\n    return \"\";\n} \n\n"}
{"task_id": "CPP/119", "generation": "/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    int count = 0;\n    for (string s : lst) {\n        for (char c : s) {\n            if (c == '(') {\n                count++;\n            } else {\n                if (count == 0) {\n                    return \"No\";\n                }\n                count--;\n            }\n        }\n    }\n    return count == 0 ? \"Yes\" : \"No\";\n}"}
{"task_id": "CPP/120", "generation": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr, in ascending order.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    // Sort the vector in descending order\n    sort(arr.begin(), arr.end(), greater<int>());\n    \n    // Create a new vector to store the maximum k numbers\n    vector<int> result;\n    \n    // Add the first k numbers to the result vector\n    for(int i=0; i<k; i++){\n        result.push_back(arr[i]);\n    }\n    \n    // Sort the result vector in ascending order\n    sort(result.begin(), result.end());\n    \n    return result;\n}"}
{"task_id": "CPP/121", "generation": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%2 == 0 && lst[i]%2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/122", "generation": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum = 0;\n    for(int i=0; i<k; i++){\n        if(arr[i] >= 10 && arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n} \n\n"}
{"task_id": "CPP/123", "generation": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> result;\n    result.push_back(1); // Add 1 to the result as it is always present in the Collatz sequence\n    while(n != 1){\n        if(n % 2 == 1){ // If n is odd\n            result.push_back(n);\n        }\n        n = (n % 2 == 0) ? n / 2 : 3 * n + 1; // Calculate the next term in the sequence\n    }\n    sort(result.begin(), result.end()); // Sort the result vector in increasing order\n    return result;\n}"}
{"task_id": "CPP/124", "generation": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    if(date.empty()){\n        return false;\n    }\n    \n    int month, day, year;\n    if(sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year) != 3){\n        return false;\n    }\n    \n    if(month < 1 || month > 12){\n        return false;\n    }\n    \n    if(month == 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    } else if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n            return false;\n        }\n    } else {\n        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n    \n    return true;\n}"}
{"task_id": "CPP/125", "generation": "/*\nGiven a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector with one element, the number of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n    vector<string> words;\n    string word = \"\";\n    bool hasWhitespace = false;\n    bool hasComma = false;\n    \n    for(char c : txt){\n        if(c == ' '){\n            hasWhitespace = true;\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }else if(c == ','){\n            hasComma = true;\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }else{\n            word += c;\n        }\n    }\n    \n    if(word != \"\"){\n        words.push_back(word);\n    }\n    \n    if(!hasWhitespace && !hasComma){\n        int count = 0;\n        for(char c : txt){\n            if(islower(c)){\n                int order = c - 'a';\n                if(order % 2 != 0){\n                    count++;\n                }\n            }\n        }\n        words.push_back(to_string(count));\n    }\n    \n    return words;\n}"}
{"task_id": "CPP/126", "generation": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If the a number appears more than twice, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) \u279e true\nis_sorted({1, 2, 3, 4, 5}) \u279e true\nis_sorted({1, 3, 2, 4, 5}) \u279e false\nis_sorted({1, 2, 3, 4, 5, 6}) \u279e true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) \u279e true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) \u279e false\nis_sorted({1, 2, 2, 3, 3, 4}) \u279e true\nis_sorted({1, 2, 2, 2, 3, 4}) \u279e false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    for(int i=0; i<lst.size()-1; i++){\n        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n    for(int i=0; i<lst.size()-2; i++){\n        if(lst[i] == lst[i+1] && lst[i] == lst[i+2]){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/127", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nbool isPrime(int n){\n    if(n <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=n; i++){\n        if(n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2){\n    int start1 = interval1[0];\n    int end1 = interval1[1];\n    int start2 = interval2[0];\n    int end2 = interval2[1];\n    \n    int intersectionStart = max(start1, start2);\n    int intersectionEnd = min(end1, end2);\n    \n    if(intersectionStart > intersectionEnd){\n        return \"NO\";\n    }\n    \n    int length = intersectionEnd - intersectionStart;\n    \n    if(isPrime(length)){\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/128", "generation": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if(arr.empty()){\n        return -32768;\n    }\n    \n    int product = 1;\n    int sum = 0;\n    \n    for(int num : arr){\n        if(num > 0){\n            product *= 1;\n        } else if(num < 0){\n            product *= -1;\n        } else {\n            product *= 0;\n        }\n        \n        sum += abs(num);\n    }\n    \n    return product * sum;\n}"}
{"task_id": "CPP/129", "generation": "/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int n = grid.size();\n    vector<vector<int>> dp(k + 1, vector<int>(n, INT_MAX));\n    vector<vector<vector<int>>> path(k + 1, vector<vector<int>>(n, vector<int>(n)));\n    \n    // Initialize the base case\n    for(int i = 0; i < n; i++){\n        dp[1][i] = grid[i/n][i%n];\n        path[1][i] = {i};\n    }\n    \n    // Dynamic programming to find the minimum path\n    for(int len = 2; len <= k; len++){\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n                if(i == j) continue;\n                for(int l = 0; l < n; l++){\n                    if(dp[len][i] > dp[len-1][l] + grid[i/n][i%n]){\n                        dp[len][i] = dp[len-1][l] + grid[i/n][i%n];\n                        path[len][i] = path[len-1][l];\n                        path[len][i].push_back(i);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Find the minimum path\n    int min_idx = 0;\n    for(int i = 1; i < n; i++){\n        if(dp[k][i] < dp[k][min_idx]){\n            min_idx = i;\n        }\n    }\n    \n    return path[k][min_idx];\n}"}
{"task_id": "CPP/130", "generation": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> result;\n    if(n == 0){\n        return result;\n    }\n    result.push_back(3);\n    if(n == 1){\n        return result;\n    }\n    result.push_back(1);\n    if(n == 2){\n        return result;\n    }\n    result.push_back(2);\n    for(int i = 3; i <= n; i++){\n        if(i % 2 == 0){\n            result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i-1] + result[i-2] + result[i-3]);\n        }\n    }\n    return result;\n} \n\n"}
{"task_id": "CPP/131", "generation": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int product = 1;\n    while(n > 0){\n        int digit = n % 10;\n        if(digit % 2 != 0){\n            product *= digit;\n        }\n        n /= 10;\n    }\n    if(product == 1){\n        return 0;\n    }\n    return product;\n}\n\n"}
{"task_id": "CPP/132", "generation": "/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") \u279e true\nis_nested(\"[]]]]]]][[[[[]\") \u279e false\nis_nested(\"[][]\") \u279e false\nis_nested(\"[]\") \u279e false\nis_nested(\"[[][]]\") \u279e true\nis_nested(\"[[]][[\") \u279e true\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n    int count = 0;\n    for(int i=0; i<str.length(); i++){\n        if(str[i] == '['){\n            count++;\n        } else if(str[i] == ']' && count > 0){\n            count--;\n        }\n    }\n    return count > 0;\n}\n\n"}
{"task_id": "CPP/133", "generation": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n    return sum;\n}"}
{"task_id": "CPP/134", "generation": "/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e false\ncheck_if_last_char_is_a_letter(\"apple pi e\") \u279e true\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e false\ncheck_if_last_char_is_a_letter(\"\") \u279e false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if(txt.empty()){\n        return false;\n    }\n    \n    char lastChar = txt.back();\n    \n    if(isalpha(lastChar)){\n        int i = txt.size() - 2;\n        while(i >= 0 && txt[i] != ' '){\n            i--;\n        }\n        \n        if(i < 0){\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\n"}
{"task_id": "CPP/135", "generation": "/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int index = -1;\n    for(int i=1; i<arr.size(); i++){\n        if(arr[i] < arr[i-1]){\n            index = i-1;\n        }\n    }\n    return index;\n}"}
{"task_id": "CPP/136", "generation": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    vector<int> result = {0, 0};\n    int largest_negative = INT_MIN;\n    int smallest_positive = INT_MAX;\n    \n    for(int num : lst){\n        if(num < 0 && num > largest_negative){\n            largest_negative = num;\n        }\n        if(num > 0 && num < smallest_positive){\n            smallest_positive = num;\n        }\n    }\n    \n    if(largest_negative != INT_MIN){\n        result[0] = largest_negative;\n    }\n    if(smallest_positive != INT_MAX){\n        result[1] = smallest_positive;\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/137", "generation": "/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e \"None\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n    if(a.type() == typeid(int) && b.type() == typeid(int)){\n        int int_a = boost::any_cast<int>(a);\n        int int_b = boost::any_cast<int>(b);\n        if(int_a > int_b){\n            return int_a;\n        } else if(int_b > int_a){\n            return int_b;\n        } else {\n            return \"None\";\n        }\n    } else if(a.type() == typeid(float) && b.type() == typeid(float)){\n        float float_a = boost::any_cast<float>(a);\n        float float_b = boost::any_cast<float>(b);\n        if(float_a > float_b){\n            return float_a;\n        } else if(float_b > float_a){\n            return float_b;\n        } else {\n            return \"None\";\n        }\n    } else if(a.type() == typeid(string) && b.type() == typeid(string)){\n        string string_a = boost::any_cast<string>(a);\n        string string_b = boost::any_cast<string>(b);\n        if(string_a.find_first_of(\",.\") != string::npos){\n            replace(string_a.begin(), string_a.end(), ',', '.');\n        }\n        if(string_b.find_first_of(\",.\") != string::npos){\n            replace(string_b.begin(), string_b.end(), ',', '.');\n        }\n        if(stof(string_a) > stof(string_b)){\n            return string_a;\n        } else if(stof(string_b) > stof(string_a)){\n            return string_b;\n        } else {\n            return \"None\";\n        }\n    } else {\n        return \"Invalid input types\";\n    }\n}\n\n"}
{"task_id": "CPP/138", "generation": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if(n % 2 != 0 || n < 8){\n        return false;\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/139", "generation": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long result = 1;\n    for(int i = n; i > 0; i--){\n        long long factorial = 1;\n        for(int j = i; j > 0; j--){\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/140", "generation": "/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string result = \"\";\n    int consecutive_spaces = 0;\n    \n    for(char c : text){\n        if(c == ' '){\n            consecutive_spaces++;\n            if(consecutive_spaces > 2){\n                result += \"-\";\n            } else {\n                result += \"_\";\n            }\n        } else {\n            result += c;\n            consecutive_spaces = 0;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/141", "generation": "/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    int digitCount = 0;\n    int dotCount = 0;\n    int dotIndex = -1;\n    \n    // Check conditions\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            digitCount++;\n        } else if (file_name[i] == '.') {\n            dotCount++;\n            dotIndex = i;\n        }\n    }\n    \n    if (digitCount > 3 || dotCount != 1 || dotIndex == 0 || dotIndex == file_name.length() - 1) {\n        return \"No\";\n    }\n    \n    string extension = file_name.substr(dotIndex + 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\") {\n        return \"No\";\n    }\n    \n    return \"Yes\";\n}\n\n"}
{"task_id": "CPP/142", "generation": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%3 == 0){\n            lst[i] = lst[i]*lst[i]; // square the integer entry if index is multiple of 3\n        }\n        else if(i%4 == 0){\n            lst[i] = lst[i]*lst[i]*lst[i]; // cube the integer entry if index is multiple of 4 and not multiple of 3\n        }\n        sum += lst[i]; // add the modified or unmodified entry to the sum\n    }\n    return sum;\n}"}
{"task_id": "CPP/143", "generation": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    string result = \"\";\n    string word = \"\";\n    int length = sentence.length();\n    \n    for(int i=0; i<length; i++){\n        if(sentence[i] != ' '){\n            word += sentence[i];\n        }\n        else{\n            int word_length = word.length();\n            bool is_prime = true;\n            if(word_length <= 1){\n                is_prime = false;\n            }\n            else{\n                for(int j=2; j*j <= word_length; j++){\n                    if(word_length % j == 0){\n                        is_prime = false;\n                        break;\n                    }\n                }\n            }\n            if(is_prime){\n                result += word + \" \";\n            }\n            word = \"\";\n        }\n    }\n    \n    int last_word_length = word.length();\n    bool is_prime = true;\n    if(last_word_length <= 1){\n        is_prime = false;\n    }\n    else{\n        for(int j=2; j*j <= last_word_length; j++){\n            if(last_word_length % j == 0){\n                is_prime = false;\n                break;\n            }\n        }\n    }\n    if(is_prime){\n        result += word;\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/144", "generation": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n    int numerator1 = stoi(x.substr(0, x.find(\"/\")));\n    int denominator1 = stoi(x.substr(x.find(\"/\") + 1));\n    int numerator2 = stoi(n.substr(0, n.find(\"/\")));\n    int denominator2 = stoi(n.substr(n.find(\"/\") + 1));\n\n    if ((numerator1 * denominator2) % denominator1 == 0 && (numerator2 * denominator1) % denominator2 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "CPP/145", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to calculate the sum of digits of a number\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num != 0) {\n        sum += abs(num % 10);\n        num /= 10;\n    }\n    return sum;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    // Custom comparator function for sorting based on sum of digits and index\n    auto comp = [&](int a, int b) {\n        int sumA = sumOfDigits(a);\n        int sumB = sumOfDigits(b);\n        if (sumA == sumB) {\n            return find(nums.begin(), nums.end(), a) < find(nums.begin(), nums.end(), b);\n        }\n        return sumA < sumB;\n    };\n\n    // Sorting the vector using the custom comparator\n    sort(nums.begin(), nums.end(), comp);\n\n    return nums;\n}\n\n"}
{"task_id": "CPP/146", "generation": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for(int num : nums){\n        if(num > 10){\n            string numStr = to_string(num);\n            if((numStr[0] - '0') % 2 != 0 && (numStr[numStr.size()-1] - '0') % 2 != 0){\n                count++;\n            }\n        }\n    }\n    return count;\n} \n\n"}
{"task_id": "CPP/147", "generation": "/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_max_triples(int n){\n    vector<int> a(n);\n    int count = 0;\n    \n    for(int i=0; i<n; i++){\n        a[i] = i*i - i + 1;\n    }\n    \n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    \n    return count;\n}\n\n"}
{"task_id": "CPP/148", "generation": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    int start = -1;\n    int end = -1;\n    \n    for(int i=0; i<planets.size(); i++){\n        if(planets[i] == planet1){\n            start = i;\n        }\n        if(planets[i] == planet2){\n            end = i;\n        }\n    }\n    \n    if(start == -1 || end == -1){\n        return result;\n    }\n    \n    if(start < end){\n        for(int i=start+1; i<end; i++){\n            result.push_back(planets[i]);\n        }\n    } else {\n        for(int i=end+1; i<start; i++){\n            result.push_back(planets[i]);\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/149", "generation": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    // Remove strings with odd lengths\n    vector<string> result;\n    for(string s : lst){\n        if(s.length() % 2 == 0){\n            result.push_back(s);\n        }\n    }\n    \n    // Sort the vector by length and alphabetically\n    sort(result.begin(), result.end(), [](const string& a, const string& b){\n        if(a.length() == b.length()){\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    \n    return result;\n}"}
{"task_id": "CPP/150", "generation": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    int i;\n    for(i=2;i<=n/2;i++){\n        if(n%i==0){\n            return y;\n        }\n    }\n    return x;\n}\n\n"}
{"task_id": "CPP/151", "generation": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && (int)lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/152", "generation": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for(int i=0; i<game.size(); i++){\n        if(game[i] == guess[i]){\n            result.push_back(0);\n        }else{\n            result.push_back(abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/153", "generation": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    int max_strength = INT_MIN;\n    string strongest_extension = \"\";\n    \n    for(string extension : extensions){\n        int cap_count = 0;\n        int sm_count = 0;\n        \n        for(char c : extension){\n            if(isupper(c)){\n                cap_count++;\n            } else if(islower(c)){\n                sm_count++;\n            }\n        }\n        \n        int strength = cap_count - sm_count;\n        \n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n}"}
{"task_id": "CPP/154", "generation": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a,string b){\n    if(a.length() != b.length()){\n        return false;\n    }\n    \n    string temp = b + b;\n    \n    if(temp.find(a) != string::npos){\n        return true;\n    }\n    \n    return false;\n}\n\n"}
{"task_id": "CPP/155", "generation": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> result = {0, 0};\n    string num_str = to_string(abs(num));\n    \n    for(char c : num_str){\n        if((c - '0') % 2 == 0){\n            result[0]++;\n        } else {\n            result[1]++;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/156", "generation": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_roman(int number){\n    // Define the roman numeral symbols and their corresponding values\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n    string roman = \"\";\n    \n    // Iterate through the values and symbols to build the roman numeral string\n    for(int i=0; i<values.size(); i++){\n        while(number >= values[i]){\n            roman += symbols[i];\n            number -= values[i];\n        }\n    }\n    \n    // Convert the roman numeral string to lowercase\n    for(int i=0; i<roman.size(); i++){\n        roman[i] = tolower(roman[i]);\n    }\n    \n    return roman;\n}"}
{"task_id": "CPP/157", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n    // Sort the sides in ascending order\n    if(a > c){\n        float temp = a;\n        a = c;\n        c = temp;\n    }\n    if(b > c){\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    \n    // Check if it forms a right-angled triangle\n    if(pow(c,2) == pow(a,2) + pow(b,2)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n"}
{"task_id": "CPP/158", "generation": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    string maxWord = \"\";\n    int maxUniqueChars = 0;\n    \n    for(string word : words){\n        int uniqueChars = 0;\n        vector<char> chars;\n        \n        for(char c : word){\n            if(find(chars.begin(), chars.end(), c) == chars.end()){\n                uniqueChars++;\n                chars.push_back(c);\n            }\n        }\n        \n        if(uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word < maxWord)){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        }\n    }\n    \n    return maxWord;\n}"}
{"task_id": "CPP/159", "generation": "/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n    int totalCarrots = number + need;\n    int eatenCarrots = totalCarrots;\n    if (totalCarrots > remaining) {\n        eatenCarrots = remaining;\n    }\n    int carrotsLeft = remaining - eatenCarrots;\n    return {eatenCarrots, carrotsLeft};\n}"}
{"task_id": "CPP/160", "generation": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    if(operato.size() != operand.size()-1){\n        return -1; // Invalid input\n    }\n    \n    int result = operand[0]; // Initialize result with the first operand\n    \n    for(int i=0; i<operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"//\"){\n            if(operand[i+1] != 0){\n                result /= operand[i+1];\n            }\n            else{\n                return -1; // Division by zero error\n            }\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n        else{\n            return -1; // Invalid operator\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/161", "generation": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    for(int i=0;i<s.length();i++){\n        if(isalpha(s[i])){\n            if(islower(s[i])){\n                s[i] = toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n            }\n        }\n    }\n    if(count_if(s.begin(), s.end(), ::isalpha) == 0){\n        reverse(s.begin(), s.end());\n    }\n    return s;\n}"}
{"task_id": "CPP/162", "generation": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    if(text.empty()){\n        return \"None\";\n    }\n    \n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n    \n    char mdString[33];\n    for(int i = 0; i < 16; i++){\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    }\n    \n    return string(mdString);\n}"}
{"task_id": "CPP/163", "generation": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    vector<int> result;\n    if(a > b){\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    \n    for(int i=a; i<=b; i++){\n        if(i % 2 == 0 && i < 10){\n            result.push_back(i);\n        }\n    }\n    \n    return result;\n}\n\n"}
